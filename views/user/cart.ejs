<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Shopping Cart - MotionHaus</title>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    :root {
      --bg: #ffffff;
      --text: #000000;
      --border: #e5e5e5;
      --card-bg: #f8f8f8;
      --footer-text: #666666;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    }

    body {
      background: var(--bg);
      color: var(--text);
    }

    header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 25px 50px;
      background: var(--bg);
      border-bottom: 1px solid var(--border);
    }
  
    .logo {
      font-size: 24px;
      font-weight: 800;
    }
  
    nav a {
      margin: 0 15px;
      text-decoration: none;
      color: var(--text);
      font-weight: 600;
    }
  
    .icons .icon {
      margin-left: 20px;
      font-size: 18px;
      cursor: pointer;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 40px 20px;
    }

    .cart-header {
      margin-bottom: 40px;
    }

    .cart-header h1 {
      font-size: 32px;
      font-weight: 600;
      margin-bottom: 10px;
    }

    .cart-empty {
      text-align: center;
      padding: 60px 20px;
    }

    .cart-empty h2 {
      font-size: 24px;
      margin-bottom: 20px;
    }

    .cart-empty p {
      color: #666;
      margin-bottom: 30px;
    }

    .continue-shopping {
      display: inline-block;
      padding: 15px 30px;
      background: #000;
      color: #fff;
      text-decoration: none;
      border-radius: 4px;
      font-weight: 600;
    }

    .cart-items {
      margin-bottom: 40px;
    }

    .cart-item {
      display: grid;
      grid-template-columns: 120px 1fr auto;
      gap: 20px;
      padding: 20px;
      border: 1px solid var(--border);
      border-radius: 8px;
      margin-bottom: 20px;
    }

    .item-image {
      width: 120px;
      height: 120px;
      background: #f5f5f5;
      border-radius: 4px;
      overflow: hidden;
    }

    .item-image img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    .item-details {
      display: flex;
      flex-direction: column;
      justify-content: space-between;
    }

    .item-name {
      font-size: 18px;
      font-weight: 600;
      margin-bottom: 10px;
    }

    .item-size {
      color: #666;
      margin-bottom: 10px;
    }

    .item-price {
      font-size: 18px;
      font-weight: 600;
    }

    .item-quantity {
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .quantity-btn {
      width: 30px;
      height: 30px;
      border: 1px solid var(--border);
      background: none;
      font-size: 16px;
      cursor: pointer;
      border-radius: 4px;
    }

    .quantity-input {
      width: 50px;
      height: 30px;
      border: 1px solid var(--border);
      text-align: center;
      border-radius: 4px;
    }

    .remove-item {
      color: #dc3545;
      background: none;
      border: none;
      cursor: pointer;
      font-size: 14px;
      padding: 10px;
    }

    .cart-summary {
      background: var(--card-bg);
      padding: 30px;
      border-radius: 8px;
    }

    .summary-header {
      font-size: 20px;
      font-weight: 600;
      margin-bottom: 20px;
    }

    .summary-row {
      display: flex;
      justify-content: space-between;
      margin-bottom: 15px;
      color: #666;
    }

    .summary-row.total {
      font-size: 18px;
      font-weight: 600;
      color: var(--text);
      border-top: 1px solid var(--border);
      padding-top: 15px;
      margin-top: 15px;
    }

    .checkout-btn {
      width: 100%;
      padding: 15px;
      background: #000;
      color: #fff;
      border: none;
      border-radius: 4px;
      font-size: 16px;
      font-weight: 600;
      cursor: pointer;
      margin-top: 20px;
    }

    .checkout-btn:hover {
      background: #333;
    }

    .footer {
      background: var(--card-bg);
      padding: 60px 80px 30px;
      font-size: 14px;
    }
  
    .footer-main {
      display: flex;
      justify-content: space-between;
      flex-wrap: wrap;
      margin-top: 60px;
      gap: 40px;
    }
  
    .footer-about {
      max-width: 300px;
    }
  
    .footer-about p {
      margin: 20px 0;
      line-height: 1.5;
      color: var(--footer-text);
    }
  
    .social-icons {
      display: flex;
      gap: 12px;
      margin-top: 10px;
    }

    /* Add the blocked-item class */
    .blocked-item {
      opacity: 0.6;
    }

    /* Add these styles to the existing style section */
    .stock-status {
      font-size: 14px;
      margin: 8px 0;
    }
    .stock-status.in-stock {
      color: #2ecc71;
    }
    .stock-status.out-of-stock {
      color: #e74c3c;
    }

    .coupon-discount {
      display: flex;
      justify-content: space-between;
      margin-bottom: 16px;
      color: #222;
      font-size: 16px;
    }
    .coupon-discount.hidden {
      display: none;
    }
    .applied-coupon {
      display: block;
      background: #f8fff8;
      border: 1px solid #c3e6cb;
      border-radius: 8px;
      padding: 12px;
      margin-bottom: 18px;
    }
    .applied-coupon.hidden {
      display: none;
    }
  </style>
</head>
<body>
  <%- include('../partials/navbar') %>

  <div class="container" style="display: flex; gap: 40px; align-items: flex-start;">
    <% if (!cart || cart.items.length === 0) { %>
      <div class="cart-empty" style="flex: 1;">
        <h2>Your cart is empty</h2>
        <p>Looks like you haven't added any items to your cart yet.</p>
        <a href="/products" class="continue-shopping">Continue Shopping</a>
      </div>
    <% } else { %>
      <div style="flex: 2;">
        <h1 style="font-size: 2.2rem; font-weight: 700; margin-bottom: 32px;">YOUR CART</h1>
        
        <% let hasBlockedProducts = false; %>
        <% for (let i = 0; i < cart.items.length; i++) { %>
          <% if (cart.items[i].product && cart.items[i].product.isBlocked) { %>
            <% hasBlockedProducts = true; %>
          <% } %>
        <% } %>
        
        <% if (hasBlockedProducts) { %>
          <div style="background-color: #fff3cd; color: #856404; padding: 16px; border-radius: 8px; margin-bottom: 20px; border: 1px solid #ffeeba;">
            <p style="margin-bottom: 8px; font-weight: 600;">Some items in your cart are no longer available</p>
            <p>Items that are no longer available will be removed when you proceed to checkout.</p>
          </div>
        <% } %>
        
     <% cart.items.forEach(item => { %>
  <% if (item.product) { %>
    <div class="cart-item <%= item.product.isBlocked ? 'blocked-item' : '' %>" 
         data-id="<%= item.product._id %>" 
         data-size="<%= item.size %>"
         style="display: flex; align-items: center; background: #fff; border-radius: 16px; box-shadow: 0 2px 8px rgba(0,0,0,0.04); padding: 24px; margin-bottom: 20px; border: 1px solid #eee;">
      <div style="width: 110px; height: 110px; border-radius: 12px; overflow: hidden; background: #f5f5f5; margin-right: 24px;">
        <img src="<%= item.product.images[0] %>" alt="<%= item.product.name %>" style="width: 100%; height: 100%; object-fit: cover;">
      </div>
      <div style="flex: 1;">
        <div style="font-size: 18px; font-weight: 600; margin-bottom: 6px;"><%= item.product.name %></div>
        <div style="font-size: 14px; color: #888; margin-bottom: 2px;">Size: <%= item.size %></div>
        <div style="font-size: 14px; color: #888; margin-bottom: 2px;">Color: <%= item.product.color || 'N/A' %></div>
        <% 
          const sizeObj = item.product.sizes.find(s => Number(s.size) === Number(item.size));
          const stockAvailable = sizeObj ? sizeObj.quantity : 0;
          const isOutOfStock = stockAvailable < item.quantity;
        %>
        <div class="stock-status <%= isOutOfStock ? 'out-of-stock' : 'in-stock' %>">
          <% if (isOutOfStock) { %>
            Out of Stock (Only <%= stockAvailable %> available)
          <% } else { %>
            In Stock (<%= stockAvailable %> available)
          <% } %>
        </div>
        <div style="margin-top: 10px;">
          <% if (item.price < item.product.price) { %>
            <span style="text-decoration: line-through; color: #999; font-size: 14px; margin-right: 8px;">
              ₹<%= item.product.price.toFixed(2) %>
            </span>
            <span style="font-size: 20px; font-weight: 700; color: #000;">
              ₹<%= item.price.toFixed(2) %>
            </span>
            <span style="color: #28a745; font-size: 14px; margin-left: 8px;">
              <%= (((item.product.price - item.price) / item.product.price) * 100).toFixed(0) %>% OFF
            </span>
          <% } else { %>
            <span style="font-size: 20px; font-weight: 700;">₹<%= item.price.toFixed(2) %></span>
          <% } %>
        </div>
        <% if (item.product.isBlocked) { %>
          <div style="color: #e74c3c; font-size: 14px; margin-top: 8px; font-weight: 500;">This item is no longer available</div>
        <% } %>
      </div>
      <div style="display: flex; align-items: center; gap: 16px;">
        <button class="quantity-btn" 
                onclick="updateQuantity('<%= item.product._id %>', -1)" 
                style="width: 36px; height: 36px; border-radius: 8px; border: 1px solid #eee; background: #fafafa; font-size: 20px;"
                <%= isOutOfStock ? 'disabled' : '' %>>−</button>
        <input type="number" 
               class="quantity-input" 
               value="<%= item.quantity %>" 
               min="1" 
               max="<%= Math.min(stockAvailable, 3) %>" 
               data-item-id="<%= item.product._id %>" 
               data-current-quantity="<%= item.quantity %>" 
               onchange="handleQuantityChange(this)" 
               style="width: 48px; height: 36px; text-align: center; border-radius: 8px; border: 1px solid #eee;"
               <%= isOutOfStock ? 'disabled' : '' %>>

        <button class="quantity-btn" 
                onclick="updateQuantity('<%= item.product._id %>', 1)" 
                style="width: 36px; height: 36px; border-radius: 8px; border: 1px solid #eee; background: #fafafa; font-size: 20px;"
                <%= isOutOfStock ? 'disabled' : '' %>>+</button>
      </div>
      <button class="remove-item" 
              onclick="removeItem('<%= item.product._id %>', '<%= item.size %>')" 
              style="margin-left: 24px; background: none; border: none; cursor: pointer; color: #e74c3c; font-size: 22px;">
        <span title="Remove">&#128465;</span>
      </button>
    </div>
  <% } %>
<% }) %>

      </div>
      <div style="flex: 1; position: sticky; top: 40px; align-self: flex-start;">
        <div style="background: #fff; border-radius: 16px; box-shadow: 0 2px 8px rgba(0,0,0,0.04); padding: 32px 28px; border: 1px solid #eee; min-width: 320px;">
          <div style="font-size: 20px; font-weight: 700; margin-bottom: 28px;">Order Summary</div>
          <div style="display: flex; justify-content: space-between; margin-bottom: 16px; color: #222; font-size: 16px;">
            <span>Subtotal</span>
            <span>₹<%= cart.subtotal.toFixed(2) %></span>
          </div>
          <div style="display: flex; justify-content: space-between; margin-bottom: 16px; color: #222; font-size: 16px;">
            <span>Delivery Fee</span>
            <span style="color: #2ecc71; font-weight: 600;">Free</span>
          </div>
          <div id="couponDiscount" class="coupon-discount <%= (cart.couponCode && cart.couponDiscount > 0) ? '' : 'hidden' %>">
            <span>Coupon Discount</span>
            <span style="color: #2ecc71; font-weight: 600;">-₹<span id="discountAmount"><%= cart.couponDiscount ? cart.couponDiscount.toFixed(2) : '0.00' %></span></span>
          </div>
          <div style="display: flex; justify-content: space-between; align-items: center; font-size: 20px; font-weight: 700; margin: 24px 0 28px;">
            <span>Total</span>
            <span>₹<%= (cart.finalAmount !== undefined ? cart.finalAmount : cart.subtotal).toFixed(2) %></span>
          </div>
          <div id="appliedCoupon" class="applied-coupon <%= (cart.couponCode && cart.couponDiscount > 0) ? '' : 'hidden' %>">
            <div style="display: flex; justify-content: space-between; align-items: center;">
              <div>
                <div style="font-weight: 600; color: #155724;" id="appliedCouponCode"><%= cart.couponCode || '' %></div>
                <div style="font-size: 13px; color: #2ecc71;" id="couponDescription">
                  <%= cart.coupon && cart.coupon.type === 'Percentage' ? cart.coupon.value + '% OFF' : '₹' + (cart.couponDiscount || 0) + ' OFF' %>
                </div>
              </div>
              <button onclick="removeCoupon()" 
                      style="background: none; border: none; color: #dc3545; cursor: pointer; font-size: 14px;">
                Remove
              </button>
            </div>
          </div>
          <% if (cart && cart.items && cart.items.length > 0) { %>
            <button class="checkout-btn" onclick="proceedToCheckout()" style="width: 100%; padding: 16px; background: #000; color: #fff; border: none; border-radius: 8px; font-size: 17px; font-weight: 700; margin-top: 10px; display: flex; align-items: center; justify-content: center; gap: 8px;">Go to Checkout <span style="font-size: 20px;">→</span></button>
          <% } else { %>
            <div style="text-align: center; padding: 20px; background: #f8f8f8; border-radius: 8px; margin-top: 10px;">
              <p style="color: #666; margin-bottom: 15px;">Your cart is empty. Add items to proceed to checkout.</p>
              <a href="/products" style="display: inline-block; padding: 12px 24px; background: #000; color: #fff; text-decoration: none; border-radius: 8px; font-weight: 600;">Continue Shopping</a>
            </div>
          <% } %>
        </div>
      </div>
    <% } %>
  </div>

  <!-- <footer class="footer">
    <div class="footer-main">
      <div class="footer-about">
        <h3>MotionHaus</h3>
        <p>Your one-stop destination for premium sneakers and streetwear.</p>
        <div class="social-icons">
          <a href="#">Instagram</a>
          <a href="#">Facebook</a>
          <a href="#">Twitter</a>
        </div>
      </div>
    </div>
  </footer> -->

  <script>
    function handleQuantityChange(input) {
      const itemId = input.getAttribute('data-item-id');
      const currentQuantity = parseInt(input.getAttribute('data-current-quantity'));
      const newValue = parseInt(input.value);
      const maxStock = parseInt(input.getAttribute('max'));
      const maxLimit = 3; // Maximum limit per product
      
      if (newValue > maxLimit) {
        Swal.fire({
          title: 'Maximum Limit Reached',
          text: `You can only add up to ${maxLimit} items of this product`,
          icon: 'warning',
          confirmButtonColor: '#000'
        });
        input.value = maxLimit;
        return;
      }
      
      if (newValue > maxStock) {
        Swal.fire({
          title: 'Stock Limit Reached',
          text: `Only ${maxStock} items available in stock`,
          icon: 'warning',
          confirmButtonColor: '#000'
        });
        input.value = maxStock;
        return;
      }
      
      const change = newValue - currentQuantity;
      updateQuantity(itemId, change);
    }

    function updateQuantity(itemId, change) {
      const input = event.target.parentElement.querySelector('.quantity-input');
      const currentValue = parseInt(input.value);
      const maxStock = parseInt(input.getAttribute('max'));
      const maxLimit = 3; // Maximum limit per product
      const newValue = Math.max(1, Math.min(Math.min(maxStock, maxLimit), currentValue + change));
      
      if (newValue !== currentValue) {
        fetch(`/cart/update/${itemId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ quantity: newValue })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            input.value = newValue;
            updateCartSummary(data.cart);

            // Notify user if coupon was removed
            if (data.couponMessage) {
              Swal.fire({
                title: 'Coupon Removed',
                text: data.couponMessage,
                icon: 'info',
                confirmButtonColor: '#000'
              });
            }

            // Update stock status display
            const stockStatus = input.closest('.cart-item').querySelector('.stock-status');
            if (stockStatus) {
              const stockAvailable = parseInt(input.getAttribute('max'));
              const isOutOfStock = stockAvailable < newValue;
              stockStatus.className = isOutOfStock ? 'out-of-stock' : 'in-stock';
            }
          } else {
            Swal.fire({
              title: 'Error!',
              text: data.message || 'Failed to update quantity',
              icon: 'error',
              confirmButtonColor: '#000'
            });
          }
        })
        .catch(error => {
          console.error('Error:', error);
          Swal.fire({
            title: 'Error!',
            text: 'Failed to update quantity',
            icon: 'error',
            confirmButtonColor: '#000'
          });
        });
      }
    }

    function removeItem(itemId, size) {
      Swal.fire({
        title: 'Remove Item',
        text: 'Are you sure you want to remove this item from your cart?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#000',
        cancelButtonColor: '#666',
        confirmButtonText: 'Yes, remove it',
        cancelButtonText: 'No, keep it'
      }).then((result) => {
        if (result.isConfirmed) {
          fetch(`/cart/remove/${itemId}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ size: size })
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              const item = document.querySelector(`.cart-item[data-id="${itemId}"][data-size="${size}"]`);
              if (item) {
                item.remove();
                if (data.cart.items.length === 0) {
                  location.reload();
                } else {
                  updateCartSummary(data.cart);
                  // Notify user if coupon was removed
                  if (data.couponMessage) {
                    Swal.fire({
                      title: 'Coupon Removed',
                      text: data.couponMessage,
                      icon: 'info',
                      confirmButtonColor: '#000'
                    });
                  }
                }
              }
              Swal.fire({
                title: 'Removed!',
                text: 'Item has been removed from your cart.',
                icon: 'success',
                confirmButtonColor: '#000'
              });
            } else {
              Swal.fire({
                title: 'Error!',
                text: data.message || 'Failed to remove item',
                icon: 'error',
                confirmButtonColor: '#000'
              });
            }
          })
          .catch(error => {
            console.error('Error:', error);
            Swal.fire({
              title: 'Error!',
              text: 'Failed to remove item',
              icon: 'error',
              confirmButtonColor: '#000'
            });
          });
        }
      });
    }

    let appliedCoupon = null;

    async function removeCoupon() {
        try {
            const response = await fetch('/cart/remove-coupon', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            const data = await response.json();

            if (data.success) {
                appliedCoupon = null;
                
                // Hide coupon sections
                document.getElementById('couponDiscount').classList.add('hidden');
                document.getElementById('appliedCoupon').classList.add('hidden');
                
                // Update cart summary
                updateCartSummary(data.cart);

                Swal.fire({
                    title: 'Success!',
                    text: 'Coupon removed successfully',
                    icon: 'success',
                    confirmButtonColor: '#000'
                });
            } else {
                Swal.fire({
                    title: 'Error!',
                    text: data.message || 'Failed to remove coupon',
                    icon: 'error',
                    confirmButtonColor: '#000'
                });
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                title: 'Error!',
                text: 'Failed to remove coupon',
                icon: 'error',
                confirmButtonColor: '#000'
            });
        }
    }

    function updateCartSummary(cart) {
        console.log('Cart data received for summary update:', cart);

        const subtotalElement = document.querySelector('div[style*="justify-content: space-between; margin-bottom: 16px;"] span:last-child');
        const totalElement = document.querySelector('div[style*="font-size: 20px; font-weight: 700;"] span:last-child');
        const couponDiscountEl = document.getElementById('couponDiscount');
        const discountAmountEl = document.getElementById('discountAmount');
        const appliedCouponDiv = document.getElementById('appliedCoupon');
        const appliedCouponCodeEl = document.getElementById('appliedCouponCode');
        const couponDescriptionEl = document.getElementById('couponDescription');

        if (subtotalElement && totalElement && couponDiscountEl) {
            subtotalElement.textContent = `₹${(cart.subtotal || 0).toFixed(2)}`;
            totalElement.textContent = `₹${(cart.finalAmount || 0).toFixed(2)}`;

            if (cart.couponCode && cart.couponDiscount > 0) {
                couponDiscountEl.classList.remove('hidden');
                discountAmountEl.textContent = (cart.couponDiscount || 0).toFixed(2);
                appliedCouponDiv.classList.remove('hidden');
                appliedCouponCodeEl.textContent = cart.couponCode;

                if (couponDescriptionEl) {
                    if (cart.coupon && cart.coupon.type === 'Percentage') {
                        couponDescriptionEl.textContent = `${cart.coupon.value}% OFF`;
                    } else {
                        couponDescriptionEl.textContent = `₹${(cart.couponDiscount || 0)} OFF`;
                    }
                }
            } else {
                couponDiscountEl.classList.add('hidden');
                appliedCouponDiv.classList.add('hidden');
            }
        } else {
            console.error('Could not find all required cart summary elements to update');
        }
    }

    function proceedToCheckout() {
      // Check if cart is empty
      const cartItems = document.querySelectorAll('.cart-item');
      if (cartItems.length === 0) {
        Swal.fire({
          title: 'Empty Cart',
          text: 'Your cart is empty. Please add items before proceeding to checkout.',
          icon: 'warning',
          confirmButtonColor: '#000'
        });
        return;
      }

      // Check for out of stock items
      const outOfStockItems = Array.from(cartItems).filter(item => {
        const stockStatus = item.querySelector('.stock-status');
        return stockStatus && stockStatus.classList.contains('out-of-stock');
      });

      if (outOfStockItems.length > 0) {
        Swal.fire({
          title: 'Out of Stock Items',
          text: 'Some items in your cart are out of stock. Please remove them or reduce quantity before proceeding to checkout.',
          icon: 'warning',
          confirmButtonColor: '#000'
        });
        return;
      }

      window.location.href = '/checkout';
    }
  </script>
</body>
</html> 