<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>User Profile</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
  <style>
    :root {
      --primary-purple: #090909f5;
      --sidebar-width: 250px;
      --accent-color: #ff7675;
      --text-primary: #ffffff;
      --text-secondary: rgba(255, 255, 255, 0.8);
      --bg-dark: #131314;
      --bg-card: rgba(255, 255, 255, 0.1);
      --border-color: rgba(255, 255, 255, 0.2);
    }

    body {
      margin: 0;
      font-family: 'Inter', sans-serif;
      background-color: var(--bg-dark);
      color: var(--text-primary);
    }

    .layout {
      display: flex;
      min-height: 100vh;
    }

    .sidebar {
      width: var(--sidebar-width);
      background: var(--primary-purple);
      padding: 2rem 1.5rem;
      color: var(--text-primary);
      position: fixed;
      height: 100vh;
      left: 0;
      top: 0;
      z-index: 10;
      border-right: 1px solid var(--border-color);
      backdrop-filter: blur(10px);
    }

    .sidebar-logo {
      font-size: 1.5rem;
      font-weight: bold;
      margin-bottom: 3rem;
      color: var(--text-primary);
      text-decoration: none;
      display: block;
      transition: transform 0.3s ease;
    }

    .sidebar-logo:hover {
      transform: scale(1.05);
    }

    .nav-link {
      color: var(--text-secondary);
      padding: 0.75rem 1rem;
      display: flex;
      align-items: center;
      gap: 1rem;
      text-decoration: none;
      transition: all 0.3s ease;
      border-radius: 12px;
      margin-bottom: 0.5rem;
    }

    .nav-link:hover,
    .nav-link.active {
      color: var(--text-primary);
      background: var(--bg-card);
      transform: translateX(5px);
    }

    .nav-link i {
      font-size: 1.2rem;
      transition: transform 0.3s ease;
    }

    .nav-link:hover i {
      transform: scale(1.1);
    }

    .main-content {
      margin-left: var(--sidebar-width);
      flex-grow: 1;
      padding: 2rem;
      background-color: var(--bg-dark);
    }

    .content-wrapper {
      background-image: url("/image/2b185786626367.5d9f30e3d6e07.png");
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
      border-radius: 30px;
      padding: 3rem;
      min-height: calc(100vh - 4rem);
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
      overflow-y: auto;
      position: relative;
    }

    .content-wrapper::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(45deg, rgba(0,0,0,0.7), rgba(0,0,0,0.3));
      border-radius: 30px;
      z-index: 1;
    }

    .content-header {
      color: var(--text-primary);
      margin-bottom: 4rem;
      text-align: center;
      position: relative;
      z-index: 2;
    }

    .content-header h1 {
      font-size: 4rem;
      font-weight: 700;
      margin-bottom: 1rem;
      background: linear-gradient(45deg, var(--text-primary), var(--accent-color));
      background-clip: text;
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      animation: gradientFlow 8s ease infinite;
    }

    @keyframes gradientFlow {
      0% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
      100% { background-position: 0% 50%; }
    }

    .content-header p {
      font-size: 1.2rem;
      opacity: 0.9;
      max-width: 600px;
      margin: 0 auto;
    }

    .profile-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 2rem;
      position: relative;
      z-index: 2;
    }

    .profile-card {
      background: var(--bg-card);
      backdrop-filter: blur(10px);
      border-radius: 20px;
      padding: 2rem;
      border: 1px solid var(--border-color);
      transition: all 0.3s ease;
    }

    .profile-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
    }

    .profile-card-header {
      display: flex;
      align-items: center;
      gap: 1rem;
      margin-bottom: 1.5rem;
    }

    .profile-card-header i {
      font-size: 2rem;
      color: var(--accent-color);
    }

    .profile-card-header h3 {
      margin: 0;
      font-size: 1.5rem;
      font-weight: 600;
    }

    .profile-info {
      margin-bottom: 1rem;
    }

    .info-label {
      color: var(--text-secondary);
      font-size: 0.9rem;
      margin-bottom: 0.25rem;
    }

    .info-value {
      color: var(--text-primary);
      font-size: 1.1rem;
      font-weight: 500;
    }

    .profile-stats {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 1rem;
      margin-top: 2rem;
    }

    .stat-item {
      text-align: center;
      padding: 1rem;
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      transition: all 0.3s ease;
    }

    .stat-item:hover {
      background: rgba(255, 255, 255, 0.1);
      transform: scale(1.05);
    }

    .stat-value {
      font-size: 1.5rem;
      font-weight: 600;
      color: var(--accent-color);
      margin-bottom: 0.5rem;
    }

    .stat-label {
      font-size: 0.9rem;
      color: var(--text-secondary);
    }

    .btn-primary {
      background-color: var(--accent-color);
      border-color: var(--accent-color);
      padding: 0.75rem 1.5rem;
      border-radius: 12px;
      font-weight: 500;
      transition: all 0.3s ease;
    }

    .btn-primary:hover {
      background-color: #e66767;
      border-color: #e66767;
      transform: translateY(-2px);
    }

    .form-control {
      background-color: rgba(255, 255, 255, 0.1);
      border: 1px solid var(--border-color);
      color: var(--text-primary);
      border-radius: 12px;
      padding: 0.75rem 1rem;
    }

    .form-control:focus {
      background-color: rgba(255, 255, 255, 0.15);
      border-color: var(--accent-color);
      color: var(--text-primary);
      box-shadow: 0 0 0 0.25rem rgba(255, 118, 117, 0.25);
    }

    .form-control::placeholder {
      color: var(--text-secondary);
    }

    .alert {
      background-color: var(--bg-card);
      border: 1px solid var(--border-color);
      color: var(--text-primary);
      border-radius: 12px;
      padding: 1rem;
      margin-bottom: 2rem;
    }

    .alert-success {
      border-left: 4px solid #00b894;
    }

    .alert-danger {
      border-left: 4px solid var(--accent-color);
    }

    /* Custom scrollbar */
    ::-webkit-scrollbar {
      width: 8px;
    }

    ::-webkit-scrollbar-track {
      background: rgba(255, 255, 255, 0.1);
      border-radius: 4px;
    }

    ::-webkit-scrollbar-thumb {
      background: rgba(255, 255, 255, 0.3);
      border-radius: 4px;
    }

    ::-webkit-scrollbar-thumb:hover {
      background: rgba(255, 255, 255, 0.4);
    }

    .password-strength {
      height: 5px;
      margin-top: 5px;
      border-radius: 3px;
      transition: all 0.3s ease;
    }
    .strength-weak {
      background: #ff4444;
      width: 30%;
    }
    .strength-medium {
      background: #ffbb33;
      width: 60%;
    }
    .strength-strong {
      background: #00C851;
      width: 100%;
    }

    /* Password visibility toggle button styles */
    .password-toggle-btn {
      border: 1px solid #ddd;
      background: transparent;
      color: #666;
      padding: 0.375rem 0.75rem;
      transition: all 0.3s ease;
    }
    
    .password-toggle-btn:hover {
      background: rgba(255, 255, 255, 0.1);
      color: #fff;
    }

    .password-toggle-btn:focus {
      outline: none;
      box-shadow: none;
    }

    .input-group-text {
      background: transparent;
      border-color: #ddd;
    }

    /* Make password fields consistent width */
    .password-input-group {
      width: 100%;
    }
  </style>
</head>
<body>
  <div class="layout">
    <!-- Include the common sidebar -->
    <%- include('../partials/user-profile-sidebar', { currentPage: 'profile' }) %>

    <!-- Main Content -->
    <main class="main-content">
      <div class="content-wrapper">
        <div class="content-header">
          <h1>Welcome Back, <%= user.username %></h1>
          <p>Manage your profile, view orders, and customize your preferences</p>
        </div>

        <div class="profile-grid">
          <!-- Profile Information Card -->
          <div class="profile-card">
            <div class="profile-card-header">
              <i class="bi bi-person-circle"></i>
              <h3>Profile Information</h3>
              <button class="btn btn-outline-light ms-auto edit-profile-btn">
                <i class="bi bi-pencil"></i> Edit
              </button>
            </div>
            
            <!-- Profile Display View -->
            <div id="profileDisplay">
              <div class="profile-info">
                <div class="info-label">Username</div>
                <div class="info-value username-value"><%= user.username %></div>
              </div>
              <div class="profile-info">
                <div class="info-label">Email</div>
                <div class="info-value email-value"><%= user.email %></div>
              </div>
              <div class="profile-info">
                <div class="info-label">Phone</div>
                <div class="info-value phone-value"><%= user.phone || 'Not provided' %></div>
              </div>
            </div>

            <!-- Profile Edit Form -->
            <div id="profileEditForm" style="display: none;">
              <form id="updateProfileForm" class="mt-3">
                <div class="mb-3">
                  <label for="username" class="form-label">Username</label>
                  <input type="text" class="form-control" id="username" name="username" value="<%= user.username %>" required>
                </div>
                <div class="mb-3">
                  <label for="email" class="form-label">Email</label>
                  <input type="email" class="form-control" id="email" name="email" value="<%= user.email %>" required>
                </div>
                <div class="mb-3">
                  <label for="phone" class="form-label">Phone</label>
                  <input type="tel" class="form-control" id="phone" name="phone" value="<%= user.phone || '' %>" 
                         pattern="^[0-9]{10,15}$" title="Phone number should be between 10 to 15 digits"
                         oninput="this.value = this.value.replace(/[^0-9]/g, '');">
                </div>
                <div class="d-flex gap-2">
                  <button type="submit" class="btn btn-primary">Save Changes</button>
                  <button type="button" class="btn btn-outline-light" id="cancelEdit">Cancel</button>
                </div>
              </form>
            </div>

            <div class="profile-stats">
              <div class="stat-item">
                <div class="stat-value">12</div>
                <div class="stat-label">Orders</div>
              </div>
              <div class="stat-item">
                <div class="stat-value">3</div>
                <div class="stat-label">Addresses</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </main>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
  document.addEventListener('DOMContentLoaded', function() {
    const editBtn = document.querySelector('.edit-profile-btn');
    const profileDisplay = document.getElementById('profileDisplay');
    const profileEditForm = document.getElementById('profileEditForm');
    const cancelEditBtn = document.getElementById('cancelEdit');
    const updateProfileForm = document.getElementById('updateProfileForm');

    // Show edit form
    editBtn.addEventListener('click', function() {
      profileDisplay.style.display = 'none';
      profileEditForm.style.display = 'block';
      editBtn.style.display = 'none';
    });

    // Cancel edit
    cancelEditBtn.addEventListener('click', function() {
      profileDisplay.style.display = 'block';
      profileEditForm.style.display = 'none';
      editBtn.style.display = 'block';
      updateProfileForm.reset();
    });

    // Handle form submission
    updateProfileForm.addEventListener('submit', async function(e) {
      e.preventDefault();

      try {
        const formData = new FormData(this);
        const jsonData = {};
        formData.forEach((value, key) => {
          jsonData[key] = value;
        });

        const response = await fetch('/profile/update', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify(jsonData),
          credentials: 'same-origin'
        });

        if (!response.ok) {
          const contentType = response.headers.get('content-type');
          if (contentType && contentType.includes('application/json')) {
            const errorData = await response.json();
            throw new Error(errorData.message || 'Failed to update profile');
          } else {
            throw new Error('Server error occurred. Please try again.');
          }
        }

        const data = await response.json();
        
        // Show success message
        const successAlert = document.createElement('div');
        successAlert.className = 'alert alert-success';
        successAlert.textContent = data.message || 'Profile updated successfully!';
        updateProfileForm.insertAdjacentElement('beforebegin', successAlert);

        // Update the displayed profile information using specific selectors
        const usernameDisplay = document.querySelector('#profileDisplay .username-value');
        const emailDisplay = document.querySelector('#profileDisplay .email-value');
        const phoneDisplay = document.querySelector('#profileDisplay .phone-value');

        if (usernameDisplay) usernameDisplay.textContent = jsonData.username;
        if (emailDisplay) emailDisplay.textContent = jsonData.email;
        if (phoneDisplay) phoneDisplay.textContent = jsonData.phone || 'Not provided';

        // Update the header username if it exists
        const headerUsername = document.querySelector('.content-header h1');
        if (headerUsername) {
          headerUsername.textContent = `Welcome Back, ${jsonData.username}`;
        }

        // Hide the form and show the display view
        profileDisplay.style.display = 'block';
        profileEditForm.style.display = 'none';
        editBtn.style.display = 'block';

        // Remove any existing error messages
        const existingErrors = updateProfileForm.querySelectorAll('.alert-danger');
        existingErrors.forEach(error => error.remove());

        // Remove success message after delay
        setTimeout(() => {
          successAlert.remove();
        }, 3000);

      } catch (error) {
        console.error('Update failed:', error);
        // Remove any existing error messages
        const existingErrors = updateProfileForm.querySelectorAll('.alert-danger');
        existingErrors.forEach(error => error.remove());
        
        // Show error message
        const errorAlert = document.createElement('div');
        errorAlert.className = 'alert alert-danger';
        errorAlert.textContent = error.message || 'Failed to update profile. Please try again.';
        updateProfileForm.insertAdjacentElement('beforebegin', errorAlert);
      }
    });
  });
  </script>
</body>
</html>
