<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>User Profile - MotionHaus</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
  <style>
    :root {
      --primary-purple: #090909f5;
      --sidebar-width: 250px;
      --accent-color: #ff7675;
      --text-primary: #ffffff;
      --text-secondary: rgba(255, 255, 255, 0.8);
      --bg-dark: #131314;
      --bg-card: rgba(255, 255, 255, 0.1);
      --border-color: rgba(255, 255, 255, 0.2);
    }

    body {
      margin: 0;
      font-family: 'Inter', sans-serif;
      background-color: var(--bg-dark);
      color: var(--text-primary);
      padding-top: 60px; /* Add padding for fixed navbar */
    }

    .layout {
      display: flex;
      min-height: calc(100vh - 60px); /* Adjust for navbar height */
    }

    .sidebar {
      width: var(--sidebar-width);
      background: var(--primary-purple);
      padding: 2rem 1.5rem;
      color: var(--text-primary);
      position: fixed;
      height: calc(100vh - 60px); /* Adjust for navbar height */
      left: 0;
      top: 60px; /* Position below navbar */
      z-index: 10;
      border-right: 1px solid var(--border-color);
      backdrop-filter: blur(10px);
    }

    .sidebar-logo {
      font-size: 1.5rem;
      font-weight: bold;
      margin-bottom: 3rem;
      color: var(--text-primary);
      text-decoration: none;
      display: block;
      transition: transform 0.3s ease;
    }

    .sidebar-logo:hover {
      transform: scale(1.05);
    }

    .nav-link {
      color: var(--text-secondary);
      padding: 0.75rem 1rem;
      display: flex;
      align-items: center;
      gap: 1rem;
      text-decoration: none;
      transition: all 0.3s ease;
      border-radius: 12px;
      margin-bottom: 0.5rem;
    }

    .nav-link:hover,
    .nav-link.active {
      color: var(--text-primary);
      background: var(--bg-card);
      transform: translateX(5px);
    }

    .nav-link i {
      font-size: 1.2rem;
      transition: transform 0.3s ease;
    }

    .nav-link:hover i {
      transform: scale(1.1);
    }

    .main-content {
      margin-left: var(--sidebar-width);
      flex-grow: 1;
      padding: 2rem;
      background-color: var(--bg-dark);
    }

    .content-wrapper {
      background-image: url("/image/2b185786626367.5d9f30e3d6e07.png");
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
      border-radius: 30px;
      padding: 3rem;
      min-height: calc(100vh - 4rem);
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
      overflow-y: auto;
      position: relative;
    }

    .content-wrapper::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(45deg, rgba(0,0,0,0.7), rgba(0,0,0,0.3));
      border-radius: 30px;
      z-index: 1;
    }

    .content-header {
      color: var(--text-primary);
      margin-bottom: 4rem;
      text-align: center;
      position: relative;
      z-index: 2;
    }

    .content-header h1 {
      font-size: 4rem;
      font-weight: 700;
      margin-bottom: 1rem;
      background: linear-gradient(45deg, var(--text-primary), var(--accent-color));
      background-clip: text;
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      animation: gradientFlow 8s ease infinite;
    }

    @keyframes gradientFlow {
      0% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
      100% { background-position: 0% 50%; }
    }

    .content-header p {
      font-size: 1.2rem;
      opacity: 0.9;
      max-width: 600px;
      margin: 0 auto;
    }

    .profile-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 2rem;
      position: relative;
      z-index: 2;
    }

    .profile-card {
      background: var(--bg-card);
      backdrop-filter: blur(10px);
      border-radius: 20px;
      padding: 2rem;
      border: 1px solid var(--border-color);
      transition: all 0.3s ease;
    }

    .profile-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
    }

    .profile-card-header {
      display: flex;
      align-items: center;
      gap: 1rem;
      margin-bottom: 1.5rem;
      position: relative;
    }

    .profile-card-header i {
      font-size: 2rem;
      color: var(--accent-color);
    }

    .profile-card-header h3 {
      margin: 0;
      font-size: 1.5rem;
      font-weight: 600;
    }

    .edit-profile-btn {
      margin-left: auto;
      padding: 0.5rem 1rem;
      border-radius: 8px;
      transition: all 0.3s ease;
      border: 1px solid var(--border-color);
      background: transparent;
      color: var(--text-primary);
    }

    .edit-profile-btn:hover {
      background: rgba(255, 255, 255, 0.1);
      transform: translateY(-2px);
    }

    .edit-profile-btn i {
      margin-right: 0.5rem;
    }

    #profileDisplay {
      margin-top: 1.5rem;
    }

    .profile-info {
      margin-bottom: 1.5rem;
    }

    .info-label {
      color: var(--text-secondary);
      font-size: 0.9rem;
      margin-bottom: 0.25rem;
    }

    .info-value {
      color: var(--text-primary);
      font-size: 1.1rem;
      font-weight: 500;
    }

    .profile-stats {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 1rem;
      margin-top: 2rem;
    }

    .stat-item {
      text-align: center;
      padding: 1rem;
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      transition: all 0.3s ease;
    }

    .stat-item:hover {
      background: rgba(255, 255, 255, 0.1);
      transform: scale(1.05);
    }

    .stat-value {
      font-size: 1.5rem;
      font-weight: 600;
      color: var(--accent-color);
      margin-bottom: 0.5rem;
    }

    .stat-label {
      font-size: 0.9rem;
      color: var(--text-secondary);
    }

    .btn-primary {
      background-color: var(--accent-color);
      border-color: var(--accent-color);
      padding: 0.75rem 1.5rem;
      border-radius: 12px;
      font-weight: 500;
      transition: all 0.3s ease;
    }

    .btn-primary:hover {
      background-color: #e66767;
      border-color: #e66767;
      transform: translateY(-2px);
    }

    .form-control {
      background-color: rgba(255, 255, 255, 0.1);
      border: 1px solid var(--border-color);
      color: var(--text-primary);
      border-radius: 12px;
      padding: 0.75rem 1rem;
    }

    .form-control:focus {
      background-color: rgba(255, 255, 255, 0.15);
      border-color: var(--accent-color);
      color: var(--text-primary);
      box-shadow: 0 0 0 0.25rem rgba(255, 118, 117, 0.25);
    }

    .form-control::placeholder {
      color: var(--text-secondary);
    }

    .alert {
      background-color: var(--bg-card);
      border: 1px solid var(--border-color);
      color: var(--text-primary);
      border-radius: 12px;
      padding: 1rem;
      margin-bottom: 2rem;
    }

    .alert-success {
      border-left: 4px solid #00b894;
    }

    .alert-danger {
      border-left: 4px solid var(--accent-color);
    }

    /* Custom scrollbar */
    ::-webkit-scrollbar {
      width: 8px;
    }

    ::-webkit-scrollbar-track {
      background: rgba(255, 255, 255, 0.1);
      border-radius: 4px;
    }

    ::-webkit-scrollbar-thumb {
      background: rgba(255, 255, 255, 0.3);
      border-radius: 4px;
    }

    ::-webkit-scrollbar-thumb:hover {
      background: rgba(255, 255, 255, 0.4);
    }

    .password-strength {
      height: 5px;
      margin-top: 5px;
      border-radius: 3px;
      transition: all 0.3s ease;
    }
    .strength-weak {
      background: #ff4444;
      width: 30%;
    }
    .strength-medium {
      background: #ffbb33;
      width: 60%;
    }
    .strength-strong {
      background: #00C851;
      width: 100%;
    }

    /* Password visibility toggle button styles */
    .password-toggle-btn {
      border: 1px solid #ddd;
      background: transparent;
      color: #666;
      padding: 0.375rem 0.75rem;
      transition: all 0.3s ease;
    }
    
    .password-toggle-btn:hover {
      background: rgba(255, 255, 255, 0.1);
      color: #fff;
    }

    .password-toggle-btn:focus {
      outline: none;
      box-shadow: none;
    }

    .input-group-text {
      background: transparent;
      border-color: #ddd;
    }

    /* Make password fields consistent width */
    .password-input-group {
      width: 100%;
    }

    /* Modal styles */
    .modal {
      z-index: 1050;
    }
    
    .modal-content {
      background-color: var(--bg-dark);
      color: var(--text-primary);
      position: relative;
    }

    .modal-dialog {
      pointer-events: auto;
    }

    .otp-input {
      background-color: rgba(255, 255, 255, 0.1);
      border: 1px solid var(--border-color);
      color: var(--text-primary);
      font-size: 1.2rem;
      font-weight: 500;
      cursor: text;
      z-index: 1060;
    }

    .otp-input:focus {
      background-color: rgba(255, 255, 255, 0.15);
      border-color: var(--accent-color);
      box-shadow: 0 0 0 0.2rem rgba(255, 118, 117, 0.25);
      color: var(--text-primary);
    }

    #otpModal {
      background-color: rgba(0, 0, 0, 0.5);
    }

    .modal-backdrop {
      z-index: 1040;
    }
  </style>
</head>
<body>
  <%- include('../partials/navbar') %>
  <div class="layout">
    <!-- Include the common sidebar -->
    <%- include('../partials/user-profile-sidebar', { currentPage: 'profile' }) %>

    <!-- Main Content -->
    <main class="main-content">
      <div class="content-wrapper">
        <div class="content-header">
          <h1>Welcome Back, <%= user.username %></h1>
          <p>Manage your profile, view orders, and customize your preferences</p>
        </div>

        <div class="profile-grid">
          <!-- Profile Information Card -->
          <div class="profile-card">
            <div class="profile-card-header">
              <i class="bi bi-person-circle"></i>
              <h3>Profile Information</h3>
              <button type="button" class="btn btn-outline-light ms-auto edit-profile-btn">
                <i class="bi bi-pencil"></i> Edit
              </button>
            </div>
            
            <!-- Profile Display View -->
            <div id="profileDisplay">
              <div class="profile-info">
                <div class="info-label">Username</div>
                <div class="info-value username-value"><%= user.username %></div>
              </div>
              <div class="profile-info">
                <div class="info-label">Email</div>
                <div class="info-value email-value"><%= user.email %></div>
              </div>
              <div class="profile-info">
                <div class="info-label">Phone</div>
                <div class="info-value phone-value"><%= user.phone || 'Not provided' %></div>
              </div>
            </div>

            <!-- Profile Edit Form -->
            <div id="profileEditForm" style="display: none;">
              <form id="updateProfileForm" class="mt-3">
                <div class="mb-3">
                  <label for="username" class="form-label">Username</label>
                  <input type="text" class="form-control" id="username" name="username" value="<%= user.username %>" required>
                </div>
                <div class="mb-3">
                  <label for="email" class="form-label">Email</label>
                  <input type="email" 
                         class="form-control" 
                         id="email" 
                         name="email" 
                         value="<%= user.email %>" 
                         pattern="[a-zA-Z0-9._%+\-]+@[a-zA-Z0-9.\-]+\.[a-zA-Z]{2,}"
                         oninput="validateEmail(this)"
                         required>
                  <div class="invalid-feedback">
                    Please enter a valid email address
                  </div>
                  <input type="hidden" id="originalEmail" value="<%= user.email %>">
                </div>
                <div class="mb-3">
                  <label for="phone" class="form-label">Phone</label>
                  <input type="tel" class="form-control" id="phone" name="phone" value="<%= user.phone || '' %>" 
                         pattern="^[0-9]{10,15}$" title="Phone number should be between 10 to 15 digits"
                         oninput="this.value = this.value.replace(/[^0-9]/g, '');">
                </div>
                <div class="d-flex gap-2">
                  <button type="submit" class="btn btn-primary" id="saveChangesBtn">Save Changes</button>
                  <button type="button" class="btn btn-outline-light" id="cancelEdit">Cancel</button>
                </div>
              </form>
            </div>

            <!-- OTP Verification Modal -->
            <div class="modal fade" id="otpModal" tabindex="-1" aria-labelledby="otpModalLabel" aria-hidden="true">
              <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content bg-dark text-white">
                  <div class="modal-header border-bottom border-secondary">
                    <h5 class="modal-title" id="otpModalLabel">Email Verification</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body">
                    <div id="modalAlertPlaceholder"></div>
                    <p>We've sent a verification code to your new email address. Please enter it below to confirm the change.</p>
                    <div class="mb-3">
                      <label class="form-label">Verification Code</label>
                      <div class="d-flex justify-content-between gap-2 mb-3">
                        <input type="text" class="form-control text-center otp-input" maxlength="1" style="width: 50px;" inputmode="numeric">
                        <input type="text" class="form-control text-center otp-input" maxlength="1" style="width: 50px;" inputmode="numeric">
                        <input type="text" class="form-control text-center otp-input" maxlength="1" style="width: 50px;" inputmode="numeric">
                        <input type="text" class="form-control text-center otp-input" maxlength="1" style="width: 50px;" inputmode="numeric">
                        <input type="text" class="form-control text-center otp-input" maxlength="1" style="width: 50px;" inputmode="numeric">
                        <input type="text" class="form-control text-center otp-input" maxlength="1" style="width: 50px;" inputmode="numeric">
                      </div>
                      <div class="mt-2 d-flex align-items-center justify-content-between">
                        <span id="otpTimer" class="text-muted"></span>
                        <button type="button" id="resendOtp" class="btn btn-link text-info" style="display: none;">Resend Code</button>
                      </div>
                    </div>
                  </div>
                  <div class="modal-footer border-top border-secondary">
                    <button type="button" class="btn btn-secondary" id="cancelOtpBtn">Cancel</button>
                    <button type="button" class="btn btn-primary" id="verifyOtpBtn">Verify</button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Referral Section -->
        <div class="referral-section mt-5">
          <div class="referral-header mb-4" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 15px; padding: 2rem; text-align: center; box-shadow: 0 10px 30px rgba(0,0,0,0.3);">
            <h3 class="mb-2" style="color: white; font-weight: bold; font-size: 2rem;">
              <i class="bi bi-gift-fill me-3"></i>Earn Money with Referrals!
            </h3>
            <p class="mb-0" style="color: rgba(255,255,255,0.9); font-size: 1.1rem;">
              Share your code and earn ₹50-₹500 for every friend who joins!
            </p>
          </div>
          
          <div class="row">
            <div class="col-md-6">
              <div class="referral-card" style="background: linear-gradient(145deg, #667eea 0%, #764ba2 100%); border-radius: 15px; padding: 2rem; border: none; box-shadow: 0 8px 25px rgba(0,0,0,0.2); position: relative; overflow: hidden;">
                <div style="position: absolute; top: -50px; right: -50px; width: 100px; height: 100px; background: rgba(255,255,255,0.1); border-radius: 50%;"></div>
                <div style="position: absolute; bottom: -30px; left: -30px; width: 60px; height: 60px; background: rgba(255,255,255,0.1); border-radius: 50%;"></div>
                
                <h5 class="mb-4" style="color: white; font-weight: bold; font-size: 1.3rem;">
                  <i class="bi bi-code-slash me-2"></i>Your Referral Code
                </h5>
                
                <div class="referral-code-display mb-4">
                  <div class="input-group">
                    <input type="text" 
                           class="form-control" 
                           id="referralCodeInput" 
                           value="<%= user.referralCode || 'Loading...' %>" 
                           readonly 
                           style="font-family: 'Courier New', monospace; font-weight: bold; font-size: 1.3rem; text-align: center; background: rgba(255,255,255,0.9); border: none; border-radius: 10px 0 0 10px; padding: 15px;">
                    <button class="btn btn-light" 
                            type="button" 
                            id="copyReferralCodeBtn"
                            style="border: none; border-radius: 0 10px 10px 0; padding: 15px 20px; font-weight: bold; background: white; color: #667eea;">
                      <i class="bi bi-clipboard me-2"></i>Copy
                    </button>
                  </div>
                </div>
                
                <div class="referral-info">
                  <div class="row text-center">
                    <div class="col-4">
                      <div style="color: white; font-size: 0.9rem;">
                        <i class="bi bi-currency-rupee" style="font-size: 1.2rem;"></i><br>
                        <strong>₹50-₹500</strong><br>
                        <small>Reward Range</small>
                      </div>
                    </div>
                    <div class="col-4">
                      <div style="color: white; font-size: 0.9rem;">
                        <i class="bi bi-percent" style="font-size: 1.2rem;"></i><br>
                        <strong>5%</strong><br>
                        <small>Of Order Value</small>
                      </div>
                    </div>
                    <div class="col-4">
                      <div style="color: white; font-size: 0.9rem;">
                        <i class="bi bi-wallet2" style="font-size: 1.2rem;"></i><br>
                        <strong>Direct</strong><br>
                        <small>To Wallet</small>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            <div class="col-md-6">
              <div class="referral-stats" style="background: linear-gradient(145deg, #764ba2 0%, #667eea 100%); border-radius: 15px; padding: 2rem; border: none; box-shadow: 0 8px 25px rgba(0,0,0,0.2); position: relative; overflow: hidden;">
                <div style="position: absolute; top: -40px; left: -40px; width: 80px; height: 80px; background: rgba(255,255,255,0.1); border-radius: 50%;"></div>
                <div style="position: absolute; bottom: -20px; right: -20px; width: 40px; height: 40px; background: rgba(255,255,255,0.1); border-radius: 50%;"></div>
                
                <h5 class="mb-4" style="color: white; font-weight: bold; font-size: 1.3rem;">
                  <i class="bi bi-graph-up me-2"></i>Your Earnings
                </h5>
                
                <div class="row">
                  <div class="col-6">
                    <div class="stat-card text-center p-3" style="background: rgba(255,255,255,0.15); border-radius: 12px; margin-bottom: 1rem; backdrop-filter: blur(10px);">
                      <div class="stat-number" id="referredUsers" style="font-size: 2rem; font-weight: bold; color: white;">0</div>
                      <div class="stat-label" style="font-size: 0.9rem; color: rgba(255,255,255,0.8);">Referred Users</div>
                    </div>
                  </div>
                  <div class="col-6">
                    <div class="stat-card text-center p-3" style="background: rgba(255,255,255,0.15); border-radius: 12px; margin-bottom: 1rem; backdrop-filter: blur(10px);">
                      <div class="stat-number" id="totalRewards" style="font-size: 2rem; font-weight: bold; color: white;">₹0</div>
                      <div class="stat-label" style="font-size: 0.9rem; color: rgba(255,255,255,0.8);">Total Rewards</div>
                    </div>
                  </div>
                </div>
                
                <div class="referral-actions mt-4 text-center">
                  <button class="btn btn-light me-3 mb-2" id="refreshStats" style="border-radius: 25px; padding: 10px 20px; font-weight: bold;">
                    <i class="bi bi-arrow-clockwise me-2"></i>Refresh Stats
                  </button>
                  <button class="btn btn-warning mb-2" id="shareReferral" style="border-radius: 25px; padding: 10px 20px; font-weight: bold; color: white;">
                    <i class="bi bi-share me-2"></i>Share Code
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="profile-stats">
          <div class="stat-item">
            <div class="stat-value"><%= orderCount || 0 %></div>
            <div class="stat-label">Orders</div>
          </div>
          <div class="stat-item">
            <div class="stat-value"><%= addressCount || 0 %></div>
            <div class="stat-label">Addresses</div>
          </div>
        </div>
      </div>
    </main>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
  document.addEventListener('DOMContentLoaded', function() {
    // Move validateEmail function to global scope
    window.validateEmail = function(input) {
      const emailRegex = /^[a-zA-Z0-9._%+\-]+@[a-zA-Z0-9.\-]+\.[a-zA-Z]{2,}$/;
      const email = input.value;
      const saveButton = document.getElementById('saveChangesBtn');
      
      if (!emailRegex.test(email)) {
        input.classList.add('is-invalid');
        input.classList.remove('is-valid');
        saveButton.disabled = true;
        return false;
      } else {
        input.classList.remove('is-invalid');
        input.classList.add('is-valid');
        saveButton.disabled = false;
        return true;
      }
    };

    const editBtn = document.querySelector('.edit-profile-btn');
    const profileDisplay = document.getElementById('profileDisplay');
    const profileEditForm = document.getElementById('profileEditForm');
    const cancelEditBtn = document.getElementById('cancelEdit');
    const updateProfileForm = document.getElementById('updateProfileForm');
    const otpModalElement = document.getElementById('otpModal');
    const otpModal = new bootstrap.Modal(otpModalElement);
    const emailInput = document.getElementById('email');
    const originalEmail = document.getElementById('originalEmail');
    const verifyOtpBtn = document.getElementById('verifyOtpBtn');
    const cancelOtpBtn = document.getElementById('cancelOtpBtn');
    const resendOtpBtn = document.getElementById('resendOtp');
    const otpInputs = document.querySelectorAll('.otp-input');
    let pendingFormData = null;
    let otpTimerId = null;

    // Show edit form
    editBtn.addEventListener('click', function() {
      profileDisplay.style.display = 'none';
      profileEditForm.style.display = 'block';
      editBtn.style.display = 'none';
    });

    // Cancel edit
    cancelEditBtn.addEventListener('click', function() {
      profileDisplay.style.display = 'block';
      profileEditForm.style.display = 'none';
      editBtn.style.display = 'block';
      updateProfileForm.reset();
      
      // Reset validation states
      const emailInput = document.getElementById('email');
      emailInput.classList.remove('is-invalid', 'is-valid');
      document.getElementById('saveChangesBtn').disabled = false;
    });

    // Initialize OTP input handlers
    function resetOTPInputs() {
      otpInputs.forEach(input => {
        input.value = '';
        input.disabled = false;
      });
      otpInputs[0].focus();
    }

    // Handle OTP input
    otpInputs.forEach((input, index) => {
      input.addEventListener('keydown', function(e) {
        // Allow only numbers, backspace, delete, arrow keys
        const allowedKeys = ['Backspace', 'Delete', 'ArrowLeft', 'ArrowRight', 'Tab'];
        if (!allowedKeys.includes(e.key) && !/^[0-9]$/.test(e.key)) {
          e.preventDefault();
          return;
        }

        // Handle backspace
        if (e.key === 'Backspace') {
          if (this.value === '') {
            if (index > 0) {
              otpInputs[index - 1].focus();
              otpInputs[index - 1].value = '';
            }
          } else {
            this.value = '';
          }
          e.preventDefault();
        }
      });

      input.addEventListener('input', function(e) {
        // Remove any non-numeric characters
        this.value = this.value.replace(/[^0-9]/g, '');

        // Move to next input if value is entered
        if (this.value !== '') {
          if (index < otpInputs.length - 1) {
            otpInputs[index + 1].focus();
          }
        }
      });

      // Handle paste event
      input.addEventListener('paste', function(e) {
        e.preventDefault();
        const pastedData = e.clipboardData.getData('text').replace(/[^0-9]/g, '');
        
        if (pastedData) {
          const digits = pastedData.split('').slice(0, otpInputs.length);
          digits.forEach((digit, i) => {
            if (otpInputs[i]) {
              otpInputs[i].value = digit;
            }
          });
          
          // Focus the next empty input or the last one
          const nextEmptyIndex = digits.length < otpInputs.length ? digits.length : otpInputs.length - 1;
          otpInputs[nextEmptyIndex].focus();
        }
      });
    });

    // Reset OTP inputs when modal is shown
    otpModalElement.addEventListener('shown.bs.modal', function () {
      resetOTPInputs();
    });

    // Reset OTP inputs when modal is hidden
    otpModalElement.addEventListener('hidden.bs.modal', function () {
      resetOTPInputs();
    });

    function startOtpTimer(duration) {
      const timerDisplay = document.getElementById('otpTimer');
      const resendBtn = document.getElementById('resendOtp');
      let timeLeft = duration;

      clearInterval(otpTimerId);
      resendBtn.style.display = 'none';
      
      otpTimerId = setInterval(() => {
        const minutes = Math.floor(timeLeft / 60);
        const seconds = timeLeft % 60;
        timerDisplay.textContent = `Resend code in ${minutes}:${seconds.toString().padStart(2, '0')}`;
        
        if (--timeLeft < 0) {
          clearInterval(otpTimerId);
          timerDisplay.textContent = '';
          resendBtn.style.display = 'inline-block';
        }
      }, 1000);
    }

    // Function to handle OTP verification
    async function handleVerifyOTP() {
      const verifyBtn = document.getElementById('verifyOtpBtn');
      try {
        const otp = Array.from(otpInputs).map(input => input.value).join('');
        
        if (otp.length !== 6) {
          showAlert('danger', 'Please enter the complete 6-digit code');
          return;
        }

        verifyBtn.disabled = true;
        verifyBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Verifying...';

        const response = await fetch('/profile/verify-otp', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify({
            otp,
            email: emailInput.value
          })
        });

        const data = await response.json();

        if (response.ok && data.success) {
          showAlert('success', 'Email verified successfully!');
          setTimeout(() => {
            otpModal.hide();
            submitProfileUpdate(pendingFormData);
          }, 1500);
        } else {
          throw new Error(data.message || 'Verification failed');
        }
      } catch (error) {
        console.error('OTP verification failed:', error);
        showAlert('danger', error.message || 'Invalid verification code. Please try again.');
        resetOTPInputs();
      } finally {
        verifyBtn.disabled = false;
        verifyBtn.innerHTML = 'Verify';
      }
    }

    // Function to handle OTP resend
    async function handleResendOTP() {
      const resendBtn = document.getElementById('resendOtp');
      try {
        resendBtn.disabled = true;
        const response = await fetch('/profile/send-otp', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify({
            email: emailInput.value
          })
        });

        const data = await response.json();
        
        if (response.ok && data.success) {
          showAlert('success', 'New verification code sent!');
          startOtpTimer(180);
          resetOTPInputs();
        } else {
          throw new Error(data.message || 'Failed to send verification code');
        }
      } catch (error) {
        console.error('Failed to resend OTP:', error);
        showAlert('danger', error.message || 'Failed to send verification code');
      } finally {
        resendBtn.disabled = false;
      }
    }

    // Add click event listeners
    if (verifyOtpBtn) {
      verifyOtpBtn.addEventListener('click', handleVerifyOTP);
    }

    if (cancelOtpBtn) {
      cancelOtpBtn.addEventListener('click', () => {
        otpModal.hide();
        resetOTPInputs();
      });
    }

    if (resendOtpBtn) {
      resendOtpBtn.addEventListener('click', handleResendOTP);
    }

    // Add keyboard event listener for Enter key
    otpModalElement.addEventListener('keyup', function(event) {
      if (event.key === 'Enter') {
        handleVerifyOTP();
      }
    });

    function showAlert(type, message, container = 'modalAlertPlaceholder') {
      const alertPlaceholder = document.getElementById(container);
      const alert = document.createElement('div');
      alert.className = `alert alert-${type} alert-dismissible fade show`;
      alert.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
      `;
      alertPlaceholder.innerHTML = '';
      alertPlaceholder.appendChild(alert);
      setTimeout(() => alert.remove(), 3000);
    }

    // Handle form submission
    updateProfileForm.addEventListener('submit', async function(e) {
      e.preventDefault();

      const formData = Object.fromEntries(new FormData(this));
      
      // Validate email format
      if (!validateEmail(emailInput)) {
        showAlert('danger', 'Please enter a valid email address');
        return;
      }

      // Check if email has been changed
      if (formData.email !== originalEmail.value) {
        try {
          console.log('Email change detected. Sending OTP...');
          // Send OTP to new email
          const response = await fetch('/profile/send-otp', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              email: formData.email
            })
          });

          const data = await response.json();
          console.log('Send OTP response:', data);

          if (!response.ok || !data.success) {
            throw new Error(data.message || 'Failed to send verification code');
          }

          // Store form data and show OTP modal
          pendingFormData = formData;
          otpModal.show();
          startOtpTimer(180); // Start 3-minute timer
          
          // Reset OTP inputs
          resetOTPInputs();
          
          showAlert('success', 'Verification code sent to your new email address', 'modalAlertPlaceholder');
        } catch (error) {
          console.error('Failed to send OTP:', error);
          showAlert('danger', error.message || 'Failed to send verification code. Please try again.');
        }
      } else {
        // If email hasn't changed, proceed with update
        submitProfileUpdate(formData);
      }
    });

    // Handle OTP verification
    verifyOtpBtn.addEventListener('click', async function() {
      try {
        const otp = Array.from(otpInputs)
          .map(input => input.value)
          .join('');
        
        console.log('Verifying OTP:', { otp, email: pendingFormData.email });
        
        if (otp.length !== 6) {
          throw new Error('Please enter the complete 6-digit code');
        }
        
        this.disabled = true;
        this.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Verifying...';

        const response = await fetch('/profile/verify-otp', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            otp,
            email: pendingFormData.email
          })
        });

        const data = await response.json();
        console.log('OTP verification response:', data);

        if (!response.ok || !data.success) {
          throw new Error(data.message || 'Verification failed');
        }

        showAlert('success', 'Email verified successfully!', 'modalAlertPlaceholder');

        // Wait a moment before proceeding with the update
        setTimeout(() => {
          otpModal.hide();
          submitProfileUpdate(pendingFormData);
        }, 1500);

      } catch (error) {
        console.error('OTP verification failed:', error);
        showAlert('danger', error.message || 'Invalid verification code. Please try again.', 'modalAlertPlaceholder');
        resetOTPInputs();
      } finally {
        this.disabled = false;
        this.innerHTML = 'Verify';
      }
    });

    async function submitProfileUpdate(formData) {
      try {
        console.log('Submitting profile update:', formData);
        const response = await fetch('/profile/update', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify(formData),
          credentials: 'same-origin'
        });

        const data = await response.json();
        console.log('Profile update response:', data);

        if (!response.ok) {
          throw new Error(data.message || 'Failed to update profile');
        }
        
        // Show success message
        const successAlert = document.createElement('div');
        successAlert.className = 'alert alert-success';
        successAlert.textContent = data.message || 'Profile updated successfully!';
        updateProfileForm.insertAdjacentElement('beforebegin', successAlert);

        // Update displayed information with the server response data
        if (data.user) {
          document.querySelector('.username-value').textContent = data.user.username;
          document.querySelector('.email-value').textContent = data.user.email;
          document.querySelector('.phone-value').textContent = data.user.phone || 'Not provided';
          document.querySelector('.content-header h1').textContent = `Welcome Back, ${data.user.username}`;
          
          // Update the original email value to match the new one
          document.getElementById('originalEmail').value = data.user.email;
        }

        // Reset form and show profile display
        profileDisplay.style.display = 'block';
        profileEditForm.style.display = 'none';
        editBtn.style.display = 'block';

        // Remove success message after delay
        setTimeout(() => successAlert.remove(), 3000);

        // Force a page reload after a short delay to ensure session is updated
        setTimeout(() => {
          window.location.reload();
        }, 1000);

      } catch (error) {
        console.error('Update failed:', error);
        const errorAlert = document.createElement('div');
        errorAlert.className = 'alert alert-danger';
        errorAlert.textContent = error.message || 'Failed to update profile. Please try again.';
        updateProfileForm.insertAdjacentElement('beforebegin', errorAlert);
      }
    }

    // Add this function to handle page load
    document.addEventListener('DOMContentLoaded', async function() {
      try {
        // Fetch the latest user data when the page loads
        const response = await fetch('/profile/data');
        const data = await response.json();
        
        if (data.success && data.user) {
          // Update the displayed information with the latest data
          document.querySelector('.username-value').textContent = data.user.username;
          document.querySelector('.email-value').textContent = data.user.email;
          document.querySelector('.phone-value').textContent = data.user.phone || 'Not provided';
          document.querySelector('.content-header h1').textContent = `Welcome Back, ${data.user.username}`;
          
          // Update the original email value
          document.getElementById('originalEmail').value = data.user.email;
        }
      } catch (error) {
        console.error('Error fetching profile data:', error);
      }
    });

    // Referral System Functionality
    const copyReferralCodeBtn = document.getElementById('copyReferralCodeBtn');
    const refreshStatsBtn = document.getElementById('refreshStats');
    const shareReferralBtn = document.getElementById('shareReferral');
    const referralCodeInput = document.getElementById('referralCodeInput');

    console.log('Referral elements found:', {
      copyBtn: !!copyReferralCodeBtn,
      refreshBtn: !!refreshStatsBtn,
      shareBtn: !!shareReferralBtn,
      input: !!referralCodeInput
    });

    // Copy referral code functionality
    if (copyReferralCodeBtn) {
      console.log('Copy button found, adding event listener');
      copyReferralCodeBtn.addEventListener('click', async function() {
        try {
          const referralCode = referralCodeInput.value;
          console.log('Copy button clicked, referral code:', referralCode);
          
          if (!referralCode || referralCode === 'Loading...') {
            alert('Referral code not available');
            return;
          }

          // Try modern clipboard API first
          if (navigator.clipboard && window.isSecureContext) {
            await navigator.clipboard.writeText(referralCode);
            console.log('Copied using modern clipboard API');
          } else {
            // Fallback for older browsers or non-secure contexts
            console.log('Using fallback copy method');
            referralCodeInput.select();
            referralCodeInput.setSelectionRange(0, 99999); // For mobile devices
            document.execCommand('copy');
          }
          
          // Visual feedback
          const originalText = this.innerHTML;
          this.innerHTML = '<i class="bi bi-check"></i> Copied!';
          this.classList.remove('btn-light');
          this.classList.add('btn-success');
          
          setTimeout(() => {
            this.innerHTML = originalText;
            this.classList.remove('btn-success');
            this.classList.add('btn-light');
          }, 2000);
        } catch (error) {
          console.error('Failed to copy referral code:', error);
          alert('Failed to copy referral code. Please try selecting and copying manually.');
        }
      });
    }

    // Load referral statistics
    async function loadReferralStats() {
      try {
        const response = await fetch('/api/referral/stats', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json'
          },
          credentials: 'same-origin'
        });

        const data = await response.json();
        
        if (data.success) {
          document.getElementById('referredUsers').textContent = data.data.referredUsers || 0;
          document.getElementById('totalRewards').textContent = `₹${data.data.totalReferralRewards || 0}`;
        } else {
          console.error('Failed to load referral stats:', data.message);
        }
      } catch (error) {
        console.error('Error loading referral stats:', error);
      }
    }

    // Refresh stats button
    if (refreshStatsBtn) {
      refreshStatsBtn.addEventListener('click', function() {
        this.innerHTML = '<i class="bi bi-arrow-clockwise spin"></i> Loading...';
        this.disabled = true;
        
        loadReferralStats().finally(() => {
          this.innerHTML = '<i class="bi bi-arrow-clockwise"></i> Refresh Stats';
          this.disabled = false;
        });
      });
    }

    // Share referral code functionality
    if (shareReferralBtn) {
      shareReferralBtn.addEventListener('click', async function() {
        try {
          const referralCode = referralCodeInput.value;
          if (!referralCode || referralCode === 'Loading...') {
            alert('Referral code not available');
            return;
          }

          const shareText = `Join MotionHaus using my referral code: ${referralCode}\n\nGet ₹50-₹500 reward when you place your first order!\n\nSign up at: ${window.location.origin}/signup`;
          const shareUrl = `${window.location.origin}/signup?ref=${referralCode}`;

          if (navigator.share) {
            // Use native sharing if available
            await navigator.share({
              title: 'Join MotionHaus',
              text: shareText,
              url: shareUrl
            });
          } else {
            // Fallback to copying to clipboard
            await navigator.clipboard.writeText(`${shareText}\n\nSign up link: ${shareUrl}`);
            alert('Share text copied to clipboard!');
          }
        } catch (error) {
          console.error('Failed to share referral code:', error);
          alert('Failed to share referral code');
        }
      });
    }

    // Load referral stats on page load
    loadReferralStats();

    // Add CSS for spinning animation
    const style = document.createElement('style');
    style.textContent = `
      .spin {
        animation: spin 1s linear infinite;
      }
      @keyframes spin {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
      }
    `;
    document.head.appendChild(style);
  });
  </script>
</body>
</html>
