<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>The Tastemaker - Address</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    :root {
      --primary-purple: #090909f5;
      --sidebar-width: 250px;
    }

    body {
      margin: 0;
      font-family: 'Inter', sans-serif;
      background-color: #f8f9fa;
      padding-top: 60px; /* Add padding for fixed navbar */
    }

    .layout {
      display: flex;
      min-height: calc(100vh - 60px); /* Adjust for navbar height */
    }

    .sidebar {
      width: var(--sidebar-width);
      background: var(--primary-purple);
      padding: 2rem 1.5rem;
      color: white;
      position: fixed;
      height: calc(100vh - 60px); /* Adjust for navbar height */
      left: 0;
      top: 60px; /* Position below navbar */
      z-index: 10;
      border-right: 1px solid #232326;
    }

    .sidebar-logo {
      font-size: 1.5rem;
      font-weight: bold;
      margin-bottom: 3rem;
      color: white;
      text-decoration: none;
      display: block;
    }

    .nav-link {
      color: rgba(255, 255, 255, 0.8);
      padding: 0.75rem 1rem;
      display: flex;
      align-items: center;
      gap: 1rem;
      text-decoration: none;
      transition: all 0.3s ease;
      border-radius: 8px;
    }

    .nav-link:hover,
    .nav-link.active {
      color: white;
      background: rgba(255, 255, 255, 0.1);
    }

    .nav-link i {
      font-size: 1.2rem;
    }

    .main-content {
      margin-left: var(--sidebar-width);
      flex-grow: 1;
      padding: 2rem;
      background-color: #131314;
    }

    .content-wrapper {
      background-image: url("/image/2b185786626367.5d9f30e3d6e07.png");
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
      border-radius: 20px;
      padding: 3rem;
      height: calc(100vh - 4rem);
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
      overflow-y: auto;
    }

    .content-header {
      color: white;
      margin-bottom: 4rem;
      text-align: center;
    }

    .content-header h1 {
      font-size: 3.5rem;
      font-weight: 600;
      margin-bottom: 1rem;
    }

    .content-header p {
      font-size: 1.2rem;
      opacity: 0.9;
    }

    .content-body {
      margin-top: 2rem;
    }

    .profile-section {
      background: black;
      backdrop-filter: blur(10px);
      border-radius: 20px;
      padding: 2rem;
      color: white;
      margin-bottom: 2rem;
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .profile-nav {
      display: flex;
      gap: 1rem;
      margin-bottom: 2rem;
    }

    .profile-nav-item {
      padding: 0.75rem 1.5rem;
      border-radius: 30px;
      cursor: pointer;
      transition: all 0.3s ease;
      background: rgba(255, 255, 255, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .profile-nav-item:hover {
      background: rgba(255, 255, 255, 0.2);
    }

    .profile-nav-item.active {
      background: white;
      color: #ff7675;
    }

    .info-label {
      opacity: 0.8;
      margin-bottom: 0.5rem;
    }

    .info-value {
      font-size: 1.1rem;
      margin-bottom: 1.5rem;
    }

    /* Custom scrollbar for the content wrapper */
    .content-wrapper::-webkit-scrollbar {
      width: 8px;
    }

    .content-wrapper::-webkit-scrollbar-track {
      background: rgba(255, 255, 255, 0.1);
      border-radius: 4px;
    }

    .content-wrapper::-webkit-scrollbar-thumb {
      background: rgba(255, 255, 255, 0.3);
      border-radius: 4px;
    }

    .content-wrapper::-webkit-scrollbar-thumb:hover {
      background: rgba(255, 255, 255, 0.4);
    }

    .form-control {
      background-color: rgba(255, 255, 255, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
      color: white;
    }

    .form-control:focus {
      background-color: rgba(255, 255, 255, 0.15);
      border-color: rgba(255, 255, 255, 0.3);
      color: white;
      box-shadow: 0 0 0 0.25rem rgba(255, 255, 255, 0.1);
    }

    .form-control::placeholder {
      color: rgba(255, 255, 255, 0.5);
    }

    .btn-primary {
      background-color: #ff7675;
      border-color: #ff7675;
    }

    .btn-primary:hover {
      background-color: #e66767;
      border-color: #e66767;
    }

    .btn-outline-light {
      color: white;
      border-color: rgba(255, 255, 255, 0.5);
    }

    .btn-outline-light:hover {
      background-color: rgba(255, 255, 255, 0.1);
      color: white;
    }

    .btn-outline-danger {
      color: #ff7675;
      border-color: #ff7675;
    }

    .btn-outline-danger:hover {
      background-color: #ff7675;
      color: white;
    }

    .alert {
      background-color: rgba(255, 255, 255, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
      color: white;
    }

    .alert-success {
      border-left: 4px solid #00b894;
    }

    .alert-danger {
      border-left: 4px solid #ff7675;
    }

    .address-card {
      background: rgba(255, 255, 255, 0.05);
      border: 1px solid rgba(255, 255, 255, 0.1);
      border-radius: 15px;
      padding: 1.5rem;
      margin-bottom: 1rem;
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }

    .address-card:hover {
      background: rgba(255, 255, 255, 0.08);
      transform: translateY(-2px);
    }

    .address-card.default {
      border: 1px solid #ff7675;
      background: rgba(255, 118, 117, 0.1);
    }

    .address-card .default-badge {
      background: #ff7675;
      color: white;
      padding: 0.5rem 1rem;
      border-radius: 0 0 12px 0;
      font-size: 0.85rem;
      font-weight: 600;
      position: absolute;
      top: 0;
      left: 0;
      box-shadow: 2px 2px 5px rgba(0,0,0,0.1);
    }

    .address-card .address-type {
      color: rgba(255, 255, 255, 0.6);
      font-size: 0.9rem;
      margin-bottom: 0.5rem;
      padding-top: 1.5rem;
    }

    .address-card .address-details {
      margin: 1rem 0;
    }

    .address-card .address-actions {
      display: flex;
      gap: 0.75rem;
      margin-top: 1.5rem;
      flex-wrap: wrap;
    }

    .address-card .btn {
      padding: 0.5rem 1rem;
      font-size: 0.9rem;
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      transition: all 0.2s ease;
    }

    .address-card .btn i {
      font-size: 1rem;
    }

    .address-card .btn-outline-light {
      border-color: rgba(255, 255, 255, 0.3);
    }

    .address-card .btn-outline-light:hover {
      background: rgba(255, 255, 255, 0.1);
      border-color: rgba(255, 255, 255, 0.5);
    }

    .address-card .btn-outline-danger {
      border-color: rgba(255, 118, 117, 0.5);
    }

    .address-card .btn-outline-danger:hover {
      background: rgba(255, 118, 117, 0.1);
      border-color: #ff7675;
    }

    .address-card .btn-set-default {
      border-color: #ffd32a;
      color: #ffd32a;
    }

    .address-card .btn-set-default:hover {
      background: rgba(255, 211, 42, 0.1);
      border-color: #ffd32a;
      color: #ffd32a;
    }

    .address-card .btn-set-default i {
      color: #ffd32a;
    }

    .edit-form {
      display: none;
      margin-top: 1rem;
      padding: 1.5rem;
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .edit-form.active {
      display: block;
    }

    .edit-form .form-group {
      margin-bottom: 1rem;
    }

    .edit-form label {
      display: block;
      margin-bottom: 0.5rem;
      color: white;
      font-size: 0.9rem;
    }

    .edit-form input,
    .edit-form select {
      width: 100%;
      padding: 0.75rem;
      background: rgba(255, 255, 255, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 8px;
      color: white;
    }

    .edit-form input:focus,
    .edit-form select:focus {
      outline: none;
      border-color: #ff7675;
      box-shadow: 0 0 0 2px rgba(255, 118, 117, 0.2);
    }

    .edit-form-actions {
      display: flex;
      gap: 1rem;
      margin-top: 1.5rem;
    }

    .save-edit-btn,
    .cancel-edit-btn {
      padding: 0.75rem 1.5rem;
      border-radius: 8px;
      font-size: 0.9rem;
      font-weight: 500;
      transition: all 0.2s ease;
    }

    .save-edit-btn {
      background: #ff7675;
      color: white;
      border: none;
    }

    .save-edit-btn:hover {
      background: #e66767;
    }

    .cancel-edit-btn {
      background: transparent;
      border: 1px solid rgba(255, 255, 255, 0.2);
      color: white;
    }

    .cancel-edit-btn:hover {
      background: rgba(255, 255, 255, 0.1);
    }

    .alert {
      margin-bottom: 1.5rem;
      border-radius: 8px;
    }

    .alert-success {
      background: rgba(0, 184, 148, 0.1);
      border: 1px solid rgba(0, 184, 148, 0.2);
      color: #00b894;
    }

    .alert-danger {
      background: rgba(255, 118, 117, 0.1);
      border: 1px solid rgba(255, 118, 117, 0.2);
      color: #ff7675;
    }

    /* SweetAlert2 Custom Styles */
    .swal-wide {
      width: 400px !important;
      padding: 2rem !important;
    }

    .swal2-popup {
      border-radius: 16px !important;
    }

    .swal2-title {
      font-size: 1.5rem !important;
      font-weight: 600 !important;
      color: #2d3436 !important;
    }

    .swal2-html-container {
      font-size: 1rem !important;
      color: #636e72 !important;
    }

    .swal-confirm {
      padding: 12px 24px !important;
      font-size: 1rem !important;
      font-weight: 500 !important;
      border-radius: 8px !important;
    }

    .swal-cancel {
      padding: 12px 24px !important;
      font-size: 1rem !important;
      font-weight: 500 !important;
      border-radius: 8px !important;
      color: #2d3436 !important;
      border: 1px solid #dfe6e9 !important;
    }

    .swal-cancel:hover {
      background: #f1f2f6 !important;
    }

    .swal2-actions {
      gap: 12px !important;
    }

    /* Loading Animation */
    .swal2-loading {
      border-color: #ff7675 !important;
    }

    .swal2-loading .swal2-confirm {
      display: none !important;
    }

    /* Inline Validation Styles */
    .form-control.is-invalid {
      border-color: #ff7675 !important;
      box-shadow: 0 0 0 0.2rem rgba(255, 118, 117, 0.25) !important;
    }

    .form-control.is-valid {
      border-color: #00b894 !important;
      box-shadow: 0 0 0 0.2rem rgba(0, 184, 148, 0.25) !important;
    }

    .form-select.is-invalid {
      border-color: #ff7675 !important;
      box-shadow: 0 0 0 0.2rem rgba(255, 118, 117, 0.25) !important;
    }

    .form-select.is-valid {
      border-color: #00b894 !important;
      box-shadow: 0 0 0 0.2rem rgba(0, 184, 148, 0.25) !important;
    }

    .invalid-feedback {
      display: block !important;
      color: #ff7675 !important;
      font-size: 0.875rem !important;
      margin-top: 0.25rem !important;
      font-weight: 500 !important;
    }

    .valid-feedback {
      display: block !important;
      color: #00b894 !important;
      font-size: 0.875rem !important;
      margin-top: 0.25rem !important;
      font-weight: 500 !important;
    }

    /* Form validation states */
    .form-control:focus.is-invalid {
      box-shadow: 0 0 0 0.2rem rgba(255, 118, 117, 0.25) !important;
    }

    .form-control:focus.is-valid {
      box-shadow: 0 0 0 0.2rem rgba(0, 184, 148, 0.25) !important;
    }
  </style>
</head>
<body>
  <%- include('../partials/navbar') %>
  <div class="layout">
    <!-- Include the common sidebar -->
    <%- include('../partials/user-profile-sidebar', { currentPage: 'address' }) %>

    <!-- Main Content -->
    <main class="main-content">
      <div class="content-wrapper">
        <div class="content-header">
          <h1>Manage Addresses</h1>
          <p>Add and manage your delivery addresses</p>
        </div>

        <div class="content-body">
          <% if (success && success.length > 0) { %>
            <div class="alert alert-success mb-4" role="alert">
              <%= success %>
            </div>
          <% } %>
          
          <% if (error && error.length > 0) { %>
            <div class="alert alert-danger mb-4" role="alert">
              <%= error %>
            </div>
          <% } %>

          <div class="profile-section">
            <div class="profile-nav">
              <div class="profile-nav-item active">Addresses</div>
            </div>

            <!-- Add New Address Form -->
            <form action="/profile/address/add" method="POST" class="row g-4 mb-5" id="addressForm" novalidate>
              <div class="col-md-6">
                <label for="fullName" class="form-label text-white">Full Name</label>
                <input type="text" class="form-control" id="fullName" name="fullName" 
                  minlength="2" maxlength="50" required>
                <div class="invalid-feedback" id="fullName-error"></div>
              </div>
              <div class="col-md-6">
                <label for="phone" class="form-label text-white">Phone Number</label>
                <input type="tel" class="form-control" id="phone" name="phone" 
                  minlength="10" maxlength="15" required>
                <div class="invalid-feedback" id="phone-error"></div>
              </div>
              <div class="col-12">
                <label for="addressLine1" class="form-label text-white">Address Line 1</label>
                <input type="text" class="form-control" id="addressLine1" name="addressLine1" 
                  placeholder="Street address, P.O. box, company name" 
                  minlength="5" maxlength="100" required>
                <div class="invalid-feedback" id="addressLine1-error"></div>
              </div>
              <div class="col-12">
                <label for="addressLine2" class="form-label text-white">Address Line 2</label>
                <input type="text" class="form-control" id="addressLine2" name="addressLine2" 
                  placeholder="Apartment, suite, unit, building, floor, etc."
                  maxlength="100">
                <div class="invalid-feedback" id="addressLine2-error"></div>
              </div>
              <div class="col-md-4">
                <label for="city" class="form-label text-white">City</label>
                <input type="text" class="form-control" id="city" name="city" 
                  minlength="2" maxlength="50" required>
                <div class="invalid-feedback" id="city-error"></div>
              </div>
              <div class="col-md-4">
                <label for="state" class="form-label text-white">State/Province</label>
                <input type="text" class="form-control" id="state" name="state" 
                  minlength="2" maxlength="50" required>
                <div class="invalid-feedback" id="state-error"></div>
              </div>
              <div class="col-md-4">
                <label for="zipCode" class="form-label text-white">ZIP/Postal Code</label>
                <input type="text" class="form-control" id="zipCode" name="zipCode" 
                  minlength="3" maxlength="10" required>
                <div class="invalid-feedback" id="zipCode-error"></div>
              </div>
              <div class="col-md-6">
                <label for="country" class="form-label text-white">Country</label>
                <select class="form-select" id="country" name="country" required>
                  <option value="" disabled selected>Select a country</option>
                  <option value="US">United States</option>
                  <option value="CA">Canada</option>
                  <option value="UK">United Kingdom</option>
                  <option value="AU">Australia</option>
                  <option value="IND">India</option>
                  <!-- Add more countries as needed -->
                </select>
                <div class="invalid-feedback" id="country-error"></div>
              </div>
              <div class="col-md-6">
                <label for="addressType" class="form-label text-white">Address Type</label>
                <select class="form-select" id="addressType" name="addressType">
                  <option value="home">Home</option>
                  <option value="work">Work</option>
                  <option value="other">Other</option>
                </select>
              </div>
              <div class="col-12">
                <div class="form-check">
                  <input class="form-check-input" type="checkbox" id="defaultAddress" name="defaultAddress">
                  <label class="form-check-label text-white" for="defaultAddress">
                    Set as default address
                  </label>
                </div>
              </div>
              <div class="col-12">
                <button type="submit" class="btn btn-primary">Add Address</button>
              </div>
            </form>

            <!-- Saved Addresses -->
            <h3 class="text-white mb-4">Saved Addresses</h3>
            <% if (addresses && addresses.length > 0) { %>
              <% addresses.forEach(address => { %>
                <div class="address-card <%= address.isDefault ? 'default' : '' %>">
                  <% if (address.isDefault) { %>
                    <div class="default-badge">Default Address</div>
                  <% } %>
                  <div class="address-type">
                    <i class="bi bi-<%= address.addressType === 'home' ? 'house' : address.addressType === 'work' ? 'building' : 'geo-alt' %>"></i>
                    <%= address.addressType.charAt(0).toUpperCase() + address.addressType.slice(1) %> Address
                  </div>
                  <div class="address-details">
                    <div class="text-white"><%= address.fullName %></div>
                    <div class="text-white"><%= address.phone %></div>
                    <div class="text-white"><%= address.addressLine1 %></div>
                    <% if (address.addressLine2) { %>
                      <div class="text-white"><%= address.addressLine2 %></div>
                    <% } %>
                    <div class="text-white">
                      <%= address.city %>, <%= address.state %> <%= address.zipCode %>
                    </div>
                    <div class="text-white"><%= address.country %></div>
                  </div>
                  <div class="address-actions">
                    <button type="button" class="btn btn-outline-light edit-address-btn" 
                            data-address="<%- encodeURIComponent(JSON.stringify(address)) %>">
                      <i class="bi bi-pencil"></i> Edit
                    </button>
                    <form action="/profile/address/delete/<%= address._id %>" method="POST" class="d-inline delete-address-form">
                      <button type="submit" class="btn btn-outline-danger">
                        <i class="bi bi-trash"></i> Delete
                      </button>
                    </form>
                    <% if (!address.isDefault) { %>
                      <form action="/profile/address/set-default/<%= address._id %>" method="POST" class="d-inline set-default-form">
                        <button type="submit" class="btn btn-set-default">
                          <i class="bi bi-star-fill"></i> Set as Default
                        </button>
                      </form>
                    <% } %>
                  </div>
                </div>
              <% }) %>
            <% } else { %>
              <div class="text-center text-white py-5">
                <i class="bi bi-geo-alt" style="font-size: 3rem; opacity: 0.5;"></i>
                <p class="mt-3">No addresses saved yet</p>
                <p class="text-muted">Add your first address using the form above</p>
              </div>
            <% } %>
          </div>
        </div>
      </div>
    </main>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Form validation functions
      const validators = {
        fullName: (value) => {
          if (!value) return 'Full name is required';
          if (value.length < 2) return 'Full name must be at least 2 characters';
          if (value.length > 50) return 'Full name must be less than 50 characters';
          if (!/^[a-zA-Z\s]+$/.test(value)) return 'Full name should contain only letters and spaces';
          return null;
        },
        phone: (value) => {
          if (!value) return 'Phone number is required';
          if (value.length < 10) return 'Phone number must be at least 10 digits';
          if (value.length > 15) return 'Phone number must be less than 15 digits';
          if (!/^\d+$/.test(value)) return 'Phone number should contain only digits';
          return null;
        },
        addressLine1: (value) => {
          if (!value) return 'Address line 1 is required';
          if (value.length < 5) return 'Address must be at least 5 characters';
          if (value.length > 100) return 'Address must be less than 100 characters';
          return null;
        },
        addressLine2: (value) => {
          if (value && value.length > 100) return 'Address line 2 must be less than 100 characters';
          return null;
        },
        city: (value) => {
          if (!value) return 'City is required';
          if (value.length < 2) return 'City must be at least 2 characters';
          if (value.length > 50) return 'City must be less than 50 characters';
          if (!/^[a-zA-Z\s]+$/.test(value)) return 'City should contain only letters and spaces';
          return null;
        },
        state: (value) => {
          if (!value) return 'State/Province is required';
          if (value.length < 2) return 'State/Province must be at least 2 characters';
          if (value.length > 50) return 'State/Province must be less than 50 characters';
          if (!/^[a-zA-Z\s]+$/.test(value)) return 'State/Province should contain only letters and spaces';
          return null;
        },
        zipCode: (value) => {
          if (!value) return 'ZIP/Postal code is required';
          if (value.length < 3) return 'ZIP/Postal code must be at least 3 characters';
          if (value.length > 10) return 'ZIP/Postal code must be less than 10 characters';
          return null;
        },
        country: (value) => {
          if (!value) return 'Country is required';
          return null;
        }
      };

      // Function to show error message
      function showError(fieldId, message) {
        const field = document.getElementById(fieldId);
        const errorDiv = document.getElementById(fieldId + '-error');
        
        field.classList.remove('is-valid');
        field.classList.add('is-invalid');
        
        if (errorDiv) {
          errorDiv.textContent = message;
          errorDiv.style.display = 'block';
        }
      }

      // Function to show success message
      function showSuccess(fieldId) {
        const field = document.getElementById(fieldId);
        const errorDiv = document.getElementById(fieldId + '-error');
        
        field.classList.remove('is-invalid');
        field.classList.add('is-valid');
        
        if (errorDiv) {
          errorDiv.style.display = 'none';
        }
      }

      // Function to validate a single field
      function validateField(fieldId) {
        const field = document.getElementById(fieldId);
        const value = field.value.trim();
        const validator = validators[fieldId];
        
        if (validator) {
          const error = validator(value);
          if (error) {
            showError(fieldId, error);
            return false;
          } else {
            showSuccess(fieldId);
            return true;
          }
        }
        return true;
      }

      // Add real-time validation to all form fields
      Object.keys(validators).forEach(fieldId => {
        const field = document.getElementById(fieldId);
        if (field) {
          // Validate on blur
          field.addEventListener('blur', () => validateField(fieldId));
          
          // Validate on input (for real-time feedback)
          field.addEventListener('input', () => {
            if (field.classList.contains('is-invalid')) {
              validateField(fieldId);
            }
          });
        }
      });

      // Form submission validation
      document.getElementById('addressForm').addEventListener('submit', function(e) {
        e.preventDefault();
        
        let isValid = true;
        const errors = [];
        
        // Validate all fields
        Object.keys(validators).forEach(fieldId => {
          if (!validateField(fieldId)) {
            isValid = false;
            const field = document.getElementById(fieldId);
            const errorDiv = document.getElementById(fieldId + '-error');
            if (errorDiv && errorDiv.textContent) {
              errors.push(errorDiv.textContent);
            }
          }
        });
        
        if (isValid) {
          // Form is valid, submit it
          this.submit();
        } else {
          // Show first error in a toast or alert
          if (errors.length > 0) {
            Swal.fire({
              icon: 'error',
              title: 'Validation Error',
              text: errors[0],
              confirmButtonColor: '#ff7675'
            });
          }
        }
      });

      // Handle edit address buttons
      document.querySelectorAll('.edit-address-btn').forEach(button => {
        button.addEventListener('click', function(e) {
          e.preventDefault();
          const addressData = JSON.parse(decodeURIComponent(this.dataset.address));
          const addressCard = this.closest('.address-card');
          
          // Create or get edit form
          let editForm = addressCard.querySelector('.edit-form');
          if (!editForm) {
            editForm = document.createElement('div');
            editForm.className = 'edit-form';
            
            // Create the form HTML with proper EJS escaping
            const formHtml = `
              <form class="edit-address-form" data-address-id="${addressData._id}">
                <div class="form-group">
                  <label for="fullName-${addressData._id}">Full Name</label>
                  <input type="text" class="form-control" id="fullName-${addressData._id}" 
                         name="fullName" value="${addressData.fullName}" required>
                </div>
                <div class="form-group">
                  <label for="phone-${addressData._id}">Phone Number</label>
                  <input type="tel" class="form-control" id="phone-${addressData._id}" 
                         name="phone" value="${addressData.phone}" required>
                </div>
                <div class="form-group">
                  <label for="addressLine1-${addressData._id}">Address Line 1</label>
                  <input type="text" class="form-control" id="addressLine1-${addressData._id}" 
                         name="addressLine1" value="${addressData.addressLine1}" required>
                </div>
                <div class="form-group">
                  <label for="addressLine2-${addressData._id}">Address Line 2</label>
                  <input type="text" class="form-control" id="addressLine2-${addressData._id}" 
                         name="addressLine2" value="${addressData.addressLine2 || ''}">
                </div>
                <div class="form-group">
                  <label for="city-${addressData._id}">City</label>
                  <input type="text" class="form-control" id="city-${addressData._id}" 
                         name="city" value="${addressData.city}" required>
                </div>
                <div class="form-group">
                  <label for="state-${addressData._id}">State/Province</label>
                  <input type="text" class="form-control" id="state-${addressData._id}" 
                         name="state" value="${addressData.state}" required>
                </div>
                <div class="form-group">
                  <label for="zipCode-${addressData._id}">ZIP/Postal Code</label>
                  <input type="text" class="form-control" id="zipCode-${addressData._id}" 
                         name="zipCode" value="${addressData.zipCode}" required>
                </div>
                <div class="form-group">
                  <label for="country-${addressData._id}">Country</label>
                  <select class="form-control" id="country-${addressData._id}" name="country" required>
                    <option value="US" ${addressData.country === 'US' ? 'selected' : ''}>United States</option>
                    <option value="CA" ${addressData.country === 'CA' ? 'selected' : ''}>Canada</option>
                    <option value="UK" ${addressData.country === 'UK' ? 'selected' : ''}>United Kingdom</option>
                    <option value="AU" ${addressData.country === 'AU' ? 'selected' : ''}>Australia</option>
                  </select>
                </div>
                <div class="form-group">
                  <label for="addressType-${addressData._id}">Address Type</label>
                  <select class="form-control" id="addressType-${addressData._id}" name="addressType">
                    <option value="home" ${addressData.addressType === 'home' ? 'selected' : ''}>Home</option>
                    <option value="work" ${addressData.addressType === 'work' ? 'selected' : ''}>Work</option>
                    <option value="other" ${addressData.addressType === 'other' ? 'selected' : ''}>Other</option>
                  </select>
                </div>
                <div class="edit-form-actions">
                  <button type="submit" class="btn btn-primary">Save Changes</button>
                  <button type="button" class="btn btn-secondary cancel-edit">Cancel</button>
                </div>
              </form>
            `;
            
            editForm.innerHTML = formHtml;
            addressCard.appendChild(editForm);

            // Handle form submission
            const form = editForm.querySelector('form');
            form.addEventListener('submit', async function(e) {
              e.preventDefault();
              const formData = new FormData(this);
              const addressId = this.dataset.addressId;

              // Validate edit form fields
              let isValid = true;
              const errors = [];

              // Validate all fields in edit form
              Object.keys(validators).forEach(fieldId => {
                const field = form.querySelector(`[name="${fieldId}"]`);
                if (field) {
                  const value = field.value.trim();
                  const validator = validators[fieldId];
                  
                  if (validator) {
                    const error = validator(value);
                    if (error) {
                      isValid = false;
                      errors.push(error);
                      
                      // Show error on field
                      field.classList.remove('is-valid');
                      field.classList.add('is-invalid');
                      
                      // Create or update error message
                      let errorDiv = field.parentNode.querySelector('.invalid-feedback');
                      if (!errorDiv) {
                        errorDiv = document.createElement('div');
                        errorDiv.className = 'invalid-feedback';
                        field.parentNode.appendChild(errorDiv);
                      }
                      errorDiv.textContent = error;
                      errorDiv.style.display = 'block';
                    } else {
                      field.classList.remove('is-invalid');
                      field.classList.add('is-valid');
                      
                      // Hide error message
                      const errorDiv = field.parentNode.querySelector('.invalid-feedback');
                      if (errorDiv) {
                        errorDiv.style.display = 'none';
                      }
                    }
                  }
                }
              });

              if (!isValid) {
                // Show first error in SweetAlert
                Swal.fire({
                  icon: 'error',
                  title: 'Validation Error',
                  text: errors[0],
                  confirmButtonColor: '#ff7675'
                });
                return;
              }

              try {
                const response = await fetch(`/profile/address/edit/${addressId}`, {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify(Object.fromEntries(formData)),
                  credentials: 'same-origin'
                });

                if (response.ok) {
                  // Show success message
                  Swal.fire({
                    icon: 'success',
                    title: 'Address Updated',
                    text: 'Your address has been updated successfully!',
                    confirmButtonColor: '#00b894',
                    timer: 2000,
                    showConfirmButton: false
                  }).then(() => {
                    // Refresh the page to show updated address
                    window.location.reload();
                  });
                } else {
                  const data = await response.json();
                  throw new Error(data.message || 'Failed to update address');
                }
              } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                  icon: 'error',
                  title: 'Update Failed',
                  text: error.message || 'Failed to update address. Please try again.',
                  confirmButtonColor: '#ff7675'
                });
              }
            });

            // Handle cancel button
            editForm.querySelector('.cancel-edit').addEventListener('click', function() {
              editForm.classList.remove('active');
              addressCard.querySelector('.address-details').style.display = 'block';
            });

            // Add real-time validation to edit form fields
            Object.keys(validators).forEach(fieldId => {
              const field = editForm.querySelector(`[name="${fieldId}"]`);
              if (field) {
                // Validate on blur
                field.addEventListener('blur', () => {
                  const value = field.value.trim();
                  const validator = validators[fieldId];
                  
                  if (validator) {
                    const error = validator(value);
                    if (error) {
                      field.classList.remove('is-valid');
                      field.classList.add('is-invalid');
                      
                      let errorDiv = field.parentNode.querySelector('.invalid-feedback');
                      if (!errorDiv) {
                        errorDiv = document.createElement('div');
                        errorDiv.className = 'invalid-feedback';
                        field.parentNode.appendChild(errorDiv);
                      }
                      errorDiv.textContent = error;
                      errorDiv.style.display = 'block';
                    } else {
                      field.classList.remove('is-invalid');
                      field.classList.add('is-valid');
                      
                      const errorDiv = field.parentNode.querySelector('.invalid-feedback');
                      if (errorDiv) {
                        errorDiv.style.display = 'none';
                      }
                    }
                  }
                });
                
                // Validate on input (for real-time feedback)
                field.addEventListener('input', () => {
                  if (field.classList.contains('is-invalid')) {
                    const value = field.value.trim();
                    const validator = validators[fieldId];
                    
                    if (validator) {
                      const error = validator(value);
                      if (error) {
                        let errorDiv = field.parentNode.querySelector('.invalid-feedback');
                        if (errorDiv) {
                          errorDiv.textContent = error;
                        }
                      } else {
                        field.classList.remove('is-invalid');
                        field.classList.add('is-valid');
                        
                        const errorDiv = field.parentNode.querySelector('.invalid-feedback');
                        if (errorDiv) {
                          errorDiv.style.display = 'none';
                        }
                      }
                    }
                  }
                });
              }
            });
          }

          // Toggle edit form visibility
          editForm.classList.toggle('active');
          addressCard.querySelector('.address-details').style.display = 
            editForm.classList.contains('active') ? 'none' : 'block';
        });
      });

      // Handle set default address forms
      document.querySelectorAll('.set-default-form').forEach(form => {
        form.addEventListener('submit', async function(e) {
          e.preventDefault();
          
          try {
            const response = await fetch(this.action, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              credentials: 'same-origin'
            });
            
            if (response.ok) {
              Swal.fire({
                icon: 'success',
                title: 'Default Address Set',
                text: 'Your default address has been updated successfully!',
                confirmButtonColor: '#00b894',
                timer: 2000,
                showConfirmButton: false
              }).then(() => {
                window.location.reload();
              });
            } else {
              const data = await response.json();
              throw new Error(data.message || 'Failed to set default address');
            }
          } catch (error) {
            console.error('Error:', error);
            Swal.fire({
              icon: 'error',
              title: 'Update Failed',
              text: error.message || 'Failed to set default address. Please try again.',
              confirmButtonColor: '#ff7675'
            });
          }
        });
      });

      // Handle address deletion
      document.querySelectorAll('.delete-address-form').forEach(form => {
        form.addEventListener('submit', async function(e) {
          e.preventDefault();
          
          // Show confirmation dialog
          const result = await Swal.fire({
            title: 'Delete Address',
            text: 'Are you sure you want to delete this address?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#ff7675',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Yes, delete it!',
            cancelButtonText: 'Cancel'
          });

          if (result.isConfirmed) {
            try {
              const response = await fetch(this.action, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                credentials: 'same-origin'
              });

              if (response.ok) {
                Swal.fire({
                  icon: 'success',
                  title: 'Address Deleted',
                  text: 'Your address has been deleted successfully!',
                  confirmButtonColor: '#00b894',
                  timer: 2000,
                  showConfirmButton: false
                }).then(() => {
                  this.closest('.address-card').remove();
                });
              } else {
                const data = await response.json();
                throw new Error(data.message || 'Failed to delete address');
              }
            } catch (error) {
              console.error('Error:', error);
              Swal.fire({
                icon: 'error',
                title: 'Delete Failed',
                text: error.message || 'Failed to delete address. Please try again.',
                confirmButtonColor: '#ff7675'
              });
            }
          }
        });
      });
    });
  </script>
</body>
</html> 