<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Checkout - MotionHaus</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
  <style>
    body {
      background: #fff;
      color: #111;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
      margin: 0;
      padding: 0;
    }
    .container {
      max-width: 1400px;
      margin: 40px auto;
      padding: 0 24px;
      display: grid;
      grid-template-columns: 1fr 400px;
      gap: 40px;
      align-items: start;
    }
    .main-checkout {
      display: flex;
      flex-direction: column;
      gap: 24px;
    }
    .checkout-form {
      background: #fff;
      border-radius: 16px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      padding: 32px;
    }
    .checkout-form h2 {
      font-size: 24px;
      font-weight: 600;
      margin-bottom: 24px;
      color: #111;
    }
    .form-group {
      margin-bottom: 32px;
    }
    .form-group label {
      display: block;
      font-size: 15px;
      font-weight: 600;
      margin-bottom: 12px;
      color: #333;
    }
    .form-group input, .form-group select {
      width: 100%;
      padding: 16px;
      border-radius: 12px;
      border: 1px solid #e0e0e0;
      font-size: 16px;
      background: #fff;
      transition: all 0.2s ease;
    }
    .form-group input:focus, .form-group select:focus {
      outline: none;
      border-color: #000;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .form-group input::placeholder {
      color: #999;
    }
    .form-row {
      display: flex;
      gap: 24px;
      margin-bottom: 32px;
    }
    .form-row .form-group {
      flex: 1;
      margin-bottom: 0;
    }
    .payment-methods {
      margin: 28px 0;
    }
    .payment-methods label {
      font-weight: 500;
      margin-right: 24px;
      font-size: 15px;
      cursor: pointer;
    }
    .order-summary {
      background: #fff;
      border-radius: 16px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      padding: 32px;
      position: sticky;
      top: 24px;
    }
    .order-summary h3 {
      font-size: 24px;
      font-weight: 600;
      margin-bottom: 24px;
      color: #111;
    }
    .order-items {
      margin-bottom: 24px;
    }
    .order-item {
      display: flex;
      gap: 16px;
      padding: 16px 0;
      border-bottom: 1px solid #eee;
    }
    .order-item img {
      width: 80px;
      height: 80px;
      border-radius: 8px;
      object-fit: cover;
    }
    .order-item-details {
      flex: 1;
    }
    .order-item-details .name {
      font-weight: 500;
      margin-bottom: 4px;
    }
    .order-item-details .meta {
      color: #666;
      font-size: 14px;
    }
    .order-item-details .price {
      font-weight: 600;
      margin-top: 8px;
    }
    .summary-row {
      display: flex;
      justify-content: space-between;
      margin-bottom: 12px;
      font-size: 15px;
      color: #666;
    }
    .summary-row.total {
      font-size: 18px;
      font-weight: 600;
      font-weight: 700;
      margin-top: 18px;
      border-top: 1px solid #eee;
      padding-top: 12px;
    }
    .place-order-btn {
      width: 100%;
      padding: 16px;
      background: #000;
      color: #fff;
      border: none;
      border-radius: 8px;
      font-size: 17px;
      font-weight: 700;
      margin-top: 24px;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
    }
    .payment-section {
      background: #fff;
      border-radius: 16px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      padding: 32px;
    }
    @media (max-width: 1024px) {
      .container {
        grid-template-columns: 1fr;
      }
      
      .order-summary {
        position: static;
      }
    }
    /* New styles for saved addresses */
    .saved-addresses {
      margin-bottom: 24px;
    }
    .address-option {
      border: 1px solid #eee;
      border-radius: 8px;
      padding: 16px;
      margin-bottom: 12px;
      cursor: pointer;
      transition: all 0.2s ease;
    }
    .address-option:hover {
      border-color: #000;
    }
    .address-option.selected {
      border-color: #000;
      background-color: #f9f9f9;
    }
    .address-option .address-type {
      font-size: 13px;
      color: #888;
      margin-bottom: 4px;
    }
    .address-option .address-details {
      font-size: 15px;
      line-height: 1.4;
    }
    .address-option .default-badge {
      display: inline-block;
      background: #000;
      color: #fff;
      font-size: 11px;
      padding: 2px 8px;
      border-radius: 12px;
      margin-bottom: 8px;
    }
    .address-actions {
      margin-top: 16px;
      display: flex;
      gap: 12px;
    }
    .address-actions button {
      background: none;
      border: none;
      color: #000;
      font-size: 14px;
      cursor: pointer;
      padding: 0;
      text-decoration: underline;
    }
    .new-address-btn {
      display: inline-flex;
      align-items: center;
      margin: 24px 0;
      padding: 12px 24px;
      background: #f8f8f8;
      border: 1px solid #e0e0e0;
      border-radius: 8px;
      color: #000;
      font-weight: 600;
      text-decoration: none;
      transition: all 0.2s ease;
    }
    .new-address-btn:hover {
      background: #f0f0f0;
      text-decoration: none;
    }
    .new-address-btn i {
      margin-right: 8px;
    }
    .address-form {
      background: #fff;
      padding: 32px;
      border-radius: 16px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.05);
      margin-top: 24px;
      display: none;
      opacity: 0;
      transition: opacity 0.3s ease;
    }
    .address-form.active {
      display: block;
      opacity: 1;
    }
    .edit-address-btn, .delete-address-btn {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      padding: 8px 16px;
      border-radius: 8px;
      font-size: 14px;
      text-decoration: none;
      transition: all 0.2s ease;
      border: 1px solid #e0e0e0;
      background: none;
      cursor: pointer;
    }
    .edit-address-btn {
      color: #2196f3;
      border-color: #2196f3;
    }
    .edit-address-btn:hover {
      background: rgba(33, 150, 243, 0.1);
    }
    .delete-address-btn {
      color: #f44336;
      border-color: #f44336;
    }
    .delete-address-btn:hover {
      background: rgba(244, 67, 54, 0.1);
    }
    .use-address-btn {
      background: #000;
      color: #fff;
      border: none;
      padding: 8px 16px;
      border-radius: 8px;
      cursor: pointer;
      font-size: 14px;
      transition: all 0.2s ease;
    }
    .use-address-btn:hover {
      background: #333;
    }
    .payment-methods {
      margin: 28px 0;
      display: flex;
      flex-direction: column;
      gap: 16px;
    }
    .payment-methods label {
      display: flex;
      align-items: center;
      gap: 12px;
      padding: 16px;
      border: 1px solid #eee;
      border-radius: 12px;
      cursor: pointer;
      transition: all 0.2s ease;
    }
    .payment-methods label:hover {
      border-color: #000;
      background: #f9f9f9;
    }
    .payment-methods input[type="radio"] {
      margin: 0;
    }
    .place-order-btn {
      width: 100%;
      padding: 16px;
      background: #000;
      color: #fff;
      border: none;
      border-radius: 8px;
      font-size: 17px;
      font-weight: 700;
      margin-top: 24px;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
      transition: all 0.2s ease;
    }
    .place-order-btn:hover {
      background: #333;
      transform: translateY(-1px);
    }
    .edit-form {
      display: none;
      margin-top: 16px;
      padding: 16px;
      background: #f8f8f8;
      border-radius: 8px;
      border: 1px solid #eee;
    }
    .edit-form.active {
      display: block;
    }
    .edit-form .form-group {
      margin-bottom: 16px;
    }
    .edit-form label {
      display: block;
      font-size: 14px;
      font-weight: 600;
      margin-bottom: 8px;
      color: #333;
    }
    .edit-form input,
    .edit-form select {
      width: 100%;
      padding: 12px;
      border-radius: 8px;
      border: 1px solid #e0e0e0;
      font-size: 14px;
      background: #fff;
    }
    .edit-form-actions {
      display: flex;
      gap: 12px;
      margin-top: 16px;
    }
    .edit-form-actions button {
      padding: 8px 16px;
      border-radius: 8px;
      font-size: 14px;
      cursor: pointer;
      transition: all 0.2s ease;
    }
    .save-edit-btn {
      background: #000;
      color: #fff;
      border: none;
    }
    .save-edit-btn:hover {
      background: #333;
    }
    .cancel-edit-btn {
      background: none;
      border: 1px solid #e0e0e0;
      color: #666;
    }
    .cancel-edit-btn:hover {
      background: #f0f0f0;
    }
  </style>
</head>
<body>
  <%- include('../partials/header') %>
  <div class="container">
    <div class="main-checkout">
      <form class="checkout-form" action="/checkout" method="POST">
      <h2>Shipping Address</h2>
        
        <div class="saved-addresses">
          <% if (addresses && addresses.length > 0) { %>
            <% addresses.forEach(address => { %>
              <div class="address-option <%= address.isDefault ? 'selected' : '' %>" data-address-id="<%= address._id %>">
                <input type="radio" name="selectedAddress" value="<%= address._id %>" 
                       id="address-<%= address._id %>" <%= address.isDefault ? 'checked' : '' %> style="display: none;">
                <% if (address.isDefault) { %>
                  <div class="default-badge">Default</div>
                <% } %>
                <div class="address-type">
                  <i class="bi bi-<%= address.addressType === 'home' ? 'house' : address.addressType === 'work' ? 'building' : 'geo-alt' %>"></i>
                  <%= address.addressType.charAt(0).toUpperCase() + address.addressType.slice(1) %> Address
      </div>
                <div class="address-details">
                  <div><%= address.fullName %></div>
                  <div><%= address.phone %></div>
                  <div><%= address.addressLine1 %></div>
                  <% if (address.addressLine2) { %>
                    <div><%= address.addressLine2 %></div>
                  <% } %>
                  <div><%= address.city %>, <%= address.state %> <%= address.zipCode %></div>
                  <div><%= address.country %></div>
      </div>
                <div class="address-actions">
                  <button type="button" class="use-address-btn" data-address-id="<%= address._id %>">
                    Use this address
                  </button>
                  <% if (!address.isDefault) { %>
                    <button type="button" class="edit-address-btn" 
                            data-address="<%= encodeURIComponent(JSON.stringify(address)) %>">
                      <i class="bi bi-pencil"></i> Edit
                    </button>
                    <form action="/profile/address/delete/<%= address._id %>" method="POST" class="d-inline delete-address-form">
                      <button type="submit" class="delete-address-btn">
                        <i class="bi bi-trash"></i> Delete
                      </button>
                    </form>
                  <% } %>
      </div>
      </div>
            <% }) %>
          <% } else { %>
            <p>No saved addresses found. Please add a new address below.</p>
          <% } %>
        </div>
      </form>

      <div class="payment-section">
        <h2>Payment Method</h2>
        <form id="checkoutForm" action="/order/create" method="POST">
          <div class="payment-methods">
            <label>
              <input type="radio" name="paymentMethod" value="cod" checked>
              <span>Cash on Delivery</span>
            </label>
            <label>
              <input type="radio" name="paymentMethod" value="card">
              <span>Credit/Debit Card</span>
            </label>
            <label>
              <input type="radio" name="paymentMethod" value="paypal">
              <span>PayPal</span>
            </label>
        </div>
          <input type="hidden" name="addressId" id="selectedAddressId">
          <button class="place-order-btn" type="submit" id="placeOrderBtn">
            Place Order <span style="font-size: 20px;">→</span>
          </button>
        </form>
      </div>
      </div>

    <div class="order-summary">
      <h3>Order Summary</h3>
      <div class="order-items">
        <% cart.items.forEach(item => { %>
          <div class="order-item">
            <img src="<%= item.product.images[0] %>" alt="<%= item.product.name %>">
            <div class="order-item-details">
              <div class="name"><%= item.product.name %></div>
              <div class="meta">Size: <%= item.size %> | Qty: <%= item.quantity %></div>
              <div class="price">$<%= (item.product.price * item.quantity).toFixed(2) %></div>
            </div>
          </div>
        <% }) %>
      </div>
      <div class="summary-row">
        <span>Subtotal</span>
        <span>$<%= cart.subtotal.toFixed(2) %></span>
      </div>
      <div class="summary-row">
        <span>Delivery Fee</span>
        <span style="color: #2ecc71; font-weight: 500;">Free</span>
      </div>
      <div class="summary-row total">
        <span>Total</span>
        <span>$<%= cart.subtotal.toFixed(2) %></span>
      </div>
    </div>
  </div>

  <%- include('../partials/footer') %>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Function to handle edit button click
      document.querySelectorAll('.edit-address-btn').forEach(button => {
        button.addEventListener('click', function() {
          try {
            const addressData = JSON.parse(decodeURIComponent(this.dataset.address));
            const addressOption = this.closest('.address-option');
            const addressDetails = addressOption.querySelector('.address-details');
            
            // Create edit form if it doesn't exist
            let editForm = addressOption.querySelector('.edit-form');
            if (!editForm) {
              editForm = document.createElement('div');
              editForm.className = 'edit-form';
              editForm.dataset.addressId = addressData._id;
              
              const formHtml = `
                <form class="edit-address-form">
                  <div class="form-group">
                    <label for="fullName-${addressData._id}">Full Name</label>
                    <input type="text" class="form-control" id="fullName-${addressData._id}" 
                           name="fullName" value="${addressData.fullName || ''}" required>
                  </div>
                  <div class="form-group">
                    <label for="phone-${addressData._id}">Phone Number</label>
                    <input type="tel" class="form-control" id="phone-${addressData._id}" 
                           name="phone" value="${addressData.phone || ''}" required>
                  </div>
                  <div class="form-group">
                    <label for="addressLine1-${addressData._id}">Address Line 1</label>
                    <input type="text" class="form-control" id="addressLine1-${addressData._id}" 
                           name="addressLine1" value="${addressData.addressLine1 || ''}" required>
                  </div>
                  <div class="form-group">
                    <label for="addressLine2-${addressData._id}">Address Line 2</label>
                    <input type="text" class="form-control" id="addressLine2-${addressData._id}" 
                           name="addressLine2" value="${addressData.addressLine2 || ''}">
                  </div>
                  <div class="form-group">
                    <label for="city-${addressData._id}">City</label>
                    <input type="text" class="form-control" id="city-${addressData._id}" 
                           name="city" value="${addressData.city || ''}" required>
                  </div>
                  <div class="form-group">
                    <label for="state-${addressData._id}">State/Province</label>
                    <input type="text" class="form-control" id="state-${addressData._id}" 
                           name="state" value="${addressData.state || ''}" required>
                  </div>
                  <div class="form-group">
                    <label for="zipCode-${addressData._id}">ZIP/Postal Code</label>
                    <input type="text" class="form-control" id="zipCode-${addressData._id}" 
                           name="zipCode" value="${addressData.zipCode || ''}" required>
                  </div>
                  <div class="form-group">
                    <label for="country-${addressData._id}">Country</label>
                    <select class="form-control" id="country-${addressData._id}" name="country" required>
                      <option value="US" ${(addressData.country === 'US') ? 'selected' : ''}>United States</option>
                      <option value="CA" ${(addressData.country === 'CA') ? 'selected' : ''}>Canada</option>
                      <option value="UK" ${(addressData.country === 'UK') ? 'selected' : ''}>United Kingdom</option>
                      <option value="AU" ${(addressData.country === 'AU') ? 'selected' : ''}>Australia</option>
                    </select>
                  </div>
                  <div class="form-group">
                    <label for="addressType-${addressData._id}">Address Type</label>
                    <select class="form-control" id="addressType-${addressData._id}" name="addressType">
                      <option value="home" ${(addressData.addressType === 'home') ? 'selected' : ''}>Home</option>
                      <option value="work" ${(addressData.addressType === 'work') ? 'selected' : ''}>Work</option>
                      <option value="other" ${(addressData.addressType === 'other') ? 'selected' : ''}>Other</option>
                    </select>
                  </div>
                  <div class="edit-form-actions">
                    <button type="submit" class="btn btn-primary save-edit-btn">Save Changes</button>
                    <button type="button" class="btn btn-secondary cancel-edit">Cancel</button>
                  </div>
                </form>
              `;
              
              editForm.innerHTML = formHtml;
              addressOption.appendChild(editForm);

              // Handle form submission
              const form = editForm.querySelector('form');
              form.addEventListener('submit', async function(e) {
                e.preventDefault();
                const formData = new FormData(this);
                
                try {
                  const response = await fetch(`/profile/address/edit/${addressData._id}`, {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(Object.fromEntries(formData)),
                    credentials: 'same-origin'
                  });

                  if (response.ok) {
                    window.location.reload();
                  } else {
                    const data = await response.json();
                    throw new Error(data.message || 'Failed to update address');
                  }
                } catch (error) {
                  console.error('Error:', error);
                  alert(error.message || 'Failed to update address. Please try again.');
                }
              });

              // Handle cancel button
              editForm.querySelector('.cancel-edit').addEventListener('click', function() {
                editForm.classList.remove('active');
                addressDetails.style.display = 'block';
              });
            }

            // Toggle edit form visibility
            editForm.classList.toggle('active');
            addressDetails.style.display = editForm.classList.contains('active') ? 'none' : 'block';
          } catch (error) {
            console.error('Error parsing address data:', error);
            alert('Error loading address data. Please try again.');
          }
        });
      });

      // Handle place order submission
      const checkoutForm = document.getElementById('checkoutForm');
      if (checkoutForm) {
        checkoutForm.addEventListener('submit', async function(e) {
          e.preventDefault();

          // Get selected address
          const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
          if (!selectedAddress) {
            Swal.fire({
              title: 'Error!',
              text: 'Please select a delivery address',
              icon: 'error',
              confirmButtonColor: '#000'
            });
            return;
          }

          // Update hidden address input
          document.getElementById('selectedAddressId').value = selectedAddress.value;

          // Show loading state
          Swal.fire({
            title: 'Processing Order...',
            text: 'Please wait while we process your order',
            allowOutsideClick: false,
            allowEscapeKey: false,
            showConfirmButton: false,
            didOpen: () => {
              Swal.showLoading();
            }
          });

          try {
            const formData = new FormData(this);
            const response = await fetch('/order/create', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(Object.fromEntries(formData)),
              credentials: 'same-origin'
            });

            if (response.ok) {
              const result = await response.json();
              
              // Show success message
              Swal.fire({
                title: 'Order Placed Successfully!',
                text: 'Thank you for your purchase. Your order has been confirmed!',
                icon: 'success',
                confirmButtonColor: '#000',
                allowOutsideClick: false,
                allowEscapeKey: false
              }).then((result) => {
                if (result.isConfirmed) {
                  // Redirect to orders page
                  window.location.href = '/profile/orders';
                }
              });
            } else {
              const errorData = await response.json();
              throw new Error(errorData.message || 'Failed to place order');
            }
          } catch (error) {
            console.error('Error:', error);
            Swal.fire({
              title: 'Error!',
              text: error.message || 'Failed to place order. Please try again.',
              icon: 'error',
              confirmButtonColor: '#000'
            });
          }
        });
      }

      // Handle address selection
      document.querySelectorAll('.address-option').forEach(option => {
        option.addEventListener('click', function() {
          // Remove selected class from all options
          document.querySelectorAll('.address-option').forEach(opt => {
            opt.classList.remove('selected');
          });
          // Add selected class to clicked option
          this.classList.add('selected');
          // Check the radio button
          const radio = this.querySelector('input[type="radio"]');
          if (radio) {
            radio.checked = true;
          }
        });
      });
    });
  </script>
</body>
</html> 