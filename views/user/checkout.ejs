<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Checkout - MotionHaus</title>
  <!-- Move Razorpay script here and add error handling -->
  <script>
    // Add error handler for script loading
    window.addEventListener('error', function(e) {
      if (e.target.src && e.target.src.includes('razorpay')) {
        console.error('[Debug] Failed to load Razorpay script:', e);
      }
    }, true);
  </script>
  <script src="https://checkout.razorpay.com/v1/checkout.js" 
          onerror="console.error('[Debug] Failed to load Razorpay script')"
          onload="console.log('[Debug] Razorpay script loaded successfully')"></script>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
  <style>
    body {
      background: #fff;
      color: #111;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
      margin: 0;
      padding: 0;
    }
    .container {
      max-width: 1400px;
      margin: 40px auto;
      padding: 0 24px;
      display: grid;
      grid-template-columns: 1fr 400px;
      gap: 40px;
      align-items: start;
    }
    .main-checkout {
      display: flex;
      flex-direction: column;
      gap: 24px;
    }
    .checkout-form {
      background: #fff;
      border-radius: 16px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      padding: 32px;
    }
    .checkout-form h2 {
      font-size: 24px;
      font-weight: 600;
      margin-bottom: 24px;
      color: #111;
    }
    .form-group {
      margin-bottom: 32px;
    }
    .form-group label {
      display: block;
      font-size: 15px;
      font-weight: 600;
      margin-bottom: 12px;
      color: #333;
    }
    .form-group input, .form-group select {
      width: 100%;
      padding: 16px;
      border-radius: 12px;
      border: 1px solid #e0e0e0;
      font-size: 16px;
      background: #fff;
      transition: all 0.2s ease;
    }
    .form-group input:focus, .form-group select:focus {
      outline: none;
      border-color: #000;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .form-group input::placeholder {
      color: #999;
    }
    .form-row {
      display: flex;
      gap: 24px;
      margin-bottom: 32px;
    }
    .form-row .form-group {
      flex: 1;
      margin-bottom: 0;
    }
    .payment-methods {
      margin: 28px 0;
    }
    .payment-methods label {
      font-weight: 500;
      margin-right: 24px;
      font-size: 15px;
      cursor: pointer;
    }
    .order-summary {
      background: #fff;
      border-radius: 16px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      padding: 32px;
      position: sticky;
      top: 24px;
    }
    .order-summary h3 {
      font-size: 24px;
      font-weight: 600;
      margin-bottom: 24px;
      color: #111;
    }
    .order-items {
      margin-bottom: 24px;
    }
    .order-item {
      display: flex;
      gap: 16px;
      padding: 16px 0;
      border-bottom: 1px solid #eee;
    }
    .order-item img {
      width: 80px;
      height: 80px;
      border-radius: 8px;
      object-fit: cover;
    }
    .order-item-details {
      flex: 1;
    }
    .order-item-details .name {
      font-weight: 500;
      margin-bottom: 4px;
    }
    .order-item-details .meta {
      color: #666;
      font-size: 14px;
    }
    .order-item-details .price {
      font-weight: 600;
      margin-top: 8px;
    }
    .summary-row {
      display: flex;
      justify-content: space-between;
      margin-bottom: 12px;
      font-size: 15px;
      color: #666;
    }
    .summary-row.total {
      font-size: 18px;
      font-weight: 600;
      font-weight: 700;
      margin-top: 18px;
      border-top: 1px solid #eee;
      padding-top: 12px;
    }
    .place-order-btn {
      width: 100%;
      padding: 16px;
      background: #000;
      color: #fff;
      border: none;
      border-radius: 8px;
      font-size: 17px;
      font-weight: 700;
      margin-top: 24px;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
    }
    .payment-section {
      background: #fff;
      border-radius: 16px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      padding: 32px;
    }
    @media (max-width: 1024px) {
      .container {
        grid-template-columns: 1fr;
      }
      
      .order-summary {
        position: static;
      }
    }
    /* New styles for saved addresses */
    .saved-addresses {
      margin-bottom: 24px;
    }
    .address-option {
      border: 1px solid #eee;
      border-radius: 8px;
      padding: 16px;
      margin-bottom: 12px;
      cursor: pointer;
      transition: all 0.2s ease;
    }
    .address-option:hover {
      border-color: #000;
    }
    .address-option.selected {
      border-color: #000;
      background-color: #f9f9f9;
    }
    .address-option .address-type {
      font-size: 13px;
      color: #888;
      margin-bottom: 4px;
    }
    .address-option .address-details {
      font-size: 15px;
      line-height: 1.4;
    }
    .address-option .default-badge {
      display: inline-block;
      background: #000;
      color: #fff;
      font-size: 11px;
      padding: 2px 8px;
      border-radius: 12px;
      margin-bottom: 8px;
    }
    .address-actions {
      margin-top: 16px;
      display: flex;
      gap: 12px;
    }
    .address-actions button {
      background: none;
      border: none;
      color: #000;
      font-size: 14px;
      cursor: pointer;
      padding: 0;
      text-decoration: underline;
    }
    .new-address-btn {
      display: inline-flex;
      align-items: center;
      margin: 24px 0;
      padding: 12px 24px;
      background: #f8f8f8;
      border: 1px solid #e0e0e0;
      border-radius: 8px;
      color: #000;
      font-weight: 600;
      text-decoration: none;
      transition: all 0.2s ease;
    }
    .new-address-btn:hover {
      background: #f0f0f0;
      text-decoration: none;
    }
    .new-address-btn i {
      margin-right: 8px;
    }
    .address-form {
      background: #fff;
      padding: 32px;
      border-radius: 16px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.05);
      margin-top: 24px;
      display: none;
      opacity: 0;
      transition: opacity 0.3s ease;
    }
    .address-form.active {
      display: block;
      opacity: 1;
    }
    .edit-address-btn, .delete-address-btn {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      padding: 8px 16px;
      border-radius: 8px;
      font-size: 14px;
      text-decoration: none;
      transition: all 0.2s ease;
      border: 1px solid #e0e0e0;
      background: none;
      cursor: pointer;
    }
    .edit-address-btn {
      color: #2196f3;
      border-color: #2196f3;
    }
    .edit-address-btn:hover {
      background: rgba(33, 150, 243, 0.1);
    }
    .delete-address-btn {
      color: #f44336;
      border-color: #f44336;
    }
    .delete-address-btn:hover {
      background: rgba(244, 67, 54, 0.1);
    }
    .use-address-btn {
      background: #000;
      color: #fff;
      border: none;
      padding: 8px 16px;
      border-radius: 8px;
      cursor: pointer;
      font-size: 14px;
      transition: all 0.2s ease;
    }
    .use-address-btn:hover {
      background: #333;
    }
    .payment-methods {
      margin: 28px 0;
      display: flex;
      flex-direction: column;
      gap: 16px;
    }
    .payment-methods label {
      display: flex;
      align-items: center;
      gap: 12px;
      padding: 16px;
      border: 1px solid #eee;
      border-radius: 12px;
      cursor: pointer;
      transition: all 0.2s ease;
    }
    .payment-methods label:hover {
      border-color: #000;
      background: #f9f9f9;
    }
    .payment-methods input[type="radio"] {
      margin: 0;
    }
    .place-order-btn {
      width: 100%;
      padding: 16px;
      background: #000;
      color: #fff;
      border: none;
      border-radius: 8px;
      font-size: 17px;
      font-weight: 700;
      margin-top: 24px;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
      transition: all 0.2s ease;
    }
    .place-order-btn:hover {
      background: #333;
      transform: translateY(-1px);
    }
    .edit-form {
      display: none;
      margin-top: 16px;
      padding: 16px;
      background: #f8f8f8;
      border-radius: 8px;
      border: 1px solid #eee;
    }
    .edit-form.active {
      display: block;
    }
    .edit-form .form-group {
      margin-bottom: 16px;
    }
    .edit-form label {
      display: block;
      font-size: 14px;
      font-weight: 600;
      margin-bottom: 8px;
      color: #333;
    }
    .edit-form input,
    .edit-form select {
      width: 100%;
      padding: 12px;
      border-radius: 8px;
      border: 1px solid #e0e0e0;
      font-size: 14px;
      background: #fff;
    }
    .edit-form-actions {
      display: flex;
      gap: 12px;
      margin-top: 16px;
    }
    .edit-form-actions button {
      padding: 8px 16px;
      border-radius: 8px;
      font-size: 14px;
      cursor: pointer;
      transition: all 0.2s ease;
    }
    .save-edit-btn {
      background: #000;
      color: #fff;
      border: none;
    }
    .save-edit-btn:hover {
      background: #333;
    }
    .cancel-edit-btn {
      background: none;
      border: 1px solid #e0e0e0;
      color: #666;
    }
    .cancel-edit-btn:hover {
      background: #f0f0f0;
    }
    .form-group {
      margin-bottom: 1.5rem;
    }
    .form-control {
      padding: 0.75rem;
      border: 1px solid #ddd;
      border-radius: 8px;
      transition: all 0.3s ease;
    }
    .form-control:focus {
      border-color: #000;
      box-shadow: 0 0 0 2px rgba(0,0,0,0.1);
    }
    .form-control.is-invalid {
      border-color: #dc3545;
      background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' fill='none' stroke='%23dc3545' viewBox='0 0 12 12'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
      background-repeat: no-repeat;
      background-position: right 0.75rem center;
      background-size: 1rem;
    }
    .form-control.is-valid {
      border-color: #28a745;
      background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='8' height='8' viewBox='0 0 8 8'%3e%3cpath fill='%2328a745' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e");
      background-repeat: no-repeat;
      background-position: right 0.75rem center;
      background-size: 1rem;
    }
    .invalid-feedback {
      display: none;
      color: #dc3545;
      font-size: 0.875rem;
      margin-top: 0.25rem;
    }
    .form-control.is-invalid ~ .invalid-feedback {
      display: block;
    }
    .checkbox-label {
      display: flex;
      align-items: center;
      cursor: pointer;
    }
    .checkbox-text {
      margin-left: 0.5rem;
    }
    .form-actions {
      margin-top: 2rem;
      display: flex;
      gap: 1rem;
    }
    .coupon-section {
      margin: 20px 0;
      padding-top: 20px;
      border-top: 1px solid #eee;
    }
    .coupon-input {
      display: flex;
      gap: 10px;
      margin-bottom: 16px;
    }
    .coupon-input input {
      flex: 1;
      padding: 12px;
      border: 1px solid #ddd;
      border-radius: 8px;
      font-size: 14px;
      transition: all 0.2s ease;
    }
    .coupon-input input:focus {
      outline: none;
      border-color: #000;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .coupon-input input:disabled {
      background: #f8f8f8;
      cursor: not-allowed;
    }
    #applyCouponBtn {
      padding: 0 20px;
      background: #000;
      color: #fff;
      border: none;
      border-radius: 8px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
    }
    #applyCouponBtn:hover {
      background: #333;
    }
    #applyCouponBtn.remove-coupon {
      background: #e74c3c;
    }
    #applyCouponBtn.remove-coupon:hover {
      background: #c0392b;
    }
    #couponMessage {
      font-size: 14px;
      margin-bottom: 16px;
      padding: 8px;
      border-radius: 4px;
      display: none;
    }
    .summary-row.hidden {
      display: none;
    }
    .summary-row {
      display: flex;
    }
  </style>
</head>
<body>
  <%- include('../partials/header') %>
  <div class="container">
    <div class="main-checkout">
      <div class="checkout-form">
        <h2>Shipping Address</h2>
        
        <div class="saved-addresses">
          <% if (addresses && addresses.length > 0) { %>
            <% addresses.forEach(address => { %>
              <div class="address-option <%= address.isDefault ? 'selected' : '' %>" data-address-id="<%= address._id %>">
                <input type="radio" name="selectedAddress" value="<%= address._id %>" 
                       id="address-<%= address._id %>" <%= address.isDefault ? 'checked' : '' %> style="display: none;">
                <% if (address.isDefault) { %>
                  <div class="default-badge">Default</div>
                <% } %>
                <div class="address-type">
                  <i class="bi bi-<%= address.addressType === 'home' ? 'house' : address.addressType === 'work' ? 'building' : 'geo-alt' %>"></i>
                  <%= address.addressType.charAt(0).toUpperCase() + address.addressType.slice(1) %> Address
                </div>
                <div class="address-details">
                  <div><%= address.fullName %></div>
                  <div><%= address.phone %></div>
                  <div><%= address.addressLine1 %></div>
                  <% if (address.addressLine2) { %>
                    <div><%= address.addressLine2 %></div>
                  <% } %>
                  <div><%= address.city %>, <%= address.state %> <%= address.zipCode %></div>
                  <div><%= address.country %></div>
                </div>
                <div class="address-actions">
                  <button type="button" class="use-address-btn" data-address-id="<%= address._id %>">
                    Use this address
                  </button>
                  <% if (!address.isDefault) { %>
                    <button type="button" class="make-default-btn" data-address-id="<%= address._id %>">
                      <i class="bi bi-star"></i> Make Default
                    </button>
                    <button type="button" class="edit-address-btn" 
                            data-address="<%= encodeURIComponent(JSON.stringify(address)) %>">
                      <i class="bi bi-pencil"></i> Edit
                    </button>
                    <form action="/profile/address/delete/<%= address._id %>" method="POST" class="d-inline delete-address-form">
                      <button type="submit" class="delete-address-btn">
                        <i class="bi bi-trash"></i> Delete
                      </button>
                    </form>
                  <% } %>
                </div>
              </div>
            <% }) %>
          <% } else { %>
            <p>No saved addresses found. Please add a new address below.</p>
          <% } %>
        </div>
        
        <!-- Add New Address Button -->
        <button type="button" id="addNewAddressBtn" class="new-address-btn">
          <i class="bi bi-plus-circle"></i> Add New Address
        </button>
        
        <!-- New Address Form (Hidden by default) -->
        <div id="newAddressForm" class="address-form">
          <h3>Add New Address</h3>
          <form id="addAddressForm" action="/profile/address/add" method="POST" class="needs-validation" novalidate>
            <div class="form-group">
              <label for="fullName">Full Name</label>
              <input 
                type="text" 
                id="fullName" 
                name="fullName" 
                class="form-control"
                required 
                pattern="^[A-Za-z\s]{2,50}$"
                title="Name should contain only letters and spaces (2-50 characters)"
                oninput="validateField(this)"
              >
              <div class="invalid-feedback">Please enter a valid name (2-50 characters, letters only)</div>
            </div>
            <div class="form-group">
              <label for="phone">Phone Number</label>
              <input 
                type="tel" 
                id="phone" 
                name="phone" 
                class="form-control"
                required 
                pattern="^[0-9]{10,15}$"
                title="Enter a valid phone number (10-15 digits, numbers only)"
                oninput="this.value = this.value.replace(/[^0-9]/g, ''); validateField(this)"
              >
              <div class="invalid-feedback">Please enter a valid phone number (10-15 digits, numbers only)</div>
            </div>
            <div class="form-group">
              <label for="addressLine1">Address Line 1</label>
              <input 
                type="text" 
                id="addressLine1" 
                name="addressLine1" 
                class="form-control"
                required 
                minlength="5" 
                maxlength="100"
                title="Address should be between 5 and 100 characters"
                oninput="validateField(this)"
              >
              <div class="invalid-feedback">Please enter a valid address (minimum 5 characters)</div>
            </div>
            <div class="form-group">
              <label for="addressLine2">Address Line 2 (Optional)</label>
              <input 
                type="text" 
                id="addressLine2" 
                name="addressLine2" 
                class="form-control"
                maxlength="100"
                title="Optional additional address information"
              >
            </div>
            <div class="form-row">
              <div class="form-group">
                <label for="city">City</label>
                <input 
                  type="text" 
                  id="city" 
                  name="city" 
                  class="form-control"
                  required 
                  pattern="^[A-Za-z\s]{2,50}$"
                  title="City should contain only letters and spaces (2-50 characters)"
                  oninput="validateField(this)"
                >
                <div class="invalid-feedback">Please enter a valid city name (letters only)</div>
              </div>
              <div class="form-group">
                <label for="state">State/Province</label>
                <input 
                  type="text" 
                  id="state" 
                  name="state" 
                  class="form-control"
                  required 
                  pattern="^[A-Za-z\s]{2,50}$"
                  title="State should contain only letters and spaces (2-50 characters)"
                  oninput="validateField(this)"
                >
                <div class="invalid-feedback">Please enter a valid state/province name (letters only)</div>
              </div>
            </div>
            <div class="form-row">
              <div class="form-group">
                <label for="zipCode">ZIP/Postal Code</label>
                <input 
                  type="text" 
                  id="zipCode" 
                  name="zipCode" 
                  class="form-control"
                  required 
                  pattern="^[0-9A-Za-z\s-]{3,10}$"
                  title="ZIP code should be 3-10 characters"
                  oninput="validateField(this)"
                >
                <div class="invalid-feedback">Please enter a valid ZIP/postal code (3-10 characters)</div>
              </div>
              <div class="form-group">
                <label for="country">Country</label>
                <select 
                  id="country" 
                  name="country" 
                  class="form-control"
                  required
                  onchange="validateField(this)"
                >
                  <option value="" disabled selected>Select a country</option>
                  <option value="US">United States</option>
                  <option value="CA">Canada</option>
                  <option value="UK">United Kingdom</option>
                  <option value="AU">Australia</option>
                   <option value="IND">India</option>
                </select>
                <div class="invalid-feedback">Please select a country</div>
              </div>
            </div>
            <div class="form-group">
              <label for="addressType">Address Type</label>
              <select 
                id="addressType" 
                name="addressType" 
                class="form-control"
                required
                onchange="validateField(this)"
              >
                <option value="" disabled selected>Select address type</option>
                <option value="home">Home</option>
                <option value="work">Work</option>
                <option value="other">Other</option>
              </select>
              <div class="invalid-feedback">Please select an address type</div>
            </div>
            <div class="form-group">
              <label class="checkbox-label">
                <input type="checkbox" name="isDefault" id="isDefault">
                <span class="checkbox-text">Set as default address</span>
              </label>
            </div>
            <div class="form-actions">
              <button type="submit" class="save-edit-btn">Save Address</button>
              <button type="button" id="cancelNewAddressBtn" class="cancel-edit-btn">Cancel</button>
            </div>
          </form>
        </div>
      </div>

      <div class="payment-section">
        <h2>Payment Method</h2>
        <form id="checkoutForm" method="POST">
          <div class="payment-methods">
            <label>
              <input type="radio" name="paymentMethod" value="cod" checked>
              <span>Cash on Delivery</span>
              <small style="display: block; color: #2ecc71; margin-top: 4px;">Available</small>
            </label>
            <label>
              <input type="radio" name="paymentMethod" value="wallet">
              <span>Pay with Wallet</span>
              <small style="display: block; margin-top: 4px;" class="<%= user.wallet?.balance >= cart.subtotal ? 'text-success' : 'text-danger' %>">
                Balance: ₹<%= Number(user.wallet?.balance || 0).toFixed(2) %>
                <% if (!user.wallet?.balance || user.wallet.balance < cart.subtotal) { %>
                  (Insufficient Balance)
                <% } %>
              </small>
            </label>
            <label>
             <input type="radio" name="paymentMethod" value="razorpay">
              <span>Pay with Razorpay</span>
            </label>
          </div>
          <input type="hidden" name="addressId" id="selectedAddressId">
          <!-- Add hidden input for total and discount -->
          <input type="hidden" name="finalAmount" id="finalAmountInput" value="<%= (cart.subtotal - (cart.discount || 0)).toFixed(2) %>">
          <input type="hidden" name="discountAmount" id="discountAmountInput" value="<%= (cart.discount || 0).toFixed(2) %>">
          <% if (cart && cart.items && cart.items.length > 0) { %>
            <button class="place-order-btn" type="submit" id="placeOrderBtn">
              Place Order (Cash on Delivery) <span style="font-size: 20px;">→</span>
            </button>
          <% } else { %>
            <div class="empty-cart-message" style="text-align: center; padding: 20px; background: #f8f8f8; border-radius: 8px; margin-top: 20px;">
              <p style="font-size: 16px; color: #e74c3c; margin-bottom: 15px;">Your cart is empty. Please add items to your cart before placing an order.</p>
              <a href="/products" class="continue-shopping-btn" style="display: inline-block; padding: 12px 24px; background: #000; color: #fff; text-decoration: none; border-radius: 8px; font-weight: 600;">
                Continue Shopping
              </a>
            </div>
          <% } %>
        </form>
      </div>
    </div>

    <div class="order-summary">
      <h3>Order Summary</h3>
      <div class="order-items">
        <% if (cart && cart.items && cart.items.length > 0) { %>
          <% cart.items.forEach(item => { %>
            <% if (item.product && !item.product.isBlocked) { %>
              <div class="order-item">
                <img src="<%= item.product.images[0] %>" alt="<%= item.product.name %>">
                <div class="order-item-details">
                  <div class="name"><%= item.product.name %></div>
                  <div class="meta">Size: <%= item.size %> | Qty: <%= item.quantity %></div>
                  <% 
                    const stockAvailable = item.product.sizes.find(s => s.size === parseInt(item.size))?.quantity || 0;
                    const isOutOfStock = stockAvailable < item.quantity;
                    const originalTotal = item.product.originalPrice * item.quantity;
                    const discountedTotal = item.product.discountedPrice * item.quantity;
                    const hasOffer = item.product.bestOffer;
                  %>
                  <div class="stock-status <%= isOutOfStock ? 'out-of-stock' : 'in-stock' %>">
                    <% if (isOutOfStock) { %>
                      <span style="color: #e74c3c;">Out of Stock (Only <%= stockAvailable %> available)</span>
                    <% } else { %>
                      <span style="color: #2ecc71;">In Stock (<%= stockAvailable %> available)</span>
                    <% } %>
                  </div>
                  <div class="price">
                    <% if (hasOffer) { %>
                      <span style="text-decoration: line-through; color: #999; margin-right: 8px;">₹<%= originalTotal.toFixed(2) %></span>
                      <span style="color: #2ecc71;">₹<%= discountedTotal.toFixed(2) %></span>
                      <div style="font-size: 0.9em; color: #2ecc71;">
                        (<%= item.product.bestOffer.discount %>% off - <%= item.product.bestOffer.name %>)
                      </div>
                    <% } else { %>
                      ₹<%= originalTotal.toFixed(2) %>
                    <% } %>
                  </div>
                </div>
              </div>
            <% } %>
          <% }) %>
        <% } else { %>
          <div class="empty-cart-message">
            <p>Your cart is empty. Please add items to continue.</p>
            <a href="/products" class="continue-shopping-btn">Continue Shopping</a>
          </div>
        <% } %>
      </div>
      <% if (cart && cart.items && cart.items.length > 0) { %>
        <!-- Add Coupon Section -->
        <div class="coupon-section" style="margin: 20px 0; padding-top: 20px; border-top: 1px solid #eee;">
          <div class="coupon-input" style="display: flex; gap: 10px; margin-bottom: 16px;">
            <input type="text" id="couponCode" placeholder="Enter coupon code" style="flex: 1; padding: 12px; border: 1px solid #ddd; border-radius: 8px; font-size: 14px;" 
                   value="<%= cart.coupon ? cart.couponCode : '' %>" <%= cart.coupon ? 'disabled' : '' %>>
            <button id="applyCouponBtn" style="padding: 0 20px; background: #000; color: #fff; border: none; border-radius: 8px; font-weight: 600; cursor: pointer;" 
                    class="<%= cart.coupon ? 'remove-coupon' : '' %>">
              <%= cart.coupon ? 'Remove' : 'Apply' %>
            </button>
          </div>
          <div id="couponMessage" style="font-size: 14px; margin-bottom: 16px; display: none;"></div>
        </div>

        <div class="summary-row">
          <span>Subtotal</span>
          <span>
            <% if (cart.hasOffer) { %>
              <span style="text-decoration: line-through; color: #999; margin-right: 8px;">₹<%= cart.subtotal.toFixed(2) %></span>
              <span>₹<%= (cart.subtotal - cart.discount).toFixed(2) %></span>
            <% } else { %>
              ₹<%= cart.subtotal.toFixed(2) %>
            <% } %>
          </span>
        </div>
        <% if (cart.hasOffer) { %>
          <div class="summary-row">
            <span>Offer Discount</span>
            <span style="color: #2ecc71;">-₹<%= cart.discount.toFixed(2) %></span>
          </div>
        <% } %>
        <% if (cart.coupon) { %>
          <div class="summary-row">
            <span>Coupon Discount</span>
            <span style="color: #2ecc71;">-₹<%= cart.couponDiscount.toFixed(2) %></span>
          </div>
        <% } %>
        <div class="summary-row">
          <span>Delivery Fee</span>
          <span style="color: #2ecc71; font-weight: 500;">Free</span>
        </div>
        <div class="summary-row total">
          <span>Total</span>
          <span>₹<%= cart.finalAmount.toFixed(2) %></span>
        </div>
      <% } %>
    </div>
  </div>

  <%- include('../partials/footer') %>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
    // Initialize cart data
    window.CART_DATA = {
      items: JSON.parse('<%- JSON.stringify(cart.items || []) %>'),
      subtotal: Number('<%= cart.subtotal || 0 %>'),
      discount: Number('<%= cart.discount || 0 %>')
    };

    document.addEventListener('DOMContentLoaded', function() {
      // Function to handle edit button click
      document.querySelectorAll('.edit-address-btn').forEach(button => {
        button.addEventListener('click', function() {
          try {
            const addressData = JSON.parse(decodeURIComponent(this.dataset.address));
            const addressOption = this.closest('.address-option');
            const addressDetails = addressOption.querySelector('.address-details');
            
            // Create edit form if it doesn't exist
            let editForm = addressOption.querySelector('.edit-form');
            if (!editForm) {
              editForm = document.createElement('div');
              editForm.className = 'edit-form';
              editForm.dataset.addressId = addressData._id;
              
              const formHtml = `
                <form class="edit-address-form">
                  <div class="form-group">
                    <label for="fullName-${addressData._id}">Full Name</label>
                    <input type="text" class="form-control" id="fullName-${addressData._id}" 
                           name="fullName" value="${addressData.fullName || ''}" required>
                  </div>
                  <div class="form-group">
                    <label for="phone-${addressData._id}">Phone Number</label>
                    <input type="tel" class="form-control" id="phone-${addressData._id}" 
                           name="phone" value="${addressData.phone || ''}" required>
                  </div>
                  <div class="form-group">
                    <label for="addressLine1-${addressData._id}">Address Line 1</label>
                    <input type="text" class="form-control" id="addressLine1-${addressData._id}" 
                           name="addressLine1" value="${addressData.addressLine1 || ''}" required>
                  </div>
                  <div class="form-group">
                    <label for="addressLine2-${addressData._id}">Address Line 2</label>
                    <input type="text" class="form-control" id="addressLine2-${addressData._id}" 
                           name="addressLine2" value="${addressData.addressLine2 || ''}">
                  </div>
                  <div class="form-group">
                    <label for="city-${addressData._id}">City</label>
                    <input type="text" class="form-control" id="city-${addressData._id}" 
                           name="city" value="${addressData.city || ''}" required>
                  </div>
                  <div class="form-group">
                    <label for="state-${addressData._id}">State/Province</label>
                    <input type="text" class="form-control" id="state-${addressData._id}" 
                           name="state" value="${addressData.state || ''}" required>
                  </div>
                  <div class="form-group">
                    <label for="zipCode-${addressData._id}">ZIP/Postal Code</label>
                    <input type="text" class="form-control" id="zipCode-${addressData._id}" 
                           name="zipCode" value="${addressData.zipCode || ''}" required>
                  </div>
                  <div class="form-group">
                    <label for="country-${addressData._id}">Country</label>
                    <select class="form-control" id="country-${addressData._id}" name="country" required>
                      <option value="US" ${(addressData.country === 'US') ? 'selected' : ''}>United States</option>
                      <option value="CA" ${(addressData.country === 'CA') ? 'selected' : ''}>Canada</option>
                      <option value="UK" ${(addressData.country === 'UK') ? 'selected' : ''}>United Kingdom</option>
                      <option value="AU" ${(addressData.country === 'AU') ? 'selected' : ''}>Australia</option>
                    </select>
                  </div>
                  <div class="form-group">
                    <label for="addressType-${addressData._id}">Address Type</label>
                    <select class="form-control" id="addressType-${addressData._id}" name="addressType">
                      <option value="home" ${(addressData.addressType === 'home') ? 'selected' : ''}>Home</option>
                      <option value="work" ${(addressData.addressType === 'work') ? 'selected' : ''}>Work</option>
                      <option value="other" ${(addressData.addressType === 'other') ? 'selected' : ''}>Other</option>
                    </select>
                  </div>
                  <div class="edit-form-actions">
                    <button type="submit" class="btn btn-primary save-edit-btn">Save Changes</button>
                    <button type="button" class="btn btn-secondary cancel-edit">Cancel</button>
                  </div>
                </form>
              `;
              
              editForm.innerHTML = formHtml;
              addressOption.appendChild(editForm);

              // Handle form submission
              const form = editForm.querySelector('form');
              form.addEventListener('submit', async function(e) {
                e.preventDefault();
                const formData = new FormData(this);
                
                try {
                  const response = await fetch(`/profile/address/edit/${addressData._id}`, {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(Object.fromEntries(formData)),
                    credentials: 'same-origin'
                  });

                  if (response.ok) {
                    window.location.reload();
                  } else {
                    const data = await response.json();
                    throw new Error(data.message || 'Failed to update address');
                  }
                } catch (error) {
                  console.error('Error:', error);
                  alert(error.message || 'Failed to update address. Please try again.');
                }
              });

              // Handle cancel button
              editForm.querySelector('.cancel-edit').addEventListener('click', function() {
                editForm.classList.remove('active');
                addressDetails.style.display = 'block';
              });
            }

            // Toggle edit form visibility
            editForm.classList.toggle('active');
            addressDetails.style.display = editForm.classList.contains('active') ? 'none' : 'block';
          } catch (error) {
            console.error('Error parsing address data:', error);
            alert('Error loading address data. Please try again.');
          }
        });
      });

      // Update place order button text based on payment method
      const paymentMethodInputs = document.querySelectorAll('input[name="paymentMethod"]');
      const placeOrderBtn = document.getElementById('placeOrderBtn');

      paymentMethodInputs.forEach(input => {
        input.addEventListener('change', function() {
          if (this.value === 'cod') {
            placeOrderBtn.innerHTML = 'Place Order (Cash on Delivery) <span style="font-size: 20px;">→</span>';
          } else if (this.value === 'razorpay') {
            placeOrderBtn.innerHTML = 'Pay with Razorpay <span style="font-size: 20px;">→</span>';
          } else if (this.value === 'wallet') {
            placeOrderBtn.innerHTML = 'Pay with Wallet <span style="font-size: 20px;">→</span>';
          }
        });
      });

      // Handle place order submission
      const checkoutForm = document.getElementById('checkoutForm');
      if (checkoutForm) {
        checkoutForm.addEventListener('submit', async function(e) {
          e.preventDefault();

          // Get selected address
          const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
          if (!selectedAddress) {
            Swal.fire({
              title: 'Error!',
              text: 'Please select a delivery address',
              icon: 'error',
              confirmButtonColor: '#000'
            });
            return;
          }

          // Check for out of stock items
          const outOfStockItems = document.querySelectorAll('.stock-status.out-of-stock');
          if (outOfStockItems.length > 0) {
            Swal.fire({
              title: 'Out of Stock Items',
              text: 'Some items in your cart are out of stock. Please remove them or reduce quantity before placing your order.',
              icon: 'error',
              confirmButtonColor: '#000'
            });
            return;
          }

          // Update hidden address input
          document.getElementById('selectedAddressId').value = selectedAddress.value;

          // Get selected payment method
          const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked').value;

          try {
            const formData = new FormData(this);
            const orderData = {
              ...Object.fromEntries(formData)
            };

            if (paymentMethod === 'cod' || paymentMethod === 'wallet') {
              // Handle COD or wallet payment
              const response = await fetch('/order/create', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify(orderData),
                credentials: 'same-origin'
              });

              const result = await response.json();
              if (result.success) {
                window.location.href = `/order/success/${result.order._id}`;
              } else {
                throw new Error(result.message || 'Failed to place order');
              }
              return;  // Important: Return here to prevent executing Razorpay code
            }

            // Handle Razorpay payment
            if (paymentMethod === 'razorpay') {
              // Calculate final amounts
              const finalAmount = CART_DATA.subtotal - CART_DATA.discount;
              const finalAmountInPaise = Math.round(finalAmount * 100);
              
              console.log('[Debug] Payment calculation:', {
                subtotal: CART_DATA.subtotal,
                discount: CART_DATA.discount,
                finalAmount,
                finalAmountInPaise
              });

              // Create Razorpay order
              const orderPayload = {
                ...orderData,
                amount: finalAmountInPaise,
                amountInRupees: finalAmount,
                totalAmount: finalAmount,
                originalAmount: CART_DATA.subtotal,
                discountAmount: CART_DATA.discount,
                items: CART_DATA.items.map(item => {
                  const itemSubtotal = item.product.price * item.quantity;
                  const discountRatio = CART_DATA.discount > 0 ? CART_DATA.discount / CART_DATA.subtotal : 0;
                  const itemDiscount = Math.round(itemSubtotal * discountRatio * 100) / 100;
                  const finalItemPrice = Math.round((itemSubtotal - itemDiscount) * 100) / 100;
                  
                  return {
                    ...item,
                    originalPrice: item.product.price,
                    price: finalItemPrice / item.quantity, // Per unit price after discount
                    discountAmount: itemDiscount
                  };
                })
              };

              const createOrderResponse = await fetch('/order/create-razorpay-order', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify(orderPayload),
                credentials: 'same-origin'
              });

              const razorpayOrder = await createOrderResponse.json();
              if (!razorpayOrder.success) {
                throw new Error(razorpayOrder.message || 'Failed to create Razorpay order');
              }

              // Configure Razorpay options
              const options = {
                key: '<%= process.env.RAZORPAY_KEY_ID %>',
                amount: finalAmountInPaise,
                currency: 'INR',
                name: 'MotionHaus',
                description: `Total: ₹${finalAmount.toFixed(2)} ${CART_DATA.discount > 0 ? `(Original: ₹${CART_DATA.subtotal.toFixed(2)}, You Save: ₹${CART_DATA.discount.toFixed(2)})` : ''}`,
                order_id: razorpayOrder.orderId,
                prefill: {
                  name: orderData.fullName || '',
                  email: orderData.email || '',
                  contact: orderData.phone || ''
                },
                notes: {
                  orderID: razorpayOrder.orderId,
                  originalAmount: CART_DATA.subtotal,
                  discountAmount: CART_DATA.discount,
                  finalAmount: finalAmount,
                  amountInPaise: finalAmountInPaise
                },
                theme: {
                  color: '#000'
                },
                handler: async function(response) {
                  try {
                    // Show processing message
                    Swal.fire({
                      title: 'Processing Payment...',
                      text: 'Please wait while we verify your payment',
                      allowOutsideClick: false,
                      allowEscapeKey: false,
                      showConfirmButton: false,
                      didOpen: () => {
                        Swal.showLoading();
                      }
                    });

                    const verificationData = {
                      razorpay_order_id: response.razorpay_order_id,
                      razorpay_payment_id: response.razorpay_payment_id,
                      razorpay_signature: response.razorpay_signature,
                      orderID: razorpayOrder.orderId
                    };
                    
                    const verifyResponse = await fetch('/order/verify-payment', {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      credentials: 'same-origin',
                      body: JSON.stringify(verificationData)
                    });

                    const result = await verifyResponse.json();
                    if (!verifyResponse.ok || !result.success) {
                      throw new Error(result.message || 'Payment verification failed');
                    }

                    // Close processing message and redirect
                    Swal.close();
                    window.location.href = `/order/success/${result.orderId}`;
                  } catch (error) {
                    console.error('[Debug] Payment verification error:', error);
                    await handlePaymentError(error, {
                      orderID: razorpayOrder.orderId,
                      razorpayOrderId: razorpayOrder.orderId
                    });
                  }
                },
                modal: {
                  backdropClose: false,
                  escape: false,
                  handleBack: true,
                  confirm_close: true,
                  ondismiss: async function() {
                    try {
                      await handlePaymentCancellation({
                        orderID: razorpayOrder.orderId,
                        razorpayOrderId: razorpayOrder.orderId
                      });
                    } catch (error) {
                      console.error('[Debug] Error in modal dismiss:', error);
                      window.location.href = `/order/failed/${razorpayOrder.orderId}?error=${encodeURIComponent('Payment cancelled')}`;
                    }
                  }
                }
              };

              // Create and open Razorpay instance
              const rzp = new Razorpay(options);
              rzp.on('payment.failed', async function(response) {
                await handlePaymentError(response.error, {
                  orderID: razorpayOrder.orderId,
                  razorpayOrderId: razorpayOrder.orderId
                });
              });
              rzp.open();
            }
          } catch (error) {
            console.error('[Debug] Error:', error);
            Swal.fire({
              title: 'Order Error',
              text: error.message || 'Failed to process your order',
              icon: 'error',
              confirmButtonColor: '#000'
            });
          }
        });
      }

      // Handle Make Default functionality
      document.querySelectorAll('.make-default-btn').forEach(button => {
        button.addEventListener('click', async function() {
          const addressId = this.dataset.addressId;
          
          try {
            const response = await fetch(`/profile/address/set-default/${addressId}`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              credentials: 'same-origin'
            });
            
            if (response.ok) {
              // Reload page to update default status
              window.location.reload();
            } else {
              const data = await response.json();
              throw new Error(data.message || 'Failed to set default address');
            }
          } catch (error) {
            console.error('Error:', error);
            alert(error.message || 'Failed to set default address. Please try again.');
          }
        });
      });

      function validateField(field) {
        // Remove existing validation classes
        field.classList.remove('is-valid', 'is-invalid');
        
        if (field.checkValidity()) {
          field.classList.add('is-valid');
          return true;
        } else {
          field.classList.add('is-invalid');
          return false;
        }
      }

      // Update the payment handler functions
      async function handlePaymentError(error, order) {
        console.error('[Debug] Payment error:', error);
        console.log('[Debug] Order data:', order);
        try {
          // Show error message to user
          await Swal.fire({
            title: 'Payment Failed',
            text: error.description || error.message || 'Your payment could not be processed',
            icon: 'error',
            confirmButtonColor: '#000'
          });

          if (!order.orderID) {
            console.error('[Debug] No orderID found in:', order);
            throw new Error('Order ID not found');
          }

          // Handle the failed payment in backend
          const response = await fetch('/order/payment-failed', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              orderID: order.orderID,
              razorpayOrderId: order.razorpayOrderId,
              error: error.description || error.message || 'Payment failed'
            }),
            credentials: 'same-origin'
          });

          if (!response.ok) {
            throw new Error('Failed to handle payment failure on server');
          }

          const result = await response.json();
          console.log('[Debug] Payment failure handled:', result);

          // Use the orderID from the server response if available, otherwise use the original orderID
          const finalOrderId = result.orderId || order.orderID;
          
          // Redirect to failed order page with both order ID and error message
          window.location.href = `/order/failed/${finalOrderId}?error=${encodeURIComponent(error.description || error.message || 'Payment failed')}`;
        } catch (handlingError) {
          console.error('[Debug] Error while handling payment failure:', handlingError);
          // If we have an orderID, use it, otherwise mark as unknown
          const fallbackOrderId = order.orderID || 'unknown';
          window.location.href = `/order/failed/${fallbackOrderId}?error=${encodeURIComponent('Error processing payment failure')}`;
        }
      }

      async function handlePaymentCancellation(order) {
        console.log('[Debug] Handling payment cancellation', order);
        try {
          // Show cancellation message
          await Swal.fire({
            title: 'Payment Cancelled',
            text: 'You have cancelled the payment',
            icon: 'info',
            confirmButtonColor: '#000'
          });

          if (!order.orderID) {
            console.error('[Debug] No orderID found in:', order);
            throw new Error('Order ID not found');
          }

          // Handle the cancellation in backend
          const response = await fetch('/order/cancel-razorpay-order', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              orderID: order.orderID,
              razorpayOrderId: order.razorpayOrderId
            }),
            credentials: 'same-origin'
          });

          if (!response.ok) {
            throw new Error('Failed to handle cancellation on server');
          }

          const result = await response.json();
          console.log('[Debug] Cancellation handled:', result);

          // Redirect to failed order page with cancellation message
          window.location.href = `/order/failed/${order.orderID}?error=${encodeURIComponent('Payment cancelled by user')}`;
        } catch (error) {
          console.error('[Debug] Error in cancellation handler:', error);
          window.location.href = `/order/failed/${order.orderID || 'unknown'}?error=${encodeURIComponent('Error while cancelling payment')}`;
        }
      }

      // Coupon functionality
      const applyCouponBtn = document.getElementById('applyCouponBtn');
      const couponInput = document.getElementById('couponCode');
      const couponMessage = document.getElementById('couponMessage');
      const couponDiscount = document.getElementById('couponDiscount');
      const discountAmount = document.getElementById('discountAmount');
      const finalTotal = document.getElementById('finalTotal');
      const originalTotal = Number('<%= cart?.subtotal || 0 %>');

      if (applyCouponBtn) {
        applyCouponBtn.addEventListener('click', async function() {
          if (this.classList.contains('remove-coupon')) {
            try {
              const response = await fetch('/cart/remove-coupon', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                }
              });

              const data = await response.json();

              if (data.success) {
                showCouponMessage('Coupon removed successfully', 'success');
                resetCouponUI();
              }
            } catch (error) {
              showCouponMessage('Failed to remove coupon. Please try again.', 'error');
            }
            return;
          }

          const code = couponInput.value.trim();
          if (!code) {
            showCouponMessage('Please enter a coupon code', 'error');
            return;
          }

          try {
            const response = await fetch('/cart/apply-coupon', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ code })
            });

            const data = await response.json();

            if (data.success) {
              showCouponMessage(data.message, 'success');
              updateOrderSummary(data.discount);
              applyCouponBtn.textContent = 'Remove';
              applyCouponBtn.classList.add('remove-coupon');
              couponInput.disabled = true;
            } else {
              showCouponMessage(data.message, 'error');
            }
          } catch (error) {
            showCouponMessage('Failed to apply coupon. Please try again.', 'error');
          }
        });
      }

      function showCouponMessage(message, type) {
        couponMessage.textContent = message;
        couponMessage.style.display = 'block';
        couponMessage.style.color = type === 'error' ? '#e74c3c' : '#2ecc71';
        setTimeout(() => {
          couponMessage.style.display = 'none';
        }, 3000);
      }

      function updateOrderSummary(discount) {
        if (discount > 0) {
          couponDiscount.classList.remove('hidden');
          discountAmount.textContent = discount.toFixed(2);
          const finalAmount = originalTotal - discount;
          finalTotal.textContent = finalAmount.toFixed(2);
          // Update hidden inputs
          document.getElementById('finalAmountInput').value = finalAmount.toFixed(2);
          document.getElementById('discountAmountInput').value = discount.toFixed(2);
        }
      }

      function resetCouponUI() {
        couponInput.value = '';
        couponInput.disabled = false;
        applyCouponBtn.textContent = 'Apply';
        applyCouponBtn.classList.remove('remove-coupon');
        couponDiscount.classList.add('hidden');
        finalTotal.textContent = originalTotal.toFixed(2);
        // Reset hidden inputs
        document.getElementById('finalAmountInput').value = originalTotal.toFixed(2);
        document.getElementById('discountAmountInput').value = '0.00';
      }
    });
  </script>
</body>
</html> 