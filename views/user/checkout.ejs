<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Checkout - MotionHaus</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
  <style>
    body {
      background: #fff;
      color: #111;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
      margin: 0;
      padding: 0;
    }
    .container {
      max-width: 1400px;
      margin: 40px auto;
      padding: 0 24px;
      display: grid;
      grid-template-columns: 1fr 400px;
      gap: 40px;
      align-items: start;
    }
    .main-checkout {
      display: flex;
      flex-direction: column;
      gap: 24px;
    }
    .checkout-form {
      background: #fff;
      border-radius: 16px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      padding: 32px;
    }
    .checkout-form h2 {
      font-size: 24px;
      font-weight: 600;
      margin-bottom: 24px;
      color: #111;
    }
    .form-group {
      margin-bottom: 32px;
    }
    .form-group label {
      display: block;
      font-size: 15px;
      font-weight: 600;
      margin-bottom: 12px;
      color: #333;
    }
    .form-group input, .form-group select {
      width: 100%;
      padding: 16px;
      border-radius: 12px;
      border: 1px solid #e0e0e0;
      font-size: 16px;
      background: #fff;
      transition: all 0.2s ease;
    }
    .form-group input:focus, .form-group select:focus {
      outline: none;
      border-color: #000;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .form-group input::placeholder {
      color: #999;
    }
    .form-row {
      display: flex;
      gap: 24px;
      margin-bottom: 32px;
    }
    .form-row .form-group {
      flex: 1;
      margin-bottom: 0;
    }
    .payment-methods {
      margin: 28px 0;
    }
    .payment-methods label {
      font-weight: 500;
      margin-right: 24px;
      font-size: 15px;
      cursor: pointer;
    }
    .order-summary {
      background: #fff;
      border-radius: 16px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      padding: 32px;
      position: sticky;
      top: 24px;
    }
    .order-summary h3 {
      font-size: 24px;
      font-weight: 600;
      margin-bottom: 24px;
      color: #111;
    }
    .order-items {
      margin-bottom: 24px;
    }
    .order-item {
      display: flex;
      gap: 16px;
      padding: 16px 0;
      border-bottom: 1px solid #eee;
    }
    .order-item img {
      width: 80px;
      height: 80px;
      border-radius: 8px;
      object-fit: cover;
    }
    .order-item-details {
      flex: 1;
    }
    .order-item-details .name {
      font-weight: 500;
      margin-bottom: 4px;
    }
    .order-item-details .meta {
      color: #666;
      font-size: 14px;
    }
    .order-item-details .price {
      font-weight: 600;
      margin-top: 8px;
    }
    .summary-row {
      display: flex;
      justify-content: space-between;
      margin-bottom: 12px;
      font-size: 15px;
      color: #666;
    }
    .summary-row.total {
      font-size: 18px;
      font-weight: 600;
      font-weight: 700;
      margin-top: 18px;
      border-top: 1px solid #eee;
      padding-top: 12px;
    }
    .place-order-btn {
      width: 100%;
      padding: 16px;
      background: #000;
      color: #fff;
      border: none;
      border-radius: 8px;
      font-size: 17px;
      font-weight: 700;
      margin-top: 24px;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
    }
    .payment-section {
      background: #fff;
      border-radius: 16px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      padding: 32px;
    }
    @media (max-width: 1024px) {
      .container {
        grid-template-columns: 1fr;
      }
      
      .order-summary {
        position: static;
      }
    }
    /* New styles for saved addresses */
    .saved-addresses {
      margin-bottom: 24px;
    }
    .address-option {
      border: 1px solid #eee;
      border-radius: 8px;
      padding: 16px;
      margin-bottom: 12px;
      cursor: pointer;
      transition: all 0.2s ease;
    }
    .address-option:hover {
      border-color: #000;
    }
    .address-option.selected {
      border-color: #000;
      background-color: #f9f9f9;
    }
    .address-option .address-type {
      font-size: 13px;
      color: #888;
      margin-bottom: 4px;
    }
    .address-option .address-details {
      font-size: 15px;
      line-height: 1.4;
    }
    .address-option .default-badge {
      display: inline-block;
      background: #000;
      color: #fff;
      font-size: 11px;
      padding: 2px 8px;
      border-radius: 12px;
      margin-bottom: 8px;
    }
    .address-actions {
      margin-top: 16px;
      display: flex;
      gap: 12px;
    }
    .address-actions button {
      background: none;
      border: none;
      color: #000;
      font-size: 14px;
      cursor: pointer;
      padding: 0;
      text-decoration: underline;
    }
    .new-address-btn {
      display: inline-flex;
      align-items: center;
      margin: 24px 0;
      padding: 12px 24px;
      background: #f8f8f8;
      border: 1px solid #e0e0e0;
      border-radius: 8px;
      color: #000;
      font-weight: 600;
      text-decoration: none;
      transition: all 0.2s ease;
    }
    .new-address-btn:hover {
      background: #f0f0f0;
      text-decoration: none;
    }
    .new-address-btn i {
      margin-right: 8px;
    }
    .address-form {
      background: #fff;
      padding: 32px;
      border-radius: 16px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.05);
      margin-top: 24px;
      display: none;
      opacity: 0;
      transition: opacity 0.3s ease;
    }
    .address-form.active {
      display: block;
      opacity: 1;
    }
    .edit-address-btn, .delete-address-btn {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      padding: 8px 16px;
      border-radius: 8px;
      font-size: 14px;
      text-decoration: none;
      transition: all 0.2s ease;
      border: 1px solid #e0e0e0;
      background: none;
      cursor: pointer;
    }
    .edit-address-btn {
      color: #2196f3;
      border-color: #2196f3;
    }
    .edit-address-btn:hover {
      background: rgba(33, 150, 243, 0.1);
    }
    .delete-address-btn {
      color: #f44336;
      border-color: #f44336;
    }
    .delete-address-btn:hover {
      background: rgba(244, 67, 54, 0.1);
    }
    .use-address-btn {
      background: #000;
      color: #fff;
      border: none;
      padding: 8px 16px;
      border-radius: 8px;
      cursor: pointer;
      font-size: 14px;
      transition: all 0.2s ease;
    }
    .use-address-btn:hover {
      background: #333;
    }
    .payment-methods {
      margin: 28px 0;
      display: flex;
      flex-direction: column;
      gap: 16px;
    }
    .payment-methods label {
      display: flex;
      align-items: center;
      gap: 12px;
      padding: 16px;
      border: 1px solid #eee;
      border-radius: 12px;
      cursor: pointer;
      transition: all 0.2s ease;
    }
    .payment-methods label:hover {
      border-color: #000;
      background: #f9f9f9;
    }
    .payment-methods input[type="radio"] {
      margin: 0;
    }
    .place-order-btn {
      width: 100%;
      padding: 16px;
      background: #000;
      color: #fff;
      border: none;
      border-radius: 8px;
      font-size: 17px;
      font-weight: 700;
      margin-top: 24px;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
      transition: all 0.2s ease;
    }
    .place-order-btn:hover {
      background: #333;
      transform: translateY(-1px);
    }
    .edit-form {
      display: none;
      margin-top: 16px;
      padding: 16px;
      background: #f8f8f8;
      border-radius: 8px;
      border: 1px solid #eee;
    }
    .edit-form.active {
      display: block;
    }
    .edit-form .form-group {
      margin-bottom: 16px;
    }
    .edit-form label {
      display: block;
      font-size: 14px;
      font-weight: 600;
      margin-bottom: 8px;
      color: #333;
    }
    .edit-form input,
    .edit-form select {
      width: 100%;
      padding: 12px;
      border-radius: 8px;
      border: 1px solid #e0e0e0;
      font-size: 14px;
      background: #fff;
    }
    .edit-form-actions {
      display: flex;
      gap: 12px;
      margin-top: 16px;
    }
    .edit-form-actions button {
      padding: 8px 16px;
      border-radius: 8px;
      font-size: 14px;
      cursor: pointer;
      transition: all 0.2s ease;
    }
    .save-edit-btn {
      background: #000;
      color: #fff;
      border: none;
    }
    .save-edit-btn:hover {
      background: #333;
    }
    .cancel-edit-btn {
      background: none;
      border: 1px solid #e0e0e0;
      color: #666;
    }
    .cancel-edit-btn:hover {
      background: #f0f0f0;
    }
    .form-group {
      margin-bottom: 1.5rem;
    }
    .form-control {
      padding: 0.75rem;
      border: 1px solid #ddd;
      border-radius: 8px;
      transition: all 0.3s ease;
    }
    .form-control:focus {
      border-color: #000;
      box-shadow: 0 0 0 2px rgba(0,0,0,0.1);
    }
    .form-control.is-invalid {
      border-color: #dc3545;
      background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' fill='none' stroke='%23dc3545' viewBox='0 0 12 12'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
      background-repeat: no-repeat;
      background-position: right 0.75rem center;
      background-size: 1rem;
    }
    .form-control.is-valid {
      border-color: #28a745;
      background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='8' height='8' viewBox='0 0 8 8'%3e%3cpath fill='%2328a745' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e");
      background-repeat: no-repeat;
      background-position: right 0.75rem center;
      background-size: 1rem;
    }
    .invalid-feedback {
      display: none;
      color: #dc3545;
      font-size: 0.875rem;
      margin-top: 0.25rem;
    }
    .form-control.is-invalid ~ .invalid-feedback {
      display: block;
    }
    .checkbox-label {
      display: flex;
      align-items: center;
      cursor: pointer;
    }
    .checkbox-text {
      margin-left: 0.5rem;
    }
    .form-actions {
      margin-top: 2rem;
      display: flex;
      gap: 1rem;
    }
  </style>
</head>
<body>
  <%- include('../partials/header') %>
  <div class="container">
    <div class="main-checkout">
      <div class="checkout-form">
        <h2>Shipping Address</h2>
        
        <div class="saved-addresses">
          <% if (addresses && addresses.length > 0) { %>
            <% addresses.forEach(address => { %>
              <div class="address-option <%= address.isDefault ? 'selected' : '' %>" data-address-id="<%= address._id %>">
                <input type="radio" name="selectedAddress" value="<%= address._id %>" 
                       id="address-<%= address._id %>" <%= address.isDefault ? 'checked' : '' %> style="display: none;">
                <% if (address.isDefault) { %>
                  <div class="default-badge">Default</div>
                <% } %>
                <div class="address-type">
                  <i class="bi bi-<%= address.addressType === 'home' ? 'house' : address.addressType === 'work' ? 'building' : 'geo-alt' %>"></i>
                  <%= address.addressType.charAt(0).toUpperCase() + address.addressType.slice(1) %> Address
                </div>
                <div class="address-details">
                  <div><%= address.fullName %></div>
                  <div><%= address.phone %></div>
                  <div><%= address.addressLine1 %></div>
                  <% if (address.addressLine2) { %>
                    <div><%= address.addressLine2 %></div>
                  <% } %>
                  <div><%= address.city %>, <%= address.state %> <%= address.zipCode %></div>
                  <div><%= address.country %></div>
                </div>
                <div class="address-actions">
                  <button type="button" class="use-address-btn" data-address-id="<%= address._id %>">
                    Use this address
                  </button>
                  <% if (!address.isDefault) { %>
                    <button type="button" class="make-default-btn" data-address-id="<%= address._id %>">
                      <i class="bi bi-star"></i> Make Default
                    </button>
                    <button type="button" class="edit-address-btn" 
                            data-address="<%= encodeURIComponent(JSON.stringify(address)) %>">
                      <i class="bi bi-pencil"></i> Edit
                    </button>
                    <form action="/profile/address/delete/<%= address._id %>" method="POST" class="d-inline delete-address-form">
                      <button type="submit" class="delete-address-btn">
                        <i class="bi bi-trash"></i> Delete
                      </button>
                    </form>
                  <% } %>
                </div>
              </div>
            <% }) %>
          <% } else { %>
            <p>No saved addresses found. Please add a new address below.</p>
          <% } %>
        </div>
        
        <!-- Add New Address Button -->
        <button type="button" id="addNewAddressBtn" class="new-address-btn">
          <i class="bi bi-plus-circle"></i> Add New Address
        </button>
        
        <!-- New Address Form (Hidden by default) -->
        <div id="newAddressForm" class="address-form">
          <h3>Add New Address</h3>
          <form id="addAddressForm" action="/profile/address/add" method="POST" class="needs-validation" novalidate>
            <div class="form-group">
              <label for="fullName">Full Name</label>
              <input 
                type="text" 
                id="fullName" 
                name="fullName" 
                class="form-control"
                required 
                pattern="^[A-Za-z\s]{2,50}$"
                title="Name should contain only letters and spaces (2-50 characters)"
                oninput="validateField(this)"
              >
              <div class="invalid-feedback">Please enter a valid name (2-50 characters, letters only)</div>
            </div>
            <div class="form-group">
              <label for="phone">Phone Number</label>
              <input 
                type="tel" 
                id="phone" 
                name="phone" 
                class="form-control"
                required 
                pattern="^[0-9]{10,15}$"
                title="Enter a valid phone number (10-15 digits, numbers only)"
                oninput="this.value = this.value.replace(/[^0-9]/g, ''); validateField(this)"
              >
              <div class="invalid-feedback">Please enter a valid phone number (10-15 digits, numbers only)</div>
            </div>
            <div class="form-group">
              <label for="addressLine1">Address Line 1</label>
              <input 
                type="text" 
                id="addressLine1" 
                name="addressLine1" 
                class="form-control"
                required 
                minlength="5" 
                maxlength="100"
                title="Address should be between 5 and 100 characters"
                oninput="validateField(this)"
              >
              <div class="invalid-feedback">Please enter a valid address (minimum 5 characters)</div>
            </div>
            <div class="form-group">
              <label for="addressLine2">Address Line 2 (Optional)</label>
              <input 
                type="text" 
                id="addressLine2" 
                name="addressLine2" 
                class="form-control"
                maxlength="100"
                title="Optional additional address information"
              >
            </div>
            <div class="form-row">
              <div class="form-group">
                <label for="city">City</label>
                <input 
                  type="text" 
                  id="city" 
                  name="city" 
                  class="form-control"
                  required 
                  pattern="^[A-Za-z\s]{2,50}$"
                  title="City should contain only letters and spaces (2-50 characters)"
                  oninput="validateField(this)"
                >
                <div class="invalid-feedback">Please enter a valid city name (letters only)</div>
              </div>
              <div class="form-group">
                <label for="state">State/Province</label>
                <input 
                  type="text" 
                  id="state" 
                  name="state" 
                  class="form-control"
                  required 
                  pattern="^[A-Za-z\s]{2,50}$"
                  title="State should contain only letters and spaces (2-50 characters)"
                  oninput="validateField(this)"
                >
                <div class="invalid-feedback">Please enter a valid state/province name (letters only)</div>
              </div>
            </div>
            <div class="form-row">
              <div class="form-group">
                <label for="zipCode">ZIP/Postal Code</label>
                <input 
                  type="text" 
                  id="zipCode" 
                  name="zipCode" 
                  class="form-control"
                  required 
                  pattern="^[0-9A-Za-z\s-]{3,10}$"
                  title="ZIP code should be 3-10 characters"
                  oninput="validateField(this)"
                >
                <div class="invalid-feedback">Please enter a valid ZIP/postal code (3-10 characters)</div>
              </div>
              <div class="form-group">
                <label for="country">Country</label>
                <select 
                  id="country" 
                  name="country" 
                  class="form-control"
                  required
                  onchange="validateField(this)"
                >
                  <option value="" disabled selected>Select a country</option>
                  <option value="US">United States</option>
                  <option value="CA">Canada</option>
                  <option value="UK">United Kingdom</option>
                  <option value="AU">Australia</option>
                   <option value="IND">India</option>
                </select>
                <div class="invalid-feedback">Please select a country</div>
              </div>
            </div>
            <div class="form-group">
              <label for="addressType">Address Type</label>
              <select 
                id="addressType" 
                name="addressType" 
                class="form-control"
                required
                onchange="validateField(this)"
              >
                <option value="" disabled selected>Select address type</option>
                <option value="home">Home</option>
                <option value="work">Work</option>
                <option value="other">Other</option>
              </select>
              <div class="invalid-feedback">Please select an address type</div>
            </div>
            <div class="form-group">
              <label class="checkbox-label">
                <input type="checkbox" name="isDefault" id="isDefault">
                <span class="checkbox-text">Set as default address</span>
              </label>
            </div>
            <div class="form-actions">
              <button type="submit" class="save-edit-btn">Save Address</button>
              <button type="button" id="cancelNewAddressBtn" class="cancel-edit-btn">Cancel</button>
            </div>
          </form>
        </div>
      </div>

      <div class="payment-section">
        <h2>Payment Method</h2>
        <form id="checkoutForm" action="/order/create" method="POST">
          <div class="payment-methods">
            <label>
              <input type="radio" name="paymentMethod" value="cod" checked>
              <span>Cash on Delivery</span>
              <small style="display: block; color: #2ecc71; margin-top: 4px;">Available</small>
            </label>
          </div>
          <input type="hidden" name="addressId" id="selectedAddressId">
          <% if (cart && cart.items && cart.items.length > 0) { %>
            <button class="place-order-btn" type="submit" id="placeOrderBtn">
              Place Order (Cash on Delivery) <span style="font-size: 20px;">→</span>
            </button>
          <% } else { %>
            <div class="empty-cart-message" style="text-align: center; padding: 20px; background: #f8f8f8; border-radius: 8px; margin-top: 20px;">
              <p style="font-size: 16px; color: #e74c3c; margin-bottom: 15px;">Your cart is empty. Please add items to your cart before placing an order.</p>
              <a href="/products" class="continue-shopping-btn" style="display: inline-block; padding: 12px 24px; background: #000; color: #fff; text-decoration: none; border-radius: 8px; font-weight: 600;">
                Continue Shopping
              </a>
            </div>
          <% } %>
        </form>
      </div>
    </div>

    <div class="order-summary">
      <h3>Order Summary</h3>
      <div class="order-items">
        <% if (cart && cart.items && cart.items.length > 0) { %>
          <% cart.items.forEach(item => { %>
            <% if (item.product && item.product.images && item.product.images.length > 0) { %>
              <div class="order-item">
                <img src="<%= item.product.images[0] %>" alt="<%= item.product.name %>">
                <div class="order-item-details">
                  <div class="name"><%= item.product.name %></div>
                  <div class="meta">Size: <%= item.size %> | Qty: <%= item.quantity %></div>
                  <% 
                    const sizeObj = item.product.sizes.find(s => Number(s.size) === Number(item.size));
                    const stockAvailable = sizeObj ? sizeObj.quantity : 0;
                    const isOutOfStock = stockAvailable < item.quantity;
                  %>
                  <div class="stock-status <%= isOutOfStock ? 'out-of-stock' : 'in-stock' %>">
                    <% if (isOutOfStock) { %>
                      <span style="color: #e74c3c;">Out of Stock (Only <%= stockAvailable %> available)</span>
                    <% } else { %>
                      <span style="color: #2ecc71;">In Stock (<%= stockAvailable %> available)</span>
                    <% } %>
                  </div>
                  <div class="price">₹<%= (item.product.price * item.quantity).toFixed(2) %></div>
                </div>
              </div>
            <% } %>
          <% }) %>
        <% } else { %>
          <div class="empty-cart-message">
            <p>Your cart is empty. Please add items to continue.</p>
            <a href="/products" class="continue-shopping-btn">Continue Shopping</a>
          </div>
        <% } %>
      </div>
      <% if (cart && cart.items && cart.items.length > 0) { %>
        <div class="summary-row">
          <span>Subtotal</span>
          <span>₹<%= cart.subtotal.toFixed(2) %></span>
        </div>
        <div class="summary-row">
          <span>Delivery Fee</span>
          <span style="color: #2ecc71; font-weight: 500;">Free</span>
        </div>
        <div class="summary-row total">
          <span>Total</span>
          <span>₹<%= cart.subtotal.toFixed(2) %></span>
        </div>
      <% } %>
    </div>
  </div>

  <%- include('../partials/footer') %>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Function to handle edit button click
      document.querySelectorAll('.edit-address-btn').forEach(button => {
        button.addEventListener('click', function() {
          try {
            const addressData = JSON.parse(decodeURIComponent(this.dataset.address));
            const addressOption = this.closest('.address-option');
            const addressDetails = addressOption.querySelector('.address-details');
            
            // Create edit form if it doesn't exist
            let editForm = addressOption.querySelector('.edit-form');
            if (!editForm) {
              editForm = document.createElement('div');
              editForm.className = 'edit-form';
              editForm.dataset.addressId = addressData._id;
              
              const formHtml = `
                <form class="edit-address-form">
                  <div class="form-group">
                    <label for="fullName-${addressData._id}">Full Name</label>
                    <input type="text" class="form-control" id="fullName-${addressData._id}" 
                           name="fullName" value="${addressData.fullName || ''}" required>
                  </div>
                  <div class="form-group">
                    <label for="phone-${addressData._id}">Phone Number</label>
                    <input type="tel" class="form-control" id="phone-${addressData._id}" 
                           name="phone" value="${addressData.phone || ''}" required>
                  </div>
                  <div class="form-group">
                    <label for="addressLine1-${addressData._id}">Address Line 1</label>
                    <input type="text" class="form-control" id="addressLine1-${addressData._id}" 
                           name="addressLine1" value="${addressData.addressLine1 || ''}" required>
                  </div>
                  <div class="form-group">
                    <label for="addressLine2-${addressData._id}">Address Line 2</label>
                    <input type="text" class="form-control" id="addressLine2-${addressData._id}" 
                           name="addressLine2" value="${addressData.addressLine2 || ''}">
                  </div>
                  <div class="form-group">
                    <label for="city-${addressData._id}">City</label>
                    <input type="text" class="form-control" id="city-${addressData._id}" 
                           name="city" value="${addressData.city || ''}" required>
                  </div>
                  <div class="form-group">
                    <label for="state-${addressData._id}">State/Province</label>
                    <input type="text" class="form-control" id="state-${addressData._id}" 
                           name="state" value="${addressData.state || ''}" required>
                  </div>
                  <div class="form-group">
                    <label for="zipCode-${addressData._id}">ZIP/Postal Code</label>
                    <input type="text" class="form-control" id="zipCode-${addressData._id}" 
                           name="zipCode" value="${addressData.zipCode || ''}" required>
                  </div>
                  <div class="form-group">
                    <label for="country-${addressData._id}">Country</label>
                    <select class="form-control" id="country-${addressData._id}" name="country" required>
                      <option value="US" ${(addressData.country === 'US') ? 'selected' : ''}>United States</option>
                      <option value="CA" ${(addressData.country === 'CA') ? 'selected' : ''}>Canada</option>
                      <option value="UK" ${(addressData.country === 'UK') ? 'selected' : ''}>United Kingdom</option>
                      <option value="AU" ${(addressData.country === 'AU') ? 'selected' : ''}>Australia</option>
                    </select>
                  </div>
                  <div class="form-group">
                    <label for="addressType-${addressData._id}">Address Type</label>
                    <select class="form-control" id="addressType-${addressData._id}" name="addressType">
                      <option value="home" ${(addressData.addressType === 'home') ? 'selected' : ''}>Home</option>
                      <option value="work" ${(addressData.addressType === 'work') ? 'selected' : ''}>Work</option>
                      <option value="other" ${(addressData.addressType === 'other') ? 'selected' : ''}>Other</option>
                    </select>
                  </div>
                  <div class="edit-form-actions">
                    <button type="submit" class="btn btn-primary save-edit-btn">Save Changes</button>
                    <button type="button" class="btn btn-secondary cancel-edit">Cancel</button>
                  </div>
                </form>
              `;
              
              editForm.innerHTML = formHtml;
              addressOption.appendChild(editForm);

              // Handle form submission
              const form = editForm.querySelector('form');
              form.addEventListener('submit', async function(e) {
                e.preventDefault();
                const formData = new FormData(this);
                
                try {
                  const response = await fetch(`/profile/address/edit/${addressData._id}`, {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(Object.fromEntries(formData)),
                    credentials: 'same-origin'
                  });

                  if (response.ok) {
                    window.location.reload();
                  } else {
                    const data = await response.json();
                    throw new Error(data.message || 'Failed to update address');
                  }
                } catch (error) {
                  console.error('Error:', error);
                  alert(error.message || 'Failed to update address. Please try again.');
                }
              });

              // Handle cancel button
              editForm.querySelector('.cancel-edit').addEventListener('click', function() {
                editForm.classList.remove('active');
                addressDetails.style.display = 'block';
              });
            }

            // Toggle edit form visibility
            editForm.classList.toggle('active');
            addressDetails.style.display = editForm.classList.contains('active') ? 'none' : 'block';
          } catch (error) {
            console.error('Error parsing address data:', error);
            alert('Error loading address data. Please try again.');
          }
        });
      });

      // Handle place order submission
      const checkoutForm = document.getElementById('checkoutForm');
      if (checkoutForm) {
        checkoutForm.addEventListener('submit', async function(e) {
          e.preventDefault();

          // Get selected address
          const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
          if (!selectedAddress) {
            Swal.fire({
              title: 'Error!',
              text: 'Please select a delivery address',
              icon: 'error',
              confirmButtonColor: '#000'
            });
            return;
          }

          // Check for out of stock items
          const outOfStockItems = document.querySelectorAll('.stock-status.out-of-stock');
          if (outOfStockItems.length > 0) {
            Swal.fire({
              title: 'Out of Stock Items',
              text: 'Some items in your cart are out of stock. Please remove them or reduce quantity before placing your order.',
              icon: 'error',
              confirmButtonColor: '#000'
            });
            return;
          }

          // Update hidden address input
          document.getElementById('selectedAddressId').value = selectedAddress.value;

          // Show loading state
          Swal.fire({
            title: 'Processing Order...',
            text: 'Please wait while we process your order',
            allowOutsideClick: false,
            allowEscapeKey: false,
            showConfirmButton: false,
            didOpen: () => {
              Swal.showLoading();
            }
          });

          try {
            const formData = new FormData(this);
            const response = await fetch(this.action, {  // Use the form's action attribute
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(Object.fromEntries(formData)),
              credentials: 'same-origin'
            });

            if (response.ok) {
              // If the response is a redirect, follow it
              if (response.redirected) {
                window.location.href = response.url;
              } else {
                // Otherwise, try to parse as JSON
                const data = await response.json();
                if (data.success) {
                  // Redirect to order success page
                  window.location.href = '/order/success/' + data.order._id;
                } else {
                  throw new Error(data.message || 'Failed to place order');
                }
              }
            } else {
              const errorData = await response.json();
              throw new Error(errorData.message || 'Failed to place order');
            }
          } catch (error) {
            console.error('Error:', error);
            Swal.fire({
              title: 'Error!',
              text: error.message || 'Failed to place order. Please try again.',
              icon: 'error',
              confirmButtonColor: '#000'
            });
          }
        });
      }

      // Handle address selection
      document.querySelectorAll('.address-option').forEach(option => {
        option.addEventListener('click', function() {
          // Remove selected class from all options
          document.querySelectorAll('.address-option').forEach(opt => {
            opt.classList.remove('selected');
          });
          // Add selected class to clicked option
          this.classList.add('selected');
          // Check the radio button
          const radio = this.querySelector('input[type="radio"]');
          if (radio) {
            radio.checked = true;
          }
        });
      });
      
      // Add New Address functionality
      const addNewAddressBtn = document.getElementById('addNewAddressBtn');
      const newAddressForm = document.getElementById('newAddressForm');
      const cancelNewAddressBtn = document.getElementById('cancelNewAddressBtn');
      const addAddressForm = document.getElementById('addAddressForm');
      
      if (addNewAddressBtn && newAddressForm) {
        // Show new address form when button is clicked
        addNewAddressBtn.addEventListener('click', function() {
          newAddressForm.classList.add('active');
        });
        
        // Hide form when cancel button is clicked
        if (cancelNewAddressBtn) {
          cancelNewAddressBtn.addEventListener('click', function() {
            newAddressForm.classList.remove('active');
            addAddressForm.reset(); // Reset form fields
          });
        }
        
        // Handle form submission
        if (addAddressForm) {
          addAddressForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            // Validate all fields
            let isValid = true;
            this.querySelectorAll('.form-control').forEach(input => {
              if (!validateField(input)) {
                isValid = false;
              }
            });
            
            if (!isValid) {
              Swal.fire({
                title: 'Validation Error',
                text: 'Please check all fields and try again',
                icon: 'error',
                confirmButtonColor: '#000'
              });
              return;
            }
            
            try {
              const formData = new FormData(this);
              const formDataObj = {};
              formData.forEach((value, key) => {
                if (key === 'isDefault') {
                  formDataObj[key] = value === 'on';
                } else {
                  formDataObj[key] = value.trim(); // Trim whitespace
                }
              });
              
              formDataObj.userId = '<%= user._id %>';
              
              const response = await fetch('/profile/address/add', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify(formDataObj),
                credentials: 'same-origin'
              });
              
              if (response.ok) {
                Swal.fire({
                  title: 'Success!',
                  text: 'Address added successfully',
                  icon: 'success',
                  confirmButtonColor: '#000'
                }).then(() => {
                  window.location.reload();
                });
              } else {
                const data = await response.json();
                throw new Error(data.message || 'Failed to add address');
              }
            } catch (error) {
              console.error('Error:', error);
              Swal.fire({
                title: 'Error!',
                text: error.message || 'Failed to add address. Please try again.',
                icon: 'error',
                confirmButtonColor: '#000'
              });
            }
          });
        }
      }
      
      // Handle Make Default functionality
      document.querySelectorAll('.make-default-btn').forEach(button => {
        button.addEventListener('click', async function() {
          const addressId = this.dataset.addressId;
          
          try {
            const response = await fetch(`/profile/address/set-default/${addressId}`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              credentials: 'same-origin'
            });
            
            if (response.ok) {
              // Reload page to update default status
              window.location.reload();
            } else {
              const data = await response.json();
              throw new Error(data.message || 'Failed to set default address');
            }
          } catch (error) {
            console.error('Error:', error);
            alert(error.message || 'Failed to set default address. Please try again.');
          }
        });
      });
    });

    function validateField(field) {
      // Remove existing validation classes
      field.classList.remove('is-valid', 'is-invalid');
      
      if (field.checkValidity()) {
        field.classList.add('is-valid');
        return true;
      } else {
        field.classList.add('is-invalid');
        return false;
      }
    }
  </script>
</body>
</html> 