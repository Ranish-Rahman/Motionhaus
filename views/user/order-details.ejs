<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">
    <style>
        body { 
            background: #f8f9fa;
            padding-top: 80px;
        }
        .status-badge {
            padding: 0.25em 0.75em;
            border-radius: 1em;
            font-size: 0.95em;
            font-weight: 500;
            display: inline-block;
        }
        .status-pending { background: #fff3cd; color: #856404; }
        .status-processing { background: #d1ecf1; color: #0c5460; }
        .status-shipped { background: #cce5ff; color: #004085; }
        .status-delivered { background: #c3e6cb; color: #155724; }
        .status-cancelled { background: #f8d7da; color: #721c24; }
        .status-return-approved { background: #d4edda; color: #155724; }
        .card {
            border: none;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }
        .card-header {
            background-color: #fff;
            border-bottom: 1px solid #eee;
            padding: 1.5rem;
        }
        .product-image {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border-radius: 8px;
        }
        .btn-return {
            background-color: #dc3545;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 5px;
        }
        .btn-return:hover {
            background-color: #c82333;
            color: white;
        }
        .btn-return:disabled {
            background-color: #e9ecef;
            color: #6c757d;
            cursor: not-allowed;
        }
        .product-thumbnail {
            width: 60px;
            height: 60px;
            object-fit: cover;
            border-radius: 4px;
        }
        .stock-warning {
            background-color: #fff3cd;
            color: #856404;
            padding: 0.75rem;
            border-radius: 0.5rem;
            margin: 0.5rem 0;
            border: 1px solid #ffeeba;
            font-size: 0.875rem;
        }
        .stock-error {
            background-color: #f8d7da;
            color: #721c24;
            padding: 0.75rem;
            border-radius: 0.5rem;
            margin: 0.5rem 0;
            border: 1px solid #f5c6cb;
            font-size: 0.875rem;
        }
        .stock-info {
            display: flex;
            flex-direction: column;
            gap: 0.25rem;
            font-size: 0.875rem;
        }
        .max-limit-badge {
            display: inline-block;
            background: #e9ecef;
            color: #495057;
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem;
            font-size: 0.75rem;
            margin-left: 0.5rem;
        }
        /* Stock alert styles */
        .stock-alert-container { 
            z-index: 1060; 
        }
        .stock-alert-popup { 
            max-width: 500px; 
        }
        .stock-alert-content { 
            text-align: left; 
        }
        .stock-alerts .alert-section { 
            margin-bottom: 1rem; 
        }
        .stock-alerts h6 { 
            margin-bottom: 0.5rem; 
            font-weight: 600; 
        }
        .stock-alerts ul { 
            list-style: none; 
            padding-left: 1.5rem; 
            margin-bottom: 0; 
        }
        .stock-alerts li { 
            margin-bottom: 0.25rem; 
            font-size: 0.9rem; 
        }
        .stock-alerts .text-danger { 
            color: #dc3545; 
        }
        .stock-alerts .text-warning { 
            color: #ffc107; 
        }
        .stock-warning-popup {
            font-family: 'Inter', sans-serif;
        }
        .stock-warning-message {
            padding: 1rem;
            text-align: center;
        }
        .stock-warning-message i {
            font-size: 2rem;
            margin-bottom: 1rem;
            color: #ffc107;
        }
        .stock-warning-message p {
            margin: 0.5rem 0;
            font-size: 1rem;
            color: #333;
        }
        .stock-warning-message p:first-of-type {
            font-weight: 600;
            color: #dc3545;
        }
    </style>
</head>
<body>
    <%- include('../partials/navbar.ejs') %>
    
    <!-- Add this hidden input field to store order items data -->
    <input type="hidden" id="orderItemsData" value='<%- JSON.stringify(order.items) %>'>
    
    <div class="container py-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2>Order Details</h2>
            <a href="/profile/orders" class="btn btn-outline-secondary">
                <i class="bi bi-arrow-left"></i> Back to Orders
            </a>
        </div>

        <% if (error) { %>
            <div class="alert alert-danger">
                <i class="bi bi-exclamation-circle me-2"></i>
                <%= error %>
            </div>
        <% } %>

        <% if (success) { %>
            <div class="alert alert-success">
                <i class="bi bi-check-circle me-2"></i>
                <%= success %>
            </div>
        <% } %>

        <% if (order.items.some(item => { 
            const sizeObj = item.product?.sizes?.find(s => Number(s.size) === Number(item.size));
            return sizeObj && item.quantity > Math.min(sizeObj.quantity, 3);
        })) { %>
            <div class="stock-warning">
                <i class="bi bi-exclamation-triangle me-2"></i>
                Some items in your order exceed current stock limits or maximum allowed quantity (3 per item).
                Please review your order quantities.
            </div>
        <% } %>

        <div class="row">
            <div class="col-md-8">
                <!-- Order Items -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Order Items</h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Product</th>
                                        <th>Quantity</th>
                                        <th>Price</th>
                                        <th>Total</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% order.items.forEach(item => { %>
                                        <tr>
                                            <td>
                                                <div class="d-flex align-items-center">
                                    <% if (item.product && item.product.images && item.product.images.length > 0) { %>
                                                        <img src="<%= item.product.images[0] %>" alt="<%= item.product.name %>" class="product-thumbnail me-2">
                                    <% } else { %>
                                        <div class="product-image me-3 bg-secondary d-flex align-items-center justify-content-center">
                                            <i class="bi bi-image text-white"></i>
                                        </div>
                                    <% } %>
                                                    <div>
                                                        <h6 class="mb-0"><%= item.product ? item.product.name : 'Product no longer available' %></h6>
                                                        <% if (item.size) { %>
                                                            <small class="text-muted">Size: <%= item.size %></small>
                                                        <% } %>
                                                        <% 
                                                            const sizeObj = item.product?.sizes?.find(s => Number(s.size) === Number(item.size));
                                                            const stockAvailable = sizeObj ? sizeObj.quantity : 0;
                                                            const maxAllowed = Math.min(stockAvailable, 3);
                                                            const isOutOfStock = stockAvailable === 0;
                                                            const isOverLimit = item.quantity > maxAllowed;
                                                        %>
                                                        <div class="stock-info">
                                                            <% if (isOutOfStock) { %>
                                                                <div class="stock-error">
                                                                    <i class="bi bi-x-circle me-1"></i>
                                                                    Out of Stock
                                                                </div>
                                                            <% } else if (isOverLimit) { %>
                                                                <div class="stock-warning">
                                                                    <i class="bi bi-exclamation-triangle me-1"></i>
                                                                    Quantity exceeds limit
                                                                    <span class="max-limit-badge">
                                                                        Max: <%= maxAllowed %> units
                                                                    </span>
                                                                </div>
                                                            <% } else { %>
                                                                <small class="text-muted">
                                                                    <%= stockAvailable %> units available
                                                                    <span class="max-limit-badge">
                                                                        Max per order: 3
                                                                    </span>
                                                                </small>
                                                            <% } %>
                                                        </div>
                                    </div>
                                </div>
                                            </td>
                                            <td>
                                                <div class="d-flex align-items-center gap-2">
                                                    <button class="btn btn-sm btn-outline-secondary" 
                                                            onclick="updateQuantity('<%= item._id %>', -1)"
                                                            <%= item.status === 'Delivered' ? 'disabled' : '' %>>
                                                        −
                                                    </button>
                                                    <input type="number" 
                                                           class="form-control form-control-sm quantity-input" 
                                                           style="width: 60px;"
                                                           value="<%= item.quantity %>" 
                                                           min="1" 
                                                           max="<%= Math.min(sizeObj ? sizeObj.quantity : 0, 3) %>"
                                                           data-item-id="<%= item._id %>"
                                                           data-max-stock="<%= sizeObj ? sizeObj.quantity : 0 %>"
                                                           <%= item.status === 'Delivered' ? 'disabled' : '' %>>
                                                    <button class="btn btn-sm btn-outline-secondary" 
                                                            onclick="updateQuantity('<%= item._id %>', 1)"
                                                            <%= item.status === 'Delivered' ? 'disabled' : '' %>>
                                                        +
                                                    </button>
                                                </div>
                                            </td>
                                            <td>₹<%= item.price.toFixed(2) %></td>
                                            <td>₹<%= (item.price * item.quantity).toFixed(2) %></td>
                                            <td>
                                                <span class="badge bg-<%= 
                                                    item.status === 'Pending' ? 'warning' : 
                                                    item.status === 'Shipped' ? 'info' : 
                                                    item.status === 'Delivered' ? 'success' : 
                                                    'danger' 
                                                %>">
                                                    <%= item.status %>
                                                </span>
                                            </td>
                                            <td>
                                                <% if (item.status === 'Pending') { %>
                                                    <button class="btn btn-sm btn-danger cancel-item" 
                                                            data-order-id="<%= order._id %>" 
                                                            data-item-id="<%= item._id %>">
                                                        <i class="bi bi-x-circle"></i> Cancel
                                                    </button>
                                                <% } else if (item.status === 'Delivered') { %>
                                                    <% if (!item.returnRequest || (item.returnRequest.status !== 'pending' && item.returnRequest.status !== 'approved' && item.returnRequest.status !== 'denied')) { %>
                                                        <button class="btn btn-sm btn-warning request-return" 
                                                                data-order-id="<%= order._id %>" 
                                                                data-item-id="<%= item._id %>">
                                                            <i class="bi bi-arrow-return-left"></i> Return
                                                        </button>
                                                    <% } else if (item.returnRequest.status === 'pending') { %>
                                                        <span class="badge bg-warning">Return Requested</span>
                                                    <% } else if (item.returnRequest.status === 'approved') { %>
                                                        <span class="badge bg-success">Return Approved</span>
                                                    <% } else if (item.returnRequest.status === 'denied') { %>
                                                        <span class="badge bg-danger">Return Denied</span>
                                                    <% } %>
                                                <% } %>
                                            </td>
                                        </tr>
                            <% }); %>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <!-- Shipping Address -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Shipping Address</h5>
                    </div>
                    <div class="card-body">
                        <% if (order.shippingAddress) { %>
                            <p class="mb-1"><%= order.shippingAddress.fullName %></p>
                            <p class="mb-1"><%= order.shippingAddress.address %></p>
                            <p class="mb-1"><%= order.shippingAddress.city %>, <%= order.shippingAddress.state %></p>
                            <p class="mb-1"><%= order.shippingAddress.postalCode %></p>
                            <p class="mb-0"><%= order.shippingAddress.phone %></p>
                        <% } else { %>
                            <p class="text-muted mb-0">No shipping address found.</p>
                        <% } %>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <!-- Order Summary -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Order Summary</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-flex justify-content-between mb-2">
                            <span>Order ID:</span>
                            <span class="fw-bold">#<%= order.orderID %></span>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Order Date:</span>
                            <span><%= new Date(order.orderDate).toLocaleDateString() %></span>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Status:</span>
                            <span class="<%= statusClass %>"><%= order.status %></span>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Payment Method:</span>
                            <span><%= order.paymentMethod === 'cod' ? 'Cash on Delivery' : 
                                    order.paymentMethod === 'razorpay' ? 'Razorpay' : 
                                    order.paymentMethod === 'wallet' ? 'Wallet' : 
                                    order.paymentMethod %></span>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Payment Status:</span>
                            <span class="<%= order.paymentStatus === 'failed' ? 'text-danger' : 'text-success' %>">
                                <%= order.paymentStatus.charAt(0).toUpperCase() + order.paymentStatus.slice(1) %>
                            </span>
                        </div>
                        <% if (order.paymentStatus === 'failed' && order.paymentMethod === 'razorpay') { %>
                            <button id="retryPayment" class="btn btn-warning w-100 mb-3">
                                <i class="bi bi-arrow-repeat"></i> Retry Payment
                            </button>
                        <% } %>
                        <hr>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Subtotal:</span>
                            <span>₹<%= order.items
                                .filter(item => item.status !== 'Cancelled' && item.status !== 'Returned')
                                .reduce((total, item) => total + (item.price * item.quantity), 0)
                                .toFixed(2) %></span>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Shipping:</span>
                            <span>Free</span>
                        </div>
                        <hr>
                        <div class="d-flex justify-content-between mb-0">
                            <span class="fw-bold">Total:</span>
                            <span class="fw-bold">₹<%= order.items
                                .filter(item => item.status !== 'Cancelled' && item.status !== 'Returned')
                                .reduce((total, item) => total + (item.price * item.quantity), 0)
                                .toFixed(2) %></span>
                        </div>
                    </div>
                </div>

                <!-- Invoice Button -->
                <% if (order.items.some(item => item.status === 'Delivered' || item.status === 'Completed')) { %>
                    <a href="/profile/orders/<%= order._id %>/invoice" class="btn btn-primary w-100 mb-3" target="_blank">
                        <i class="bi bi-file-earmark-text"></i> Download Invoice
                    </a>
                <% } %>

                <!-- Return Request -->
                <% if (order.status.toLowerCase() === 'delivered' && (!order.returnRequest || !order.returnRequest.status)) { %>
                    <button class="btn btn-return w-100" data-bs-toggle="modal" data-bs-target="#returnRequestModal">
                        <i class="bi bi-arrow-return-left"></i> Request Return
                    </button>
                <% } else if (order.returnRequest && order.returnRequest.status) { %>
                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0">Return Request</h5>
                        </div>
                        <div class="card-body">
                            <p class="mb-2"><strong>Status:</strong> <%= order.returnRequest.status.charAt(0).toUpperCase() + order.returnRequest.status.slice(1) %></p>
                            <p class="mb-2"><strong>Reason:</strong> <%= order.returnRequest.reason %></p>
                            <% if (order.returnRequest.adminResponse) { %>
                                <p class="mb-0"><strong>Admin Response:</strong> <%= order.returnRequest.adminResponse %></p>
                            <% } %>
                        </div>
                    </div>
                <% } %>
            </div>
        </div>
    </div>

    <!-- Cancel Item Modal -->
    <div class="modal fade" id="cancelItemModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Cancel Item</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="cancelItemForm">
                        <div class="mb-3">
                            <label class="form-label">Reason for Cancellation</label>
                            <textarea class="form-control" id="cancelReason" required></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-danger" id="confirmCancel">Cancel Item</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Return Request Modal -->
    <div class="modal fade" id="returnRequestModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Request Return</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="returnRequestForm">
                        <input type="hidden" id="orderId" name="orderId">
                        <input type="hidden" id="itemId" name="itemId">
                        <div class="mb-3">
                            <label class="form-label">Reason for Return</label>
                            <textarea class="form-control" id="returnReason" rows="3" required></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-warning" id="submitReturnRequest">Submit Return Request</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script>
        // Cancel item functionality
        document.querySelectorAll('.cancel-item').forEach(button => {
            button.addEventListener('click', (e) => {
                const orderId = e.target.closest('button').dataset.orderId;
                const itemId = e.target.closest('button').dataset.itemId;
                
                // Store the IDs in the modal for later use
                document.getElementById('cancelItemModal').dataset.orderId = orderId;
                document.getElementById('cancelItemModal').dataset.itemId = itemId;
                
                // Show the modal
                new bootstrap.Modal(document.getElementById('cancelItemModal')).show();
            });
        });

        // Handle cancel confirmation
        document.getElementById('confirmCancel').addEventListener('click', async () => {
            const modal = document.getElementById('cancelItemModal');
            const orderId = modal.dataset.orderId;
            const itemId = modal.dataset.itemId;
            const reason = document.getElementById('cancelReason').value;

            if (!reason) {
                Swal.fire({
                    title: 'Error!',
                    text: 'Please provide a reason for cancellation',
                    icon: 'error',
                    confirmButtonColor: '#dc3545'
                });
                return;
            }

            try {
                const response = await fetch(`/order/${orderId}/item/${itemId}/cancel`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ reason })
                });

                const data = await response.json();

                if (response.ok) {
                    await Swal.fire({
                        title: 'Success!',
                        text: 'Item cancelled successfully',
                        icon: 'success',
                        timer: 2000,
                        showConfirmButton: false
                    });
                    location.reload();
                } else {
                    throw new Error(data.message || 'Failed to cancel item');
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    title: 'Error!',
                    text: error.message || 'Failed to cancel item. Please try again.',
                    icon: 'error',
                    confirmButtonColor: '#dc3545'
                });
            }
        });

        // Return request functionality
        document.querySelectorAll('.request-return').forEach(button => {
            button.addEventListener('click', (e) => {
                const orderId = e.target.closest('button').dataset.orderId;
                const itemId = e.target.closest('button').dataset.itemId;
                
                // Store the IDs in the modal for later use
                document.getElementById('returnRequestModal').dataset.orderId = orderId;
                document.getElementById('returnRequestModal').dataset.itemId = itemId;
                
                // Show the modal
                new bootstrap.Modal(document.getElementById('returnRequestModal')).show();
            });
        });

        // Handle return request submission
        document.getElementById('submitReturnRequest').addEventListener('click', async () => {
            const modal = document.getElementById('returnRequestModal');
            const orderId = modal.dataset.orderId;
            const itemId = modal.dataset.itemId;
            const reason = document.getElementById('returnReason').value;

            if (!reason) {
                Swal.fire({
                    title: 'Error!',
                    text: 'Please provide a reason for return',
                    icon: 'error',
                    confirmButtonColor: '#dc3545'
                });
                return;
            }

            try {
                // Show loading state
                Swal.fire({
                    title: 'Submitting Return Request...',
                    html: 'Please wait...',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                const response = await fetch(`/order/${orderId}/item/${itemId}/return`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ reason })
                });

                const data = await response.json();
                if (data.success) {
                    await Swal.fire({
                        title: 'Success!',
                        text: 'Return request submitted successfully',
                        icon: 'success',
                        timer: 2000,
                        showConfirmButton: false
                    });
                    location.reload();
                } else {
                    throw new Error(data.message || 'Failed to submit return request');
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    title: 'Error!',
                    text: error.message || 'Failed to submit return request',
                    icon: 'error',
                    confirmButtonColor: '#dc3545'
                });
            }
        });

        // Retry Payment functionality
        document.getElementById('retryPayment')?.addEventListener('click', async () => {
            try {
                // Show loading state
                Swal.fire({
                    title: 'Initializing Payment...',
                    html: 'Please wait...',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                // Get order details for payment
                const response = await fetch(`/order/<%= order._id %>/retry-payment`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                const data = await response.json();
                
                if (!response.ok) {
                    throw new Error(data.message || 'Failed to initialize payment');
                }

                // Close loading dialog
                Swal.close();

                // Initialize Razorpay
                const options = {
                    key: data.razorpayKeyId,
                    amount: data.amount,
                    currency: data.currency,
                    order_id: data.orderId,
                    name: 'Your Store Name',
                    description: 'Order Payment',
                    handler: async function (response) {
                        try {
                            // Show processing state
                            Swal.fire({
                                title: 'Processing Payment...',
                                html: 'Please wait...',
                                allowOutsideClick: false,
                                didOpen: () => {
                                    Swal.showLoading();
                                }
                            });

                            // Verify payment
                            const verifyResponse = await fetch(`/order/<%= order._id %>/verify-payment`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_signature: response.razorpay_signature
                                })
                            });

                            const verifyData = await verifyResponse.json();

                            if (verifyData.success) {
                                await Swal.fire({
                                    title: 'Success!',
                                    text: 'Payment successful',
                                    icon: 'success',
                                    timer: 2000,
                                    showConfirmButton: false
                                });
                                location.reload();
                            } else {
                                throw new Error(verifyData.message || 'Payment verification failed');
                            }
                        } catch (error) {
                            console.error('Payment verification error:', error);
                            Swal.fire({
                                title: 'Error!',
                                text: error.message || 'Payment verification failed',
                                icon: 'error',
                                confirmButtonColor: '#dc3545'
                            });
                        }
                    },
                    prefill: {
                        name: '<%= order.shippingAddress?.fullName %>',
                        contact: '<%= order.shippingAddress?.phone %>',
                    },
                    theme: {
                        color: 'hsl(227deg 71% 51% / 1)'
                    }
                };

                const rzp = new Razorpay(options);
                rzp.open();

            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    title: 'Error!',
                    text: error.message || 'Failed to initialize payment',
                    icon: 'error',
                    confirmButtonColor: '#dc3545'
                });
            }
        });

        function checkStockLimits() {
            // Get items data from the hidden input field
            const orderItemsData = document.getElementById('orderItemsData');
            const items = JSON.parse(orderItemsData.value);
            const stockWarnings = [];

            items.forEach(function(item) {
                if (item.product && item.product.sizes) {
                    const sizeObj = item.product.sizes.find(function(s) {
                        return Number(s.size) === Number(item.size);
                    });
                    const stockAvailable = sizeObj ? sizeObj.quantity : 0;
                    const maxAllowed = Math.min(stockAvailable, 3);

                    if (stockAvailable === 0) {
                        stockWarnings.push({
                            product: item.product.name,
                            size: item.size,
                            type: 'out_of_stock',
                            message: item.product.name + ' (Size ' + item.size + ') is out of stock'
                        });
                    } else if (item.quantity > maxAllowed) {
                        stockWarnings.push({
                            product: item.product.name,
                            size: item.size,
                            type: 'over_limit',
                            current: item.quantity,
                            max: maxAllowed,
                            message: item.product.name + ' (Size ' + item.size + ') exceeds the maximum limit. Current: ' + item.quantity + ', Maximum allowed: ' + maxAllowed
                        });
                    }
                }
            });

            if (stockWarnings.length > 0) {
                var warningHtml = '<div class="stock-alerts">';
                
                // Group warnings by type
                var outOfStock = stockWarnings.filter(function(w) { 
                    return w.type === 'out_of_stock';
                });
                var overLimit = stockWarnings.filter(function(w) {
                    return w.type === 'over_limit';
                });

                if (outOfStock.length > 0) {
                    warningHtml += '<div class="alert-section">' +
                        '<h6 class="text-danger"><i class="bi bi-x-circle"></i> Out of Stock Items:</h6>' +
                        '<ul>' +
                        outOfStock.map(function(w) {
                            return '<li>' + w.message + '</li>';
                        }).join('') +
                        '</ul>' +
                        '</div>';
                }

                if (overLimit.length > 0) {
                    warningHtml += '<div class="alert-section">' +
                        '<h6 class="text-warning"><i class="bi bi-exclamation-triangle"></i> Quantity Limit Exceeded:</h6>' +
                        '<ul>' +
                        overLimit.map(function(w) {
                            return '<li>' + w.message + '</li>';
                        }).join('') +
                        '</ul>' +
                        '</div>';
                }

                warningHtml += '</div>';

                Swal.fire({
                    title: 'Stock Warning',
                    html: warningHtml,
                    icon: 'warning',
                    confirmButtonText: 'Review Order',
                    showCancelButton: true,
                    cancelButtonText: 'Dismiss',
                    customClass: {
                        container: 'stock-alert-container',
                        popup: 'stock-alert-popup',
                        content: 'stock-alert-content'
                    }
                }).then(function(result) {
                    if (result.isConfirmed) {
                        var firstWarningItem = document.querySelector('.stock-warning, .stock-error');
                        if (firstWarningItem) {
                            firstWarningItem.scrollIntoView({ behavior: 'smooth', block: 'center' });
                        }
                    }
                });
            }
        }

        // Call the function when the page loads
        document.addEventListener('DOMContentLoaded', checkStockLimits);

        // Add updateQuantity function
        function updateQuantity(itemId, change) {
            const button = event.target;
            const container = button.closest('.d-flex');
            const input = container.querySelector('.quantity-input');
            const currentValue = parseInt(input.value);
            const maxStock = parseInt(input.getAttribute('data-max-stock'));
            const maxLimit = 3; // Maximum limit per product
            const newValue = currentValue + change;

            // Always show warning if attempting to exceed limits
            if (newValue > maxStock || newValue > maxLimit) {
                let warningMessage = '';
                let warningTitle = '';

                if (newValue > maxStock) {
                    warningTitle = 'Stock Limit Exceeded';
                    warningMessage = `
                        <div class="stock-warning-message">
                            <i class="bi bi-exclamation-triangle-fill text-warning"></i>
                            <p>Cannot add more items!</p>
                            <p>Only ${maxStock} items available in stock.</p>
                            <p>Current quantity: ${currentValue}</p>
                        </div>
                    `;
                } else {
                    warningTitle = 'Maximum Limit Exceeded';
                    warningMessage = `
                        <div class="stock-warning-message">
                            <i class="bi bi-exclamation-triangle-fill text-warning"></i>
                            <p>Cannot add more items!</p>
                            <p>Maximum ${maxLimit} items allowed per product.</p>
                            <p>Current quantity: ${currentValue}</p>
                        </div>
                    `;
                }

                Swal.fire({
                    title: warningTitle,
                    html: warningMessage,
                    icon: 'warning',
                    showCancelButton: false,
                    confirmButtonColor: '#3085d6',
                    confirmButtonText: 'OK',
                    customClass: {
                        popup: 'stock-warning-popup'
                    }
                });
                return;
            }

            // Check if new value would be less than 1
            if (newValue < 1) {
                Swal.fire({
                    title: 'Minimum Quantity',
                    html: `
                        <div class="stock-warning-message">
                            <i class="bi bi-exclamation-circle text-info"></i>
                            <p>Quantity cannot be less than 1</p>
                        </div>
                    `,
                    icon: 'info',
                    confirmButtonColor: '#3085d6',
                    confirmButtonText: 'OK'
                });
                return;
            }

            // Only proceed with the update if within limits
            if (newValue >= 1 && newValue <= maxStock && newValue <= maxLimit) {
                // Update the quantity
                fetch(`/cart/update/${itemId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ quantity: newValue })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        input.value = newValue;
                        updateOrderSummary(data.cart);
                    } else {
                        Swal.fire({
                            title: 'Error',
                            text: data.message || 'Failed to update quantity',
                            icon: 'error',
                            confirmButtonColor: '#3085d6'
                        });
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire({
                        title: 'Error',
                        text: 'Failed to update quantity',
                        icon: 'error',
                        confirmButtonColor: '#3085d6'
                    });
                });
            }
        }

        // Add event listeners for quantity buttons
        document.addEventListener('DOMContentLoaded', function() {
            // Add debug logging for initial setup
            console.log('Setting up quantity controls...');
            
            const quantityControls = document.querySelectorAll('.quantity-input');
            console.log('Found quantity controls:', quantityControls.length);

            quantityControls.forEach(input => {
                const container = input.closest('.d-flex');
                const decreaseBtn = container.querySelector('button:first-child');
                const increaseBtn = container.querySelector('button:last-child');
                const maxStock = parseInt(input.getAttribute('data-max-stock'));

                console.log('Max stock for item:', maxStock);

                // Add click handlers with explicit event parameter
                decreaseBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    const itemId = input.getAttribute('data-item-id');
                    updateQuantity(itemId, -1);
                });

                increaseBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    const itemId = input.getAttribute('data-item-id');
                    updateQuantity(itemId, 1);
                });

                // Handle direct input changes
                input.addEventListener('change', function(e) {
                    const itemId = this.getAttribute('data-item-id');
                    const newValue = parseInt(this.value);
                    const maxStock = parseInt(this.getAttribute('data-max-stock'));
                    const maxLimit = 3;

                    if (newValue > maxStock || newValue > maxLimit) {
                        const warningTitle = newValue > maxStock ? 'Stock Limit Exceeded' : 'Maximum Limit Exceeded';
                        const warningMessage = newValue > maxStock ?
                            `Only ${maxStock} items available in stock.` :
                            `Maximum ${maxLimit} items allowed per product.`;

                        Swal.fire({
                            title: warningTitle,
                            html: `
                                <div class="stock-warning-message">
                                    <i class="bi bi-exclamation-triangle-fill text-warning"></i>
                                    <p>Cannot set this quantity!</p>
                                    <p>${warningMessage}</p>
                                </div>
                            `,
                            icon: 'warning',
                            confirmButtonColor: '#3085d6',
                            confirmButtonText: 'OK'
                        });
                        this.value = Math.min(maxStock, maxLimit);
                        return;
                    }

                    if (newValue < 1) {
                        Swal.fire({
                            title: 'Minimum Quantity',
                            html: `
                                <div class="stock-warning-message">
                                    <i class="bi bi-exclamation-circle text-info"></i>
                                    <p>Quantity cannot be less than 1</p>
                                </div>
                            `,
                            icon: 'info',
                            confirmButtonColor: '#3085d6',
                            confirmButtonText: 'OK'
                        });
                        this.value = 1;
                        return;
                    }
                });
            });
        });

        // Add updateOrderSummary function
        function updateOrderSummary(cart) {
            const subtotal = cart.items
                .filter(item => item.status !== 'Cancelled' && item.status !== 'Returned')
                .reduce((total, item) => total + (item.price * item.quantity), 0);

            // Update subtotal
            document.querySelectorAll('.subtotal').forEach(el => {
                el.textContent = `₹${subtotal.toFixed(2)}`;
            });

            // Update total (since shipping is free, total equals subtotal)
            document.querySelectorAll('.total').forEach(el => {
                el.textContent = `₹${subtotal.toFixed(2)}`;
            });

            // Update individual item totals
            cart.items.forEach(item => {
                const itemTotal = item.price * item.quantity;
                document.querySelectorAll(`[data-item-id="${item._id}"]`).forEach(el => {
                    const totalEl = el.querySelector('.item-total');
                    if (totalEl) {
                        totalEl.textContent = `₹${itemTotal.toFixed(2)}`;
                    }
                });
            });
        }
    </script>
</body>
</html>
