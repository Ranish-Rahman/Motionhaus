<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>The Tastemaker - Change Password</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
  <style>
    :root {
      --primary-purple: #090909f5;
      --sidebar-width: 250px;
    }

    body {
      margin: 0;
      font-family: 'Inter', sans-serif;
      background-color: #f8f9fa;
      padding-top: 60px; /* Add padding for fixed navbar */
      height: 100vh;
      overflow-y: hidden; /* Prevent body scrolling */
    }

    .layout {
      display: flex;
      height: calc(100vh - 60px); /* Use full height minus navbar */
      overflow: hidden; /* Prevent layout scrolling */
    }

    .sidebar {
      width: var(--sidebar-width);
      background: var(--primary-purple);
      padding: 2rem 1.5rem;
      color: white;
      position: fixed;
      height: calc(100vh - 60px); /* Adjust for navbar height */
      left: 0;
      top: 60px; /* Position below navbar */
      z-index: 10;
      border-right: 1px solid #232326;
      overflow-y: auto; /* Allow sidebar to scroll if needed */
    }

    .sidebar-logo {
      font-size: 1.5rem;
      font-weight: bold;
      margin-bottom: 3rem;
      color: white;
      text-decoration: none;
      display: block;
    }

    .nav-link {
      color: rgba(255, 255, 255, 0.8);
      padding: 0.75rem 1rem;
      display: flex;
      align-items: center;
      gap: 1rem;
      text-decoration: none;
      transition: all 0.3s ease;
      border-radius: 8px;
    }

    .nav-link:hover,
    .nav-link.active {
      color: white;
      background: rgba(255, 255, 255, 0.1);
    }

    .nav-link i {
      font-size: 1.2rem;
    }

    .main-content {
      margin-left: var(--sidebar-width);
      flex-grow: 1;
      padding: 2rem;
      background-color: #131314;
      height: calc(100vh - 60px); /* Full height minus navbar */
      overflow: hidden; /* Prevent main content scrolling */
    }

    .content-wrapper {
      background-image: url("/images");
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
      border-radius: 20px;
      padding: 3rem;
      height: 100%; /* Full height of parent */
      overflow-y: auto; /* Only allow content wrapper to scroll */
      position: relative;
    }

    .content-header {
      color: white;
      margin-bottom: 4rem;
      text-align: center;
    }

    .content-header h1 {
      font-size: 3.5rem;
      font-weight: 600;
      margin-bottom: 1rem;
    }

    .content-header p {
      font-size: 1.2rem;
      opacity: 0.9;
    }

    .content-body {
      margin-top: 2rem;
    }

    .profile-section {
      background: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(10px);
      border-radius: 20px;
      padding: 2rem;
      color: white;
      margin-bottom: 2rem;
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .form-control {
      background-color: rgba(255, 255, 255, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
      color: white;
    }

    .form-control:focus {
      background-color: rgba(255, 255, 255, 0.15);
      border-color: rgba(255, 255, 255, 0.3);
      color: white;
      box-shadow: 0 0 0 0.25rem rgba(255, 255, 255, 0.1);
    }

    .form-control::placeholder {
      color: rgba(255, 255, 255, 0.5);
    }

    .btn-primary {
      background-color: #ff7675;
      border-color: #ff7675;
    }

    .btn-primary:hover {
      background-color: #e66767;
      border-color: #e66767;
    }

    .alert {
      background-color: rgba(255, 255, 255, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
      color: white;
    }

    .alert-success {
      border-left: 4px solid #00b894;
    }

    .alert-danger {
      border-left: 4px solid #ff7675;
    }

    .password-requirements {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 10px;
      padding: 1rem;
      margin-top: 1rem;
    }

    .password-requirements ul {
      margin: 0;
      padding-left: 1.5rem;
      color: rgba(255, 255, 255, 0.8);
    }

    .password-requirements li {
      margin-bottom: 0.5rem;
    }

    .password-requirements li.valid {
      color: #00b894;
    }

    .password-requirements li.invalid {
      color: #ff7675;
    }

    /* Password strength indicator styles */
    .password-strength {
      height: 5px;
      margin-top: 5px;
      border-radius: 3px;
      transition: all 0.3s ease;
    }
    .strength-weak {
      background: #ff4444;
      width: 30%;
    }
    .strength-medium {
      background: #ffbb33;
      width: 60%;
    }
    .strength-strong {
      background: #00C851;
      width: 100%;
    }

    /* Password visibility toggle button styles */
    .password-toggle-btn {
      border: 1px solid rgba(255, 255, 255, 0.2);
      background: transparent;
      color: rgba(255, 255, 255, 0.8);
      padding: 0.375rem 0.75rem;
      transition: all 0.3s ease;
    }
    
    .password-toggle-btn:hover {
      background: rgba(255, 255, 255, 0.1);
      color: white;
    }

    .password-toggle-btn:focus {
      outline: none;
      box-shadow: none;
    }

    .input-group-text {
      background: transparent;
      border-color: rgba(255, 255, 255, 0.2);
    }

    /* Make password fields consistent width */
    .password-input-group {
      width: 100%;
    }
  </style>
</head>
<body>
  <%- include('../partials/navbar') %>
  <div class="layout">
    <!-- Include the common sidebar -->
    <%- include('../partials/user-profile-sidebar', { currentPage: 'change-password' }) %>

    <!-- Main Content -->
    <main class="main-content">
      <div class="content-wrapper">
        <div class="content-header">
          <h1>Change Password</h1>
          <p>Update your account password</p>
        </div>

        <div class="content-body">
          <% if (typeof error !== 'undefined' && error) { %>
            <div class="alert alert-danger mb-4" role="alert">
              <%= error %>
            </div>
          <% } %>
          
          <% if (typeof success !== 'undefined' && success) { %>
            <div class="alert alert-success mb-4" role="alert">
              <%= success %>
            </div>
          <% } %>

          <div class="profile-section">
            <form action="/profile/change-password" method="POST" class="row g-4" id="changePasswordForm">
              <div class="col-12">
                <label for="currentPassword" class="form-label">Current Password</label>
                <div class="input-group password-input-group">
                  <input type="password" class="form-control <%= (typeof error !== 'undefined' && error) ? 'is-invalid' : '' %>" 
                         id="currentPassword" name="currentPassword">
                  <button class="btn password-toggle-btn" type="button" onclick="togglePassword('currentPassword')" tabindex="-1">
                    <i class="bi bi-eye-fill"></i>
                  </button>
                </div>
                <div class="invalid-feedback">
                  <%= typeof error !== 'undefined' ? error : 'Please enter your current password' %>
                </div>
              </div>
              
              <div class="col-12">
                <label for="newPassword" class="form-label">New Password</label>
                <div class="input-group password-input-group">
                  <input type="password" class="form-control" id="newPassword" name="newPassword">
                  <button class="btn password-toggle-btn" type="button" onclick="togglePassword('newPassword')" tabindex="-1">
                    <i class="bi bi-eye-fill"></i>
                  </button>
                </div>
                <div class="password-strength mt-2" id="passwordStrength"></div>
                <div class="invalid-feedback">Please enter a valid new password</div>
              </div>
              
              <div class="col-12">
                <label for="confirmPassword" class="form-label">Confirm New Password</label>
                <div class="input-group password-input-group">
                  <input type="password" class="form-control" id="confirmPassword" name="confirmPassword">
                  <button class="btn password-toggle-btn" type="button" onclick="togglePassword('confirmPassword')" tabindex="-1">
                    <i class="bi bi-eye-fill"></i>
                  </button>
                </div>
                <div class="invalid-feedback">Passwords do not match</div>
              </div>

              <div class="col-12">
                <div class="password-requirements">
                  <h6 class="mb-3">Password Requirements:</h6>
                  <ul>
                    <li id="length">At least 8 characters long</li>
                    <li id="uppercase">Contains at least one uppercase letter</li>
                    <li id="lowercase">Contains at least one lowercase letter</li>
                    <li id="number">Contains at least one number</li>
                    <li id="special">Contains at least one special character</li>
                  </ul>
                </div>
              </div>

              <div class="col-12">
                <button type="submit" class="btn btn-primary" id="changePasswordBtn">Change Password</button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </main>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const form = document.getElementById('changePasswordForm');
      const newPassword = document.getElementById('newPassword');
      const confirmPassword = document.getElementById('confirmPassword');
      const currentPassword = document.getElementById('currentPassword');
      const changePasswordBtn = document.getElementById('changePasswordBtn');
      const requirements = {
        length: document.getElementById('length'),
        uppercase: document.getElementById('uppercase'),
        lowercase: document.getElementById('lowercase'),
        number: document.getElementById('number'),
        special: document.getElementById('special')
      };

      // Fetch password rules from server
      async function getPasswordRules() {
        try {
          const response = await fetch('/api/password-rules');
          const rules = await response.json();
          return rules;
        } catch (error) {
          console.error('Error fetching password rules:', error);
          // Fallback to default rules if server request fails
          return {
            minLength: 8,
            patterns: {
              uppercase: '[A-Z]',
              lowercase: '[a-z]',
              number: '[0-9]',
              special: '[@$!%*?&]'
            }
          };
        }
      }

      let passwordRules;

      // Initialize password rules
      getPasswordRules().then(rules => {
        passwordRules = rules;
        // Update length requirement text
        requirements.length.textContent = `At least ${rules.minLength} characters long`;
      });

      // Password visibility toggle
      window.togglePassword = function(inputId) {
        const input = document.getElementById(inputId);
        const icon = input.nextElementSibling.querySelector('i');
        
        if (input.type === 'password') {
          input.type = 'text';
          icon.classList.replace('bi-eye-fill', 'bi-eye-slash-fill');
          input.nextElementSibling.setAttribute('title', 'Hide password');
        } else {
          input.type = 'password';
          icon.classList.replace('bi-eye-slash-fill', 'bi-eye-fill');
          input.nextElementSibling.setAttribute('title', 'Show password');
        }
      };

      // Password strength checker
      function validatePassword() {
        if (!passwordRules) return false;
        
        const password = newPassword.value;
        const strengthBar = document.getElementById('passwordStrength');
        let validCount = 0;

        // Check length requirement
        if (password.length >= passwordRules.minLength) {
          requirements.length.classList.add('valid');
          requirements.length.classList.remove('invalid');
          validCount++;
        } else {
          requirements.length.classList.add('invalid');
          requirements.length.classList.remove('valid');
        }

        // Check pattern requirements
        Object.entries(passwordRules.patterns).forEach(([key, pattern]) => {
          const regex = new RegExp(pattern);
          if (regex.test(password)) {
            requirements[key].classList.add('valid');
            requirements[key].classList.remove('invalid');
            validCount++;
          } else {
            requirements[key].classList.add('invalid');
            requirements[key].classList.remove('valid');
          }
        });

        // Update strength bar
        strengthBar.className = 'password-strength';
        if (validCount < 3) {
          strengthBar.classList.add('strength-weak');
        } else if (validCount < 5) {
          strengthBar.classList.add('strength-medium');
        } else {
          strengthBar.classList.add('strength-strong');
        }

        return validCount === 5;
      }

      // Add event listeners
      newPassword.addEventListener('input', validatePassword);
      confirmPassword.addEventListener('input', function() {
        if (newPassword.value !== confirmPassword.value) {
          confirmPassword.classList.add('is-invalid');
        } else {
          confirmPassword.classList.remove('is-invalid');
        }
      });

      // Form submission
      form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Check all validations
        const isValid = validatePassword() && 
                       newPassword.value === confirmPassword.value &&
                       currentPassword.value.length > 0;

        if (!isValid) {
          // Show error message
          const errorAlert = document.createElement('div');
          errorAlert.className = 'alert alert-danger mb-4';
          let errorMessage = '';
          
          if (!currentPassword.value.length) {
            errorMessage = 'Please enter your current password. ';
          }
          if (!validatePassword()) {
            errorMessage += 'Please meet all password requirements. ';
          }
          if (newPassword.value !== confirmPassword.value) {
            errorMessage += 'New passwords do not match. ';
          }
          
          // Remove any existing error alerts
          const existingAlerts = form.parentElement.querySelectorAll('.alert');
          existingAlerts.forEach(alert => alert.remove());
          
          errorAlert.textContent = errorMessage || 'Please check all password requirements.';
          form.insertAdjacentElement('beforebegin', errorAlert);

          // Remove error message after delay
          setTimeout(() => {
            errorAlert.remove();
          }, 5000);
          return;
        }

        // If validation passes, submit the form normally
        form.submit();
      });
    });
  </script>
</body>
</html> 