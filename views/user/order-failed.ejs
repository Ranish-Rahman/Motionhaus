<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Payment Failed - MotionHaus</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
            margin: 0;
            padding: 0;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            background: #fff;
        }

        .main-content {
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 40px 20px;
            background-color: #fff;
        }

        .failed-container {
            max-width: 800px;
            width: 100%;
            text-align: center;
            padding: 60px 40px;
        }

        h1 {
            font-size: 64px;
            color: #333;
            margin-bottom: 24px;
            font-weight: 700;
        }

        .message {
            font-size: 20px;
            color: #666;
            margin-bottom: 16px;
            line-height: 1.5;
        }

        .sub-message {
            font-size: 18px;
            color: #666;
            margin-bottom: 40px;
            line-height: 1.4;
        }

        .action-button {
            display: inline-block;
            background-color: #1DB954;
            color: white;
            padding: 16px 48px;
            border-radius: 500px;
            font-size: 16px;
            font-weight: 600;
            text-decoration: none;
            text-transform: uppercase;
            letter-spacing: 1px;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 32px;
        }

        .action-button:hover {
            background-color: #1ed760;
            transform: scale(1.02);
        }

        .secondary-links {
            margin-top: 32px;
            display: flex;
            justify-content: center;
            gap: 24px;
        }

        .secondary-link {
            color: #666;
            text-decoration: none;
            font-size: 14px;
            font-weight: 500;
        }

        .secondary-link:hover {
            color: #1DB954;
            text-decoration: underline;
        }

        .device-links {
            margin-top: 48px;
            border-top: 1px solid #eee;
            padding-top: 24px;
        }

        .device-links span {
            color: #666;
            font-size: 14px;
            margin-right: 16px;
        }

        .device-link {
            color: #666;
            text-decoration: none;
            font-size: 14px;
            margin: 0 8px;
        }

        .device-link:hover {
            color: #1DB954;
        }

        .support-text {
            margin-top: 32px;
            font-size: 14px;
            color: #666;
        }

        .support-text a {
            color: #1DB954;
            text-decoration: none;
        }

        .support-text a:hover {
            text-decoration: underline;
        }

        .order-details {
            margin: 24px 0;
            font-size: 14px;
            color: #666;
            background-color: #f7f7f7;
            padding: 12px 24px;
            border-radius: 8px;
            display: inline-block;
        }
    </style>
</head>
<body>
    <%- include('../partials/header') %>

    <div class="main-content">
        <div class="failed-container">
            <h1>Oh no, your payment failed</h1>
            <p class="message">Don't worry. We'll try your payment again over the next few days.</p>
            <p class="sub-message">To keep shopping with MotionHaus, you may need to update your payment details.</p>
            
            <% if (orderId) { %>
                <div class="order-details">
                    Order ID: <%= orderId %>
                </div>
            <% } %>

            <% if (shippingAddress && shippingAddress.fullName) { %>
                <button onclick="retryPayment()" class="action-button">Try again</button>
            <% } else { %>
                <div style="margin: 20px 0; padding: 16px; background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px; color: #856404;">
                    <strong>Retry not available:</strong> Shipping address information is missing. Please place a new order.
                </div>
            <% } %>

            <div class="secondary-links">
                <a href="/profile/orders" class="secondary-link">View Orders</a>
                <a href="/contact" class="secondary-link">Contact Us</a>
            </div>

            <div class="device-links">
                <span>Get MotionHaus for:</span>
                <a href="#" class="device-link">iOS</a>
                <a href="#" class="device-link">Android</a>
                <a href="#" class="device-link">Web</a>
            </div>

            <p class="support-text">
                Need help? Contact our support team at 
                <a href="mailto:support@motionhaus.com">support@motionhaus.com</a>
            </p>
        </div>
    </div>


    <script>
        async function retryPayment() {
            try {
                // Get our internal order ID from the page
                const orderId = '<%= orderId %>';
                console.log('[Debug] Starting payment retry for order:', orderId);
                
                if (!orderId) {
                    throw new Error('Order ID not found');
                }

                // Show loading state
                Swal.fire({
                    title: 'Initializing Payment...',
                    text: 'Please wait...',
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    showConfirmButton: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                // Get shipping address from the failed order
                const shippingAddress = JSON.parse('<%- JSON.stringify(shippingAddress || {}) %>');
                console.log('[Debug] Shipping address for retry:', shippingAddress);
                
                if (!shippingAddress || !shippingAddress.fullName) {
                    throw new Error('Shipping address not found. Please try placing your order again.');
                }
                
                // Create new Razorpay order for retry
                console.log('[Debug] Creating Razorpay order for retry...');
                
                const response = await fetch('/order/create-razorpay-order', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({
                        retryOrderId: orderId,
                        isRetry: true,
                        addressId: shippingAddress._id, // Include the address ID
                        shippingAddress: shippingAddress // Include full address data as fallback
                    }),
                    credentials: 'same-origin'
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    console.error('[Debug] Server error response:', errorData);
                    throw new Error(errorData?.message || `Server error: ${response.status} ${response.statusText}`);
                }

                const responseData = await response.json();
                if (!responseData.success) {
                    throw new Error(responseData.message || 'Failed to create payment order');
                }

                // Close loading dialog
                Swal.close();

                // Verify Razorpay is loaded
                if (typeof Razorpay === 'undefined') {
                    throw new Error('Razorpay SDK not loaded. Please refresh the page.');
                }

                // Configure Razorpay options
                const razorpayOptions = {
                    key: '<%= process.env.RAZORPAY_KEY_ID %>',
                    amount: responseData.amount,
                    currency: responseData.currency || 'INR',
                    name: 'MotionHaus',
                    description: `Total: ₹${(responseData.amount / 100).toFixed(2)} ${responseData.notes?.discountAmount > 0 ? 
                        `(Original: ₹${(responseData.notes.originalAmount).toFixed(2)}, You Save: ₹${(responseData.notes.discountAmount).toFixed(2)})` : ''}`,
                    order_id: responseData.orderId,
                    prefill: {
                        name: responseData.customerName || '',
                        email: responseData.customerEmail || '',
                        contact: responseData.customerPhone || ''
                    },
                    notes: {
                        orderID: responseData.receipt || orderId,
                        originalAmount: responseData.notes?.originalAmount,
                        discountAmount: responseData.notes?.discountAmount,
                        finalAmount: responseData.notes?.finalAmount
                    },
                    handler: async function(response) {
                        console.log('[Debug] Payment success response:', response);
                        try {
                            // Show processing state
                            Swal.fire({
                                title: 'Verifying Payment...',
                                text: 'Please wait...',
                                allowOutsideClick: false,
                                allowEscapeKey: false,
                                showConfirmButton: false,
                                didOpen: () => {
                                    Swal.showLoading();
                                }
                            });

                            // Verify the payment
                            const verifyResponse = await fetch('/order/verify-payment', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_signature: response.razorpay_signature,
                                    orderID: orderId,
                                    isRetry: true
                                }),
                                credentials: 'same-origin'
                            });

                            const verifyData = await verifyResponse.json();
                            console.log('[Debug] Verification response:', verifyData);

                            if (verifyData.success) {
                                window.location.href = `/order/success/${verifyData.orderID}`;
                            } else {
                                throw new Error(verifyData.message || 'Payment verification failed');
                            }
                        } catch (error) {
                            console.error('[Debug] Payment verification error:', error);
                            await handlePaymentError(error, {
                                orderID: orderId,
                                razorpayOrderId: response.razorpay_order_id
                            });
                        }
                    },
                    modal: {
                        ondismiss: async function() {
                            console.log('[Debug] Payment modal dismissed');
                            try {
                                await handlePaymentCancellation({
                                        orderID: orderId,
                                    razorpayOrderId: responseData.orderId
                                });
                            } catch (error) {
                                console.error('[Debug] Error in modal dismiss:', error);
                                window.location.href = `/order/failed/${orderId}?error=${encodeURIComponent('Payment cancelled')}`;
                            }
                        }
                    }
                };

                console.log('[Debug] Initializing Razorpay with options:', razorpayOptions);
                const rzp = new Razorpay(razorpayOptions);
                
                // Add payment failed handler
                rzp.on('payment.failed', async function(response) {
                    console.error('[Debug] Payment failed:', response.error);
                    await handlePaymentError(response.error, {
                        orderID: orderId,
                        razorpayOrderId: responseData.orderId
                    });
                });

                rzp.open();

            } catch (error) {
                console.error('[Debug] Payment retry error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to initiate payment',
                    confirmButtonColor: '#000',
                    showConfirmButton: true,
                    confirmButtonText: 'View Orders',
                    allowOutsideClick: false
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = '/profile/orders';
                    }
                });
            }
        }

        // Helper function to handle payment errors
        async function handlePaymentError(error, order) {
            console.error('[Debug] Payment error:', error);
            console.log('[Debug] Order data:', order);
            try {
                // Show error message to user
                await Swal.fire({
                    title: 'Payment Failed',
                    text: error.description || error.message || 'Your payment could not be processed',
                    icon: 'error',
                    confirmButtonColor: '#000'
                });

                // Handle the failed payment in backend
                const response = await fetch('/order/payment-failed', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        orderID: order.orderID,
                        razorpayOrderId: order.razorpayOrderId,
                        error: error.description || error.message || 'Payment failed'
                    }),
                    credentials: 'same-origin'
                });

                if (!response.ok) {
                    throw new Error('Failed to handle payment failure on server');
                }

                const result = await response.json();
                console.log('[Debug] Payment failure handled:', result);
                
                // Redirect to failed order page
                window.location.href = `/order/failed/${order.orderID}?error=${encodeURIComponent(error.description || error.message || 'Payment failed')}`;
            } catch (handlingError) {
                console.error('[Debug] Error while handling payment failure:', handlingError);
                window.location.href = `/order/failed/${order.orderID || 'unknown'}?error=${encodeURIComponent('Error processing payment failure')}`;
            }
        }

        // Helper function to handle payment cancellation
        async function handlePaymentCancellation(order) {
            console.log('[Debug] Handling payment cancellation', order);
            try {
                // Show cancellation message
                await Swal.fire({
                    title: 'Payment Cancelled',
                    text: 'You have cancelled the payment',
                    icon: 'info',
                    confirmButtonColor: '#000'
                });

                // Handle the cancellation in backend
                const response = await fetch('/order/cancel-razorpay-order', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        orderID: order.orderID,
                        razorpayOrderId: order.razorpayOrderId,
                        isRetry: true
                    }),
                    credentials: 'same-origin'
                });

                if (!response.ok) {
                    throw new Error('Failed to handle cancellation on server');
                }

                const result = await response.json();
                console.log('[Debug] Cancellation handled:', result);

                // Redirect to failed order page with cancellation message
                window.location.href = `/order/failed/${order.orderID}?error=${encodeURIComponent('Payment cancelled by user')}`;
            } catch (error) {
                console.error('[Debug] Error in cancellation handler:', error);
                window.location.href = `/order/failed/${order.orderID || 'unknown'}?error=${encodeURIComponent('Error while cancelling payment')}`;
            }
        }
    </script>
</body>
</html> 