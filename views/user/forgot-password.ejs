<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Forgot Password</title>
</head>
<body>
  <header class="header">
    <div class="logo">MotionHaus</div>
    <a href="/login" class="back">&larr; Back to Login</a>
  </header>

  <div class="container">
    <div class="form-container">
      <h2>Reset Password</h2>
      <p>Enter your email to receive reset instructions</p>

      <form id="forgotPasswordForm">
        <label for="email">Email address</label>
        <input type="email" id="email" name="email" required />
        <div class="error" id="emailError"></div>

        <button type="submit" class="submit-btn">Send Reset Instructions</button>
      </form>
    </div>
  </div>

  <!-- OTP Modal -->
  <div id="otpModal" class="otp-modal hidden">
    <div class="otp-content">
      <h3>Enter Reset Code</h3>
      <p class="otp-subtext">Please enter the code sent to your email</p>

      <!-- OTP Error Message -->
      <p id="otpError" class="otp-error hidden"></p>

      <div class="otp-inputs">
        <input type="text" maxlength="1" class="otp-box" />
        <input type="text" maxlength="1" class="otp-box" />
        <input type="text" maxlength="1" class="otp-box" />
        <input type="text" maxlength="1" class="otp-box" />
        <input type="text" maxlength="1" class="otp-box" />
        <input type="text" maxlength="1" class="otp-box" />
      </div>

      <div class="password-reset">
        <label for="newPassword">New Password</label>
        <div class="password-wrapper">
          <input type="password" id="newPassword" name="newPassword" required />
          <span class="toggle-password">Hide</span>
        </div>
        <div class="error" id="passwordError"></div>
      </div>

      <button id="resetPassword" class="otp-verify-btn">Reset Password</button>
      <button id="cancelReset" type="button" class="cancel-otp-btn">Cancel</button>

      <div class="otp-footer">
        <button id="resendReset" class="otp-resend">Resend Code</button>
        <div id="resendTimer" class="otp-timer hidden"></div>
        <p id="resendMessage" class="otp-error hidden"></p>
      </div>
    </div>
  </div>

  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Segoe UI', sans-serif;
    }

    body {
      background-color: #fff;
      color: #333;
      min-height: 100vh;
    }

    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 20px 40px;
      border-bottom: 2px solid #00a3ff;
      font-weight: bold;
    }

    .logo {
      font-size: 20px;
    }

    .back {
      color: #333;
      text-decoration: none;
      font-size: 14px;
    }

    .container {
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: calc(100vh - 80px);
      padding: 20px;
    }

    
    .form-container {
      max-width: 400px;
      width: 100%;
      padding: 40px;
      background: #fff;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .form-container h2 {
      font-size: 28px;
      margin-bottom: 10px;
    }

    .form-container p {
      margin-bottom: 20px;
      color: #666;
      font-size: 14px;
    }

    form label {
      display: block;
      margin-bottom: 5px;
      font-size: 14px;
      color: #333;
    }

    form input {
      width: 100%;
      padding: 12px;
      margin-bottom: 16px;
      border: 1px solid #ccc;
      border-radius: 8px;
      font-size: 14px;
    }

    .submit-btn {
      width: 100%;
      background: #000;
      color: #fff;
      font-weight: bold;
      padding: 12px;
      border: none;
      border-radius: 30px;
      cursor: pointer;
      font-size: 16px;
    }

    .error {
      color: red;
      font-size: 13px;
      margin-top: 5px;
    }

    /* OTP Modal Styles */
    .otp-modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
    }

    .otp-content {
      background: white;
      padding: 32px;
      border-radius: 12px;
      width: 400px;
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
      text-align: center;
    }

    .otp-content h3 {
      font-size: 20px;
      margin-bottom: 10px;
      font-weight: 600;
    }

    .otp-subtext {
      font-size: 14px;
      color: #555;
      margin-bottom: 20px;
    }

    .otp-error {
      color: #9B1C1C;
      font-size: 12px;
      margin-bottom: 15px;
    }

    .otp-inputs {
      display: flex;
      gap: 10px;
      justify-content: center;
      margin-bottom: 20px;
    }

    .otp-box {
      width: 48px;
      height: 48px;
      text-align: center;
      font-size: 20px;
      border: 2px solid #ccc;
      border-radius: 8px;
    }

    .password-reset {
      margin-bottom: 20px;
      text-align: left;
    }

    .password-wrapper {
      position: relative;
      margin-bottom: 16px;
    }

    .password-wrapper input {
      width: 100%;
      padding: 12px 40px 12px 12px;
      border: 2px solid #e2e8f0;
      border-radius: 8px;
      font-size: 14px;
      transition: all 0.3s ease;
      background-color: #f8fafc;
    }

    .password-wrapper input:focus {
      outline: none;
      border-color: #00a3ff;
      background-color: #fff;
      box-shadow: 0 0 0 3px rgba(0, 163, 255, 0.1);
    }

    .toggle-password {
      position: absolute;
      top: 50%;
      right: 12px;
      transform: translateY(-50%);
      font-size: 13px;
      color: #64748b;
      cursor: pointer;
      transition: color 0.3s ease;
      background: none;
      border: none;
      padding: 0;
    }

    .toggle-password:hover {
      color: #00a3ff;
    }

    .password-reset label {
      display: block;
      margin-bottom: 8px;
      font-size: 14px;
      font-weight: 500;
      color: #1e293b;
    }

    .otp-verify-btn {
      width: 100%;
      padding: 12px;
      background-color: #000;
      color: white;
      font-weight: 600;
      border: none;
      border-radius: 8px;
      cursor: pointer;
    }

    .cancel-otp-btn {
      margin-top: 10px;
      background-color: transparent;
      color: #666;
      border: none;
      cursor: pointer;
      font-size: 14px;
      text-decoration: underline;
    }

    .otp-footer {
      margin-top: 20px;
    }

    .otp-resend {
      background: none;
      border: none;
      color: #1d4ed8;
      cursor: pointer;
      font-size: 14px;
      text-decoration: underline;
    }

    .otp-timer {
      margin-top: 8px;
      font-size: 13px;
      color: #666;
    }

    .hidden {
      display: none !important;
    }
  </style>

  <script>
    const forgotPasswordForm = document.getElementById('forgotPasswordForm');
    const emailInput = document.getElementById('email');
    const emailError = document.getElementById('emailError');
    const otpModal = document.getElementById('otpModal');
    const otpInputs = document.querySelectorAll('.otp-box');
    const otpError = document.getElementById('otpError');
    const newPasswordInput = document.getElementById('newPassword');
    const passwordError = document.getElementById('passwordError');
    const resetPasswordBtn = document.getElementById('resetPassword');
    const cancelResetBtn = document.getElementById('cancelReset');
    const resendResetBtn = document.getElementById('resendReset');
    const resendTimer = document.getElementById('resendTimer');
    const resendMessage = document.getElementById('resendMessage');
    const togglePassword = document.querySelector('.toggle-password');

    // Toggle password visibility
    togglePassword.addEventListener('click', () => {
      if (newPasswordInput.type === 'password') {
        newPasswordInput.type = 'text';
        togglePassword.textContent = 'Hide';
      } else {
        newPasswordInput.type = 'password';
        togglePassword.textContent = 'Show';
      }
    });

    // Handle forgot password form submission
    forgotPasswordForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      emailError.textContent = '';

      try {
        const response = await fetch('/forgot-password', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            email: emailInput.value
          })
        });

        const data = await response.json();
        
        if (data.success) {
          otpModal.classList.remove('hidden');
          otpInputs[0].focus();
        } else {
          emailError.textContent = data.message;
        }
      } catch (error) {
        console.error('Error:', error);
        emailError.textContent = 'An error occurred. Please try again.';
      }
    });

    // OTP input auto focus
    otpInputs.forEach((input, index) => {
      input.addEventListener('input', () => {
        if (input.value.length === 1 && index < otpInputs.length - 1) {
          otpInputs[index + 1].focus();
        }
      });

      input.addEventListener('keydown', (e) => {
        if (e.key === 'Backspace' && input.value === '' && index > 0) {
          otpInputs[index - 1].focus();
        }
      });
    });

    // Handle password reset
    resetPasswordBtn.addEventListener('click', async () => {
      const otpValue = Array.from(otpInputs).map(i => i.value).join('');
      const newPassword = newPasswordInput.value;
      
      otpError.textContent = '';
      passwordError.textContent = '';

      if (otpValue.length !== 6) {
        otpError.textContent = 'Please enter the full 6-digit code.';
        otpError.classList.remove('hidden');
        return;
      }

      if (!newPassword) {
        passwordError.textContent = 'Please enter a new password.';
        return;
      }

      try {
        const response = await fetch('/reset-password', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            token: otpValue,
            newPassword: newPassword
          })
        });

        const data = await response.json();
        
        if (data.success) {
          alert('Password reset successful!');
          window.location.href = '/login';
        } else {
          otpError.textContent = data.message;
          otpError.classList.remove('hidden');
        }
      } catch (error) {
        console.error('Error:', error);
        otpError.textContent = 'An error occurred. Please try again.';
        otpError.classList.remove('hidden');
      }
    });

    // Handle resend reset code
    resendResetBtn.addEventListener('click', async () => {
      if (resendResetBtn.disabled) return;

      resendResetBtn.disabled = true;
      resendMessage.classList.add('hidden');
      resendTimer.classList.remove('hidden');

      try {
        const response = await fetch('/forgot-password', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            email: emailInput.value
          })
        });

        const data = await response.json();
        
        if (data.success) {
          resendMessage.textContent = 'New reset code sent to your email.';
          startResendTimer();
        } else {
          resendMessage.textContent = data.message;
        }
        resendMessage.classList.remove('hidden');
      } catch (error) {
        console.error('Error:', error);
        resendMessage.textContent = 'Failed to resend code. Please try again.';
        resendMessage.classList.remove('hidden');
        resendResetBtn.disabled = false;
      }
    });

    // Timer function for resend cooldown
    function startResendTimer() {
      let timeLeft = 30;
      resendTimer.textContent = `Resend available in ${timeLeft}s`;
      
      const countdown = setInterval(() => {
        timeLeft--;
        resendTimer.textContent = `Resend available in ${timeLeft}s`;
        
        if (timeLeft <= 0) {
          clearInterval(countdown);
          resendTimer.classList.add('hidden');
          resendResetBtn.disabled = false;
        }
      }, 1000);
    }

    // Cancel reset
    cancelResetBtn.addEventListener('click', () => {
      otpModal.classList.add('hidden');
      otpInputs.forEach(input => input.value = '');
      newPasswordInput.value = '';
      otpError.classList.add('hidden');
      passwordError.textContent = '';
    });
  </script>
</body>
</html>