<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Add Category</title>
  <link rel="stylesheet" href="/css/sidebar.css?v=2">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(207deg, rgb(25, 25, 25), rgb(0, 0, 0));
      color: white;
      min-height: 100vh;
    }

    .app-layout {
      display: flex;
      min-height: 100vh;
    }

    .main-content {
      flex-grow: 1;
      padding: 40px;
      margin-left: 250px;
      overflow-y: auto;
    }

    .header {
      margin-bottom: 30px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .header h1 {
      font-size: 24px;
      margin-bottom: 5px;
      color: white;
    }

    .header p {
      font-size: 14px;
      color: #a0aec0;
    }

    .back-btn {
      background: #2b2d31;
      color: white;
      padding: 8px 16px;
      border-radius: 8px;
      text-decoration: none;
      display: flex;
      align-items: center;
      gap: 8px;
      transition: background 0.3s;
    }

    .back-btn:hover {
      background: #36373d;
      color: white;
    }

    .card {
      background-color: #1e1f22;
      border-radius: 16px;
      padding: 24px;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.4);
    }

    .form-group {
      margin-bottom: 20px;
    }

    .form-group label {
      display: block;
      margin-bottom: 8px;
      color: #a0aec0;
    }

    .form-control {
      width: 100%;
      padding: 12px;
      background-color: #2b2d31;
      border: 1px solid rgba(255, 255, 255, 0.1);
      border-radius: 8px;
      color: white;
      font-size: 14px;
    }

    .form-control:focus {
      outline: none;
      border-color: #00a3ff;
    }

    .submit-btn {
      background: #00a3ff;
      color: white;
      padding: 12px 24px;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      font-size: 16px;
      transition: background 0.3s;
    }

    .submit-btn:hover {
      background: #0088d4;
    }

    .alert {
      padding: 12px;
      border-radius: 8px;
      margin-bottom: 20px;
    }

    .alert-error {
      background-color: rgba(220, 53, 69, 0.1);
      border: 1px solid rgba(220, 53, 69, 0.2);
      color: #dc3545;
    }

    .alert-success {
      background-color: rgba(25, 135, 84, 0.1);
      border: 1px solid rgba(25, 135, 84, 0.2);
      color: #198754;
    }

    .error-message {
      color: #dc3545;
      font-size: 12px;
      margin-top: 4px;
      display: none; /* hidden until invalid */
    }

    .form-control.error {
      border-color: #dc3545;
    }

    .form-control.valid {
      border-color: #198754;
    }
  </style>
</head>
<body>
  <div class="app-layout">
    <%- include('../partials/sidebar') %>

    <main class="main-content">
      <div class="header">
        <div>
          <h1>Add New Category</h1>
          <p>Fill in the category details</p>
        </div>
        <a href="/admin/categories" class="back-btn">
          <i class="bi bi-arrow-left"></i>
          Back to Categories
        </a>
      </div>

      <% if (error) { %>
        <div class="alert alert-error">
          <%= error %>
        </div>
      <% } %>

      <% if (success) { %>
        <div class="alert alert-success">
          <%= success %>
        </div>
      <% } %>

      <div class="card">
        <form action="/admin/categories/add" method="POST" id="categoryForm">
          <div class="form-group">
            <label for="name">Category Name</label>
            <input type="text" id="name" name="name" class="form-control" required
                   minlength="2" maxlength="50" pattern="[a-zA-Z0-9\s-]+"
                   title="Category name can only contain letters, numbers, spaces, and hyphens">
            <div class="error-message" id="nameError" aria-live="polite"></div>
          </div>

          <div class="form-group">
            <label for="description">Description (Optional)</label>
            <textarea id="description" name="description" class="form-control" rows="4" maxlength="500"></textarea>
            <div class="error-message" id="descriptionError" aria-live="polite"></div>
          </div>

          <button type="submit" class="submit-btn">Add Category</button>
        </form>
      </div>
    </main>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
    const categoryForm = document.getElementById('categoryForm');
    const nameInput = document.getElementById('name');
    const descriptionInput = document.getElementById('description');
    const nameError = document.getElementById('nameError');
    const descriptionError = document.getElementById('descriptionError');

    // Configure SweetAlert2 with custom buttons
    const swalWithBootstrapButtons = Swal.mixin({
      customClass: {
        confirmButton: "submit-btn",
        cancelButton: "back-btn"
      },
      buttonsStyling: false
    });

    // Real-time validation for name
    nameInput.addEventListener('input', function() {
      validateName();
    });

    // Real-time validation for description
    descriptionInput.addEventListener('input', function() {
      validateDescription();
    });

    function validateName() {
      const name = nameInput.value.trim();
      nameError.textContent = '';
      nameError.style.display = 'none';
      nameInput.classList.remove('error', 'valid');

      if (!name) {
        nameError.textContent = 'Category name is required';
        nameError.style.display = 'block';
        nameInput.classList.add('error');
        return false;
      }

      if (name.length < 2) {
        nameError.textContent = 'Category name must be at least 2 characters long';
        nameError.style.display = 'block';
        nameInput.classList.add('error');
        return false;
      }

      if (name.length > 50) {
        nameError.textContent = 'Category name cannot exceed 50 characters';
        nameError.style.display = 'block';
        nameInput.classList.add('error');
        return false;
      }

      if (!/^[a-zA-Z0-9\s-]+$/.test(name)) {
        nameError.textContent = 'Category name can only contain letters, numbers, spaces, and hyphens';
        nameError.style.display = 'block';
        nameInput.classList.add('error');
        return false;
      }

      nameInput.classList.add('valid');
      return true;
    }

    function validateDescription() {
      const description = descriptionInput.value.trim();
      descriptionError.textContent = '';
      descriptionError.style.display = 'none';
      descriptionInput.classList.remove('error', 'valid');

      if (description.length > 500) {
        descriptionError.textContent = 'Description cannot exceed 500 characters';
        descriptionError.style.display = 'block';
        descriptionInput.classList.add('error');
        return false;
      }

      if (description.length > 0) {
        descriptionInput.classList.add('valid');
      }
      return true;
    }

    // Form submission validation
    categoryForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const isNameValid = validateName();
      const isDescriptionValid = validateDescription();

      if (isNameValid && isDescriptionValid) {
        // Show confirmation dialog
        swalWithBootstrapButtons.fire({
          title: "Add Category?",
          text: "Are you sure you want to add this category?",
          icon: "question",
          showCancelButton: true,
          confirmButtonText: "Yes, add it!",
          cancelButtonText: "No, cancel!",
          reverseButtons: true
        }).then((result) => {
          if (result.isConfirmed) {
            // Create FormData object
            const formData = new FormData(this);
            
            // Convert FormData to JSON
            const jsonData = {};
            formData.forEach((value, key) => {
              jsonData[key] = value;
            });

            // Send POST request
            fetch('/admin/categories/add', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(jsonData)
            })
            .then(response => {
              if (response.ok) {
                swalWithBootstrapButtons.fire({
                  title: "Success!",
                  text: "Category added successfully",
                  icon: "success"
                }).then(() => {
                  window.location.href = '/admin/categories';
                });
              } else {
                return response.json();
              }
            })
            .then(data => {
              if (data && data.error) {
                swalWithBootstrapButtons.fire({
                  title: "Error!",
                  text: data.error,
                  icon: "error"
                });
              }
            })
            .catch(error => {
              console.error('Error:', error);
              swalWithBootstrapButtons.fire({
                title: "Error!",
                text: "An error occurred while adding the category",
                icon: "error"
              });
            });
          } else if (result.dismiss === Swal.DismissReason.cancel) {
            swalWithBootstrapButtons.fire({
              title: "Cancelled",
              text: "Category addition cancelled",
              icon: "error"
            });
          }
        });
      }
    });

    // Do not run initial validation to avoid showing messages before typing
  </script>
</body>
</html> 