<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Add Product</title>
  <link rel="stylesheet" href="/css/sidebar.css?v=2">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(207deg, rgb(25, 25, 25), rgb(0, 0, 0));
      color: white;
      min-height: 100vh;
    }

    .app-layout {
      display: flex;
      min-height: 100vh;
    }

    .main-content {
      flex-grow: 1;
      padding: 40px;
      margin-left: 250px;
      overflow-y: auto;
    }

    .header {
      margin-bottom: 30px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .header h1 {
      font-size: 24px;
      margin-bottom: 5px;
      color: white;
    }

    .header p {
      font-size: 14px;
      color: #a0aec0;
    }

    .back-btn {
      background: #2b2d31;
      color: white;
      padding: 8px 16px;
      border-radius: 8px;
      text-decoration: none;
      display: flex;
      align-items: center;
      gap: 8px;
      transition: background 0.3s;
    }

    .back-btn:hover {
      background: #36373d;
    }

    .card {
      background-color: #1e1f22;
      border-radius: 16px;
      padding: 24px;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.4);
    }

    .form-group {
      margin-bottom: 20px;
    }

    .form-group label {
      display: block;
      margin-bottom: 8px;
      color: #a0aec0;
    }

    .form-control {
      width: 100%;
      padding: 12px;
      background-color: #2b2d31;
      border: 1px solid rgba(255, 255, 255, 0.1);
      border-radius: 8px;
      color: white;
      font-size: 14px;
    }

    .form-control:focus {
      outline: none;
      border-color: #00a3ff;
    }

    .image-preview {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      margin-top: 10px;
    }

    .preview-item {
      position: relative;
      width: 100px;
      height: 100px;
      border-radius: 8px;
      overflow: hidden;
    }

    .preview-item img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    .remove-image {
      position: absolute;
      top: 5px;
      right: 5px;
      background: rgba(255, 0, 0, 0.8);
      color: white;
      border: none;
      border-radius: 50%;
      width: 24px;
      height: 24px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      font-size: 14px;
    }

    .replace-image {
      position: absolute;
      top: 5px;
      right: 35px;
      background: rgba(0, 123, 255, 0.8);
      color: white;
      border: none;
      border-radius: 50%;
      width: 24px;
      height: 24px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      font-size: 14px;
    }

    .replace-image:hover {
      background: rgba(0, 123, 255, 1);
    }

    .remove-image:hover {
      background: rgba(255, 0, 0, 1);
    }

    .submit-btn {
      background: #00a3ff;
      color: white;
      padding: 12px 24px;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      font-size: 16px;
      transition: background 0.3s;
    }

    .submit-btn:hover {
      background: #0088d4;
    }

    .alert {
      padding: 12px;
      border-radius: 8px;
      margin-bottom: 20px;
    }

    .alert-error {
      background-color: rgba(220, 53, 69, 0.1);
      border: 1px solid rgba(220, 53, 69, 0.2);
      color: #dc3545;
    }

    .alert-success {
      background-color: rgba(25, 135, 84, 0.1);
      border: 1px solid rgba(25, 135, 84, 0.2);
      color: #198754;
    }

    .size-options {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      margin-top: 8px;
    }

    .size-checkbox {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 40px;
      height: 40px;
      border: 1px solid rgba(255, 255, 255, 0.1);
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.3s;
    }

    .size-checkbox input {
      display: none;
    }

    .size-checkbox:hover {
      background: rgba(255, 255, 255, 0.1);
    }

    .size-checkbox input:checked + span {
      background: #00a3ff;
      color: white;
      border-color: #00a3ff;
    }

    .size-checkbox span {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 100%;
      height: 100%;
      border-radius: 8px;
    }

    .image-upload-container {
      margin-top: 10px;
    }

    .image-preview-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
      gap: 10px;
      margin-bottom: 10px;
    }

    .image-preview {
      position: relative;
      width: 150px;
      height: 150px;
      border: 1px dashed #ccc;
      border-radius: 4px;
      overflow: hidden;
    }

    .image-preview img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    .upload-area {
      border: 2px dashed #ccc;
      padding: 20px;
      text-align: center;
      cursor: pointer;
      border-radius: 4px;
    }

    .upload-label {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 10px;
      cursor: pointer;
    }

    .upload-label i {
      font-size: 24px;
      color: #666;
    }

    .upload-label span {
      color: #666;
    }

    .error-message {
      color: #dc3545;
      font-size: 12px;
      margin-top: 5px;
      display: block;
    }

    .form-control.error {
      border-color: #dc3545;
    }

    .form-control.valid {
      border-color: #198754;
    }

    .size-checkbox.error {
      border-color: #dc3545;
    }

    .size-checkbox.valid {
      border-color: #198754;
    }

    .image-preview-grid.error {
      border-color: #dc3545;
    }

    .image-preview-grid.valid {
      border-color: #198754;
    }

    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.8);
      z-index: 1000;
      overflow: hidden;
    }

    .modal-content {
      position: relative;
      background-color: #1e1f22;
      padding: 20px;
      border-radius: 12px;
      max-width: 90%;
      max-height: 90vh;
      margin: 20px auto;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);
      display: flex;
      flex-direction: column;
      gap: 20px;
    }

    .cropper-container {
      max-width: 100%;
      max-height: 70vh;
      margin: 0 auto;
      background-color: #2b2d31;
      border-radius: 8px;
      overflow: hidden;
    }

    .cropper-modal {
      background-color: rgba(0, 0, 0, 0.5);
    }

    .cropper-view-box {
      outline: 2px solid #00a3ff;
      outline-offset: -2px;
    }

    .cropper-point {
      background-color: #00a3ff;
      width: 8px;
      height: 8px;
      border-radius: 50%;
    }

    .cropper-point.point-se {
      background-color: #00a3ff;
    }

    .cropper-line {
      background-color: #00a3ff;
      opacity: 0.5;
    }

    .cropper-bg {
      background-image: none;
    }

    .cropper-wrap-box {
      background-color: #2b2d31;
    }

    .cropper-canvas {
      background-color: #2b2d31;
    }

    .cropper-drag-box {
      background-color: #2b2d31;
    }

    .cropper-crop-box {
      background-color: #2b2d31;
    }

    .cropper-container {
      background-color: #2b2d31;
    }

    .cropper-container img {
      max-width: 100%;
      max-height: 70vh;
      object-fit: contain;
    }

    .cropper-buttons {
      display: flex;
      gap: 15px;
      margin-top: 10px;
      justify-content: center;
    }

    .cropper-buttons button {
      padding: 10px 24px;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      font-size: 14px;
      font-weight: 500;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .cropper-buttons .crop-btn {
      background-color: #00a3ff;
      color: white;
    }

    .cropper-buttons .crop-btn:hover {
      background-color: #0088d4;
      transform: translateY(-1px);
    }

    .cropper-buttons .cancel-btn {
      background-color: #2b2d31;
      color: #a0aec0;
      border: 1px solid #36373d;
    }

    .cropper-buttons .cancel-btn:hover {
      background-color: #36373d;
      color: white;
    }

    .cropper-buttons button i {
      font-size: 16px;
    }

    .modal-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding-bottom: 15px;
      border-bottom: 1px solid #36373d;
    }

    .modal-header h3 {
      color: white;
      font-size: 18px;
      font-weight: 500;
    }

    .modal-header .close-btn {
      background: none;
      border: none;
      color: #a0aec0;
      font-size: 20px;
      cursor: pointer;
      padding: 5px;
      transition: color 0.3s;
    }

    .modal-header .close-btn:hover {
      color: white;
    }
  </style>
</head>
<body>
  <div class="app-layout">
    <%- include('../partials/sidebar') %>

    <main class="main-content">
      <div class="header">
        <div>
          <h1>Add New Product</h1>
          <p>Fill in the product details</p>
        </div>
        <a href="/admin/products" class="back-btn">
          <i class="bi bi-arrow-left"></i>
          Back to Products
        </a>
      </div>

      <% if (error) { %>
        <div class="alert alert-error">
          <%= error %>
        </div>
      <% } %>

      <% if (success) { %>
        <div class="alert alert-success">
          <%= success %>
        </div>
      <% } %>

      <div class="card">
        <form action="/admin/products/add" method="POST" enctype="multipart/form-data" id="productForm">
          <div class="form-group">
            <label for="name">Product Name</label>
            <input type="text" id="name" name="name" class="form-control">
            <div class="error-message" id="nameError"></div>
          </div>

          <div class="form-group">
            <label for="description">Description</label>
            <textarea id="description" name="description" class="form-control" rows="4"></textarea>
            <div class="error-message" id="descriptionError"></div>
          </div>

          <div class="form-group">
            <label for="price">Price</label>
            <input type="number" id="price" name="price" class="form-control" step="0.01">
            <div class="error-message" id="priceError"></div>
          </div>

          <div class="form-group">
            <label for="stock">Stock Quantity</label>
            <input type="number" id="stock" name="stock" class="form-control" min="0" value="0">
            <div class="error-message" id="stockError"></div>
          </div>

          <div class="form-group">
            <label for="category">Category</label>
            <select id="category" name="category" class="form-control">
              <% if (categories && categories.length > 0) { %>
                <% categories.forEach((category, index) => { %>
                  <option value="<%= category %>" <%= index === 0 ? 'selected' : '' %>><%= category %></option>
                <% }) %>
              <% } else { %>
                <option value="" disabled selected>No categories available. Please add a category first.</option>
              <% } %>
            </select>
            <div class="error-message" id="categoryError"></div>
            <% if (!categories || categories.length === 0) { %>
              <div class="alert alert-error" style="margin-top: 10px;">
                <i class="bi bi-exclamation-triangle"></i>
                You need to add at least one category before adding products.
                <a href="/admin/categories/add" style="color: #00a3ff; text-decoration: none; margin-left: 5px;">
                  Add Category
                </a>
              </div>
            <% } %>
          </div>

          <!-- NEW: Sizes with Quantity Input -->
<div class="form-group">
  <label>Size and Stock Quantity</label>
  <div class="size-quantity-grid">
    <% const sizes = [5, 6, 7, 8, 9, 10, 11, 12]; %>
    <% sizes.forEach(size => { %>
      <div class="size-quantity-pair">
        <label>UK<%= size %></label>
        <input type="number" name="sizeQuantity[<%= size %>]" min="0" value="0" class="form-control size-input">
      </div>
    <% }) %>
  </div>
  <div class="error-message" id="sizeQuantityError"></div>
  <small class="text-muted" style="display: block; margin-top: 8px; color: #a0aec0;">
    Enter stock quantity for each available size. Leave 0 if not available.
  </small>
</div>


          <div class="form-group">
            <label>Product Images (Minimum 3)</label>
            <div class="image-upload-container">
              <div class="image-preview-grid" id="imagePreviewGrid">
                <!-- Image previews will be added here -->
              </div>
              <div class="upload-area" id="uploadArea">
                <input type="file" name="images" id="imageInput" accept="image/*" style="display: none;">
                <label for="imageInput" class="upload-label">
                  <i class="bi bi-cloud-upload"></i>
                  <span>Click to upload an image</span>
                </label>
              </div>
            </div>
            <div class="error-message" id="imagesError"></div>
          </div>

          <button type="submit" class="submit-btn">Add Product</button>
  </form>
      </div>
    </main>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const form = document.getElementById('productForm');
      const nameInput = document.getElementById('name');
      const descriptionInput = document.getElementById('description');
      const priceInput = document.getElementById('price');
      const stockInput = document.getElementById('stock');
      const categoryInput = document.getElementById('category');
      const sizeInputs = document.querySelectorAll('input[name="sizes"]');
      const imageInput = document.getElementById('imageInput');
      const imagePreviewGrid = document.getElementById('imagePreviewGrid');
      const uploadArea = document.getElementById('uploadArea');
      let uploadedImages = [];
      let cropper = null;

      // Error message elements
      const nameError = document.getElementById('nameError');
      const descriptionError = document.getElementById('descriptionError');
      const priceError = document.getElementById('priceError');
      const stockError = document.getElementById('stockError');
      const categoryError = document.getElementById('categoryError');
      const sizesError = document.getElementById('sizesError');
      const imagesError = document.getElementById('imagesError');

      // Real-time validation
      nameInput.addEventListener('input', validateName);
      descriptionInput.addEventListener('input', validateDescription);
      priceInput.addEventListener('input', validatePrice);
      stockInput.addEventListener('input', validateStock);
      categoryInput.addEventListener('change', validateCategory);
      sizeInputs.forEach(input => input.addEventListener('change', validateSizes));

      function validateName() {
        const name = nameInput.value.trim();
        nameError.textContent = '';
        nameInput.classList.remove('error', 'valid');

        if (!name) {
          nameError.textContent = 'Product name is required';
          nameInput.classList.add('error');
          return false;
        }

        if (name.length < 3) {
          nameError.textContent = 'Product name must be at least 3 characters long';
          nameInput.classList.add('error');
          return false;
        }

        nameInput.classList.add('valid');
        return true;
      }

      function validateDescription() {
        const description = descriptionInput.value.trim();
        descriptionError.textContent = '';
        descriptionInput.classList.remove('error', 'valid');

        if (!description) {
          descriptionError.textContent = 'Product description is required';
          descriptionInput.classList.add('error');
          return false;
        }

        if (description.length < 10) {
          descriptionError.textContent = 'Product description must be at least 10 characters long';
          descriptionInput.classList.add('error');
          return false;
        }

        descriptionInput.classList.add('valid');
        return true;
      }

      function validatePrice() {
        const price = priceInput.value;
        priceError.textContent = '';
        priceInput.classList.remove('error', 'valid');

        if (!price) {
          priceError.textContent = 'Product price is required';
          priceInput.classList.add('error');
          return false;
        }

        const priceNum = parseFloat(price);
        if (isNaN(priceNum)) {
          priceError.textContent = 'Price must be a valid number';
          priceInput.classList.add('error');
          return false;
        }

        if (priceNum <= 0) {
          priceError.textContent = 'Price must be greater than 0';
          priceInput.classList.add('error');
          return false;
        }

        priceInput.classList.add('valid');
        return true;
      }

      function validateStock() {
        const stock = stockInput.value;
        stockError.textContent = '';
        stockInput.classList.remove('error', 'valid');

        if (stock === undefined || stock === '') {
          stockError.textContent = 'Stock quantity is required';
          stockInput.classList.add('error');
          return false;
        }

        const stockNum = parseInt(stock);
        if (isNaN(stockNum)) {
          stockError.textContent = 'Stock must be a valid number';
          stockInput.classList.add('error');
          return false;
        }

        if (stockNum < 0) {
          stockError.textContent = 'Stock cannot be negative';
          stockInput.classList.add('error');
          return false;
        }

        stockInput.classList.add('valid');
        return true;
      }

      function validateCategory() {
        const category = categoryInput.value;
        categoryError.textContent = '';
        categoryInput.classList.remove('error', 'valid');

        if (!category) {
          categoryError.textContent = 'Product category is required';
          categoryInput.classList.add('error');
          return false;
        }

        categoryInput.classList.add('valid');
        return true;
      }

      function validateSizesWithQuantities() {
  const inputs = document.querySelectorAll('.size-input');
  const sizeQuantityError = document.getElementById('sizeQuantityError');
  let atLeastOneValid = false;
  sizeQuantityError.textContent = '';

  inputs.forEach(input => {
    const qty = parseInt(input.value);
    if (!isNaN(qty) && qty > 0) {
      atLeastOneValid = true;
    }
    input.classList.remove('error', 'valid');
    if (qty < 0 || isNaN(qty)) {
      input.classList.add('error');
    } else if (qty > 0) {
      input.classList.add('valid');
    }
  });

  if (!atLeastOneValid) {
    sizeQuantityError.textContent = 'Enter quantity for at least one size.';
    return false;
  }

  return true;
}


      function validateImages() {
        imagesError.textContent = '';
        imagePreviewGrid.classList.remove('error', 'valid');

        if (uploadedImages.length < 3) {
          imagesError.textContent = 'At least 3 images are required';
          imagePreviewGrid.classList.add('error');
          return false;
        }

        if (uploadedImages.length > 10) {
          imagesError.textContent = 'Maximum 10 images allowed';
          imagePreviewGrid.classList.add('error');
          return false;
        }

        imagePreviewGrid.classList.add('valid');
        return true;
      }

      // Create modal for image cropping
      const modal = document.createElement('div');
      modal.className = 'modal';
      modal.innerHTML = `
    <div class="modal-content">
      <div class="modal-header">
            <h3>Crop Image</h3>
            <button class="close-btn">&times;</button>
      </div>
          <div class="cropper-container"></div>
          <div class="cropper-buttons">
            <button class="crop-btn">
              <i class="bi bi-check-lg"></i>
              Crop Image
            </button>
            <button class="cancel-btn">
              <i class="bi bi-x-lg"></i>
              Cancel
            </button>
      </div>
      </div>
      `;
      document.body.appendChild(modal);

      // Handle file selection
      imageInput.addEventListener('change', function(e) {
        const file = e.target.files[0];
      if (file && file.type.startsWith('image/')) {
        const reader = new FileReader();
        reader.onload = function(e) {
            // Show modal
          modal.style.display = 'block';
          
          // Initialize cropper
            const image = document.createElement('img');
            image.src = e.target.result;
            const cropperContainer = modal.querySelector('.cropper-container');
            cropperContainer.innerHTML = '';
            cropperContainer.appendChild(image);
            
            cropper = new Cropper(image, {
            aspectRatio: 1,
              viewMode: 1,
            autoCropArea: 1,
            responsive: true,
            restore: false,
            modal: true,
            guides: true,
            highlight: true,
            cropBoxMovable: true,
            cropBoxResizable: true,
            toggleDragModeOnDblclick: false,
              background: false,
              zoomable: true,
              zoomOnTouch: true,
              zoomOnWheel: true,
              wheelZoomRatio: 0.1,
              cropBoxMovable: true,
              cropBoxResizable: true,
              minCanvasWidth: 200,
              minCanvasHeight: 200,
              minCropBoxWidth: 200,
              minCropBoxHeight: 200,
              minContainerWidth: 200,
              minContainerHeight: 200,
            });

            // Handle crop button click
            modal.querySelector('.crop-btn').onclick = function() {
      if (cropper) {
                const canvas = cropper.getCroppedCanvas({
                  width: 800,
                  height: 800,
                });
                
                canvas.toBlob(function(blob) {
                  const croppedFile = new File([blob], file.name, { type: file.type });
                  
                  const imagePreview = document.createElement('div');
                  imagePreview.className = 'image-preview';
                  
                  const img = document.createElement('img');
                  img.src = URL.createObjectURL(croppedFile);
                  
                  const removeBtn = document.createElement('button');
                  removeBtn.className = 'remove-image';
                  removeBtn.innerHTML = '×';
                  removeBtn.onclick = function() {
                    imagePreview.remove();
                    uploadedImages = uploadedImages.filter(img => img !== croppedFile);
                    updateUploadArea();
                    validateImages();
                  };

                  const replaceBtn = document.createElement('button');
                  replaceBtn.className = 'replace-image';
                  replaceBtn.innerHTML = '↻';
                  replaceBtn.onclick = function() {
                    imageInput.click();
                  };
                  
                  imagePreview.appendChild(img);
                  imagePreview.appendChild(replaceBtn);
                  imagePreview.appendChild(removeBtn);
                  imagePreviewGrid.appendChild(imagePreview);
                  
                  uploadedImages.push(croppedFile);
                  updateUploadArea();
                  validateImages();
      
                  // Hide modal and reset cropper
                  modal.style.display = 'none';
                  cropper.destroy();
                  cropper = null;
                }, file.type);
              }
            };

            // Handle close button click
            modal.querySelector('.close-btn').onclick = function() {
              modal.style.display = 'none';
              if (cropper) {
                cropper.destroy();
                cropper = null;
              }
              imageInput.value = '';
            };
          };
          reader.readAsDataURL(file);
        }
      });

      // Close modal when clicking outside
      modal.addEventListener('click', function(e) {
        if (e.target === modal) {
          modal.style.display = 'none';
          if (cropper) {
            cropper.destroy();
            cropper = null;
          }
          imageInput.value = '';
        }
      });

      // Update upload area visibility
      function updateUploadArea() {
        if (uploadedImages.length >= 10) {
          uploadArea.style.display = 'none';
      } else {
          uploadArea.style.display = 'block';
        }
      }

      // Handle form submission
      form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const isNameValid = validateName();
        const isDescriptionValid = validateDescription();
        const isPriceValid = validatePrice();
        const isStockValid = validateStock();
        const isCategoryValid = validateCategory();
        const isSizesValid = validateSizesWithQuantities();
        const isImagesValid = validateImages();

        if (isNameValid && isDescriptionValid && isPriceValid && 
            isStockValid && isCategoryValid && isSizesValid && isImagesValid) {
        // Create FormData object
          const formData = new FormData(form);
        
          // Add images to FormData
          uploadedImages.forEach((file, index) => {
            formData.append('images', file);
        });

          // Submit the form with FormData
          fetch(form.action, {
              method: 'POST',
              body: formData
          }).then(response => {
              if (response.ok) {
                Swal.fire({
                  title: 'Success!',
                  text: 'Product added successfully',
                  icon: 'success',
                  confirmButtonText: 'OK',
                  confirmButtonColor: '#00a3ff',
                  timer: 3000,
                  timerProgressBar: true
                }).then(() => {
                window.location.href = '/admin/products';
                });
              } else {
                throw new Error('Failed to add product');
              }
          }).catch(error => {
            console.error('Error:', error);
              Swal.fire({
              title: 'Error!',
                text: 'Failed to add product. Please try again.',
                icon: 'error',
                confirmButtonText: 'OK',
              confirmButtonColor: '#dc3545'
              });
            });
      } else {
          // Scroll to the first error
          const firstError = document.querySelector('.error');
          if (firstError) {
            firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
          }
      }
    });

      // Initial validation
      validateName();
      validateDescription();
      validatePrice();
      validateStock();
      validateCategory();
      validateSizesWithQuantities();
      validateImages();
    });
  </script>
</body>
</html>
  