<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Sales Report</title>
  <link rel="stylesheet" href="/css/sidebar.css?v=2">
  <link rel="stylesheet" href="/css/tables.css?v=2">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    html, body {
      height: 100%;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(207deg, rgb(25, 25, 25), rgb(0, 0, 0));
      color: white;
      min-height: 100vh;
    }

    .app-layout {
      display: flex;
      min-height: 100vh;
      background: linear-gradient(207deg, rgb(25, 25, 25), rgb(0, 0, 0));
    }

    .main-content {
      flex-grow: 1;
      padding: 40px;
      overflow-y: auto;
      background: linear-gradient(207deg, rgb(25, 25, 25), rgb(0, 0, 0));
    }

    .card { background: #1e1f22; color: #fff; border-radius: 16px; box-shadow: 0 4px 15px rgba(0, 0, 0, 0.4); }
    .table { color: #fff; }
    .table th, .table td { vertical-align: middle; }
    .btn-custom { background: #343a40; color: #fff; border: none; }
    .btn-custom.active, .btn-custom:focus { background: #495057; }
    .date-range { background: #23272b; color: #fff; border: 1px solid #343a40; }

    /* Add pagination styles */
    .pagination {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-top: 20px;
      padding-top: 20px;
      border-top: 1px solid rgba(255, 255, 255, 0.1);
    }

    .pagination-info {
      color: #a0aec0;
      font-size: 14px;
    }

    .pagination-item {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 36px;
      height: 36px;
      border-radius: 8px;
      background: #2b2d31;
      color: #a0aec0;
      text-decoration: none;
      transition: all 0.3s ease;
    }

    .pagination-item:hover {
      background: #36373d;
      color: white;
    }

    .pagination-item.active {
      background: #00a3ff;
      color: white;
    }

    .pagination-item.disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    .pagination-item.disabled:hover {
      background: #2b2d31;
      color: #a0aec0;
    }

    .d-flex {
      display: flex;
    }

    .gap-2 {
      gap: 8px;
    }

    .download-buttons {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
    }

    .download-btn {
      display: flex;
      align-items: center;
      gap: 8px;
      padding: 8px 16px;
      border-radius: 8px;
      background: #2b2d31;
      color: #fff;
      border: none;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .download-btn:hover {
      background: #36373d;
    }

    .download-btn i {
      font-size: 16px;
    }
  </style>
</head>
<body>
  <div class="app-layout">
    <%- include('../partials/sidebar') %>

    <main class="main-content">
      <div class="header">
        <h1>Sales Report</h1>
        <p>View and analyze your sales data</p>
      </div>

      <div class="download-buttons">
        <button class="download-btn" id="downloadPdf">
          <i class="bi bi-file-pdf"></i>
          Download PDF
        </button>
        <button class="download-btn" id="downloadExcel">
          <i class="bi bi-file-excel"></i>
          Download Excel
        </button>
      </div>

      <div class="mb-4 d-flex align-items-center gap-2">
        <button class="btn btn-custom me-2" id="dailyBtn">Daily</button>
        <button class="btn btn-custom me-2" id="weeklyBtn">Weekly</button>
        <button class="btn btn-custom me-2" id="yearlyBtn">Yearly</button>
        <input type="date" id="startDate" class="form-control date-range me-2" style="width: 160px;">
        <span class="mx-1">to</span>
        <input type="date" id="endDate" class="form-control date-range me-2" style="width: 160px;">
        <button class="btn btn-custom" id="customBtn">Custom</button>
      </div>

      <div class="card mb-4">
        <div class="card-body">
          <h5 class="card-title mb-3">Sales Report</h5>
          <div class="table-responsive">
            <table class="table table-dark table-striped align-middle">
              <caption class="text-white">Summary</caption>
              <thead>
                <tr>
                  <th>Total Sales</th>
                  <th>Total Orders</th>
                  <th>Total Discount</th>
                  <th colspan="4"></th>
                </tr>
                <tr>
                  <td id="totalSales">₹0</td>
                  <td id="totalOrders">0</td>
                  <td id="totalDiscount">₹0</td>
                  <td colspan="4"></td>
                </tr>
                <tr>
                  <th>Order ID</th>
                  <th>Date</th>
                  <th>Customer</th>
                  <th>Total</th>
                  <th>Status</th>
                  <th>Coupon</th>
                </tr>
              </thead>
              <tbody id="ordersTable">
                <tr><td colspan="6" class="text-center">Loading...</td></tr>
              </tbody>
            </table>
          </div>
          <div class="pagination">
            <span class="pagination-info">
              Showing <span id="showingStart">0</span> to <span id="showingEnd">0</span> of <span id="totalOrdersCount">0</span> orders
            </span>
            <div id="paginationControls" class="d-flex gap-2"></div>
          </div>
        </div>
      </div>
    </main>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    const totalSales = document.getElementById('totalSales');
    const totalOrders = document.getElementById('totalOrders');
    const totalDiscount = document.getElementById('totalDiscount');
    const ordersTable = document.getElementById('ordersTable');
    const dailyBtn = document.getElementById('dailyBtn');
    const weeklyBtn = document.getElementById('weeklyBtn');
    const yearlyBtn = document.getElementById('yearlyBtn');
    const customBtn = document.getElementById('customBtn');
    const startDate = document.getElementById('startDate');
    const endDate = document.getElementById('endDate');
    const showingStart = document.getElementById('showingStart');
    const showingEnd = document.getElementById('showingEnd');
    const totalOrdersCount = document.getElementById('totalOrdersCount');
    const paginationControls = document.getElementById('paginationControls');
    const downloadPdf = document.getElementById('downloadPdf');
    const downloadExcel = document.getElementById('downloadExcel');

    let currentRange = 'daily';
    let currentPage = 1;
    const limit = 10;

    function getDownloadUrl(format) {
      let url = `/admin/sales-report/download/${format}?range=${currentRange}`;
      if (currentRange === 'custom' && startDate.value && endDate.value) {
        url += `&startDate=${startDate.value}&endDate=${endDate.value}`;
      }
      return url;
    }

    downloadPdf.onclick = () => {
      const url = getDownloadUrl('pdf');
      window.open(url, '_blank');
    };

    downloadExcel.onclick = () => {
      const url = getDownloadUrl('excel');
      window.open(url, '_blank');
    };

    function setActive(btn) {
      [dailyBtn, weeklyBtn, yearlyBtn, customBtn].forEach(b => b.classList.remove('active'));
      btn.classList.add('active');
    }

    function createPaginationControls(pagination) {
      let html = '';
      
      // Previous button
      if (pagination.hasPrevPage) {
        html += `
          <a href="#" class="pagination-item" data-page="${pagination.currentPage - 1}">
            <i class="bi bi-chevron-left"></i>
          </a>
        `;
      } else {
        html += `
          <span class="pagination-item disabled">
            <i class="bi bi-chevron-left"></i>
          </span>
        `;
      }

      // Page numbers
      for (let i = 1; i <= pagination.totalPages; i++) {
        html += `
          <a href="#" class="pagination-item ${i === pagination.currentPage ? 'active' : ''}" 
             data-page="${i}">
            ${i}
          </a>
        `;
      }

      // Next button
      if (pagination.hasNextPage) {
        html += `
          <a href="#" class="pagination-item" data-page="${pagination.currentPage + 1}">
            <i class="bi bi-chevron-right"></i>
          </a>
        `;
      } else {
        html += `
          <span class="pagination-item disabled">
            <i class="bi bi-chevron-right"></i>
          </span>
        `;
      }

      paginationControls.innerHTML = html;

      // Add click event listeners to pagination items
      paginationControls.querySelectorAll('.pagination-item:not(.disabled)').forEach(item => {
        item.addEventListener('click', (e) => {
          e.preventDefault();
          const page = parseInt(item.dataset.page);
          if (page) {
            currentPage = page;
            fetchReport(currentRange, startDate.value, endDate.value, currentPage);
          }
        });
      });
    }

    function updatePaginationControls(pagination) {
      // Update showing text
      const start = ((pagination.currentPage - 1) * pagination.limit) + 1;
      const end = Math.min(start + pagination.limit - 1, pagination.totalOrders);
      showingStart.textContent = start;
      showingEnd.textContent = end;
      totalOrdersCount.textContent = pagination.totalOrders;

      // Create pagination controls
      createPaginationControls(pagination);
    }

    async function fetchReport(range, sDate, eDate, page = 1) {
      let url = `/admin/sales-report/data?range=${range}&page=${page}&limit=${limit}`;
      if (range === 'custom' && sDate && eDate) {
        url += `&startDate=${sDate}&endDate=${eDate}`;
      }
      ordersTable.innerHTML = '<tr><td colspan="6" class="text-center">Loading...</td></tr>';
      try {
        const res = await fetch(url);
        const data = await res.json();
        if (data.error) throw new Error(data.error);
        
        totalSales.textContent = `₹${Number(data.summary.totalSales).toFixed(2)}`;
        totalOrders.textContent = data.summary.totalOrders;
        totalDiscount.textContent = `₹${Number(data.summary.totalDiscount).toFixed(2)}`;
        
        if (data.tableData.length === 0) {
          ordersTable.innerHTML = '<tr><td colspan="6" class="text-center">No orders found.</td></tr>';
        } else {
          ordersTable.innerHTML = data.tableData.map(order => `
            <tr>
              <td>${order.id}</td>
              <td>${order.date}</td>
              <td>${order.customer}</td>
              <td>₹${Number(order.total).toFixed(2)}</td>
              <td>${order.status}</td>
              <td>${order.coupon || '-'}</td>
            </tr>
          `).join('');
        }

        // Update pagination controls
        updatePaginationControls(data.pagination);
      } catch (err) {
        ordersTable.innerHTML = `<tr><td colspan="6" class="text-danger text-center">Error: ${err.message}</td></tr>`;
      }
    }

    dailyBtn.onclick = () => { 
      setActive(dailyBtn); 
      currentRange = 'daily'; 
      currentPage = 1;
      fetchReport('daily', null, null, currentPage); 
    };
    
    weeklyBtn.onclick = () => { 
      setActive(weeklyBtn); 
      currentRange = 'weekly'; 
      currentPage = 1;
      fetchReport('weekly', null, null, currentPage); 
    };
    
    yearlyBtn.onclick = () => { 
      setActive(yearlyBtn); 
      currentRange = 'yearly'; 
      currentPage = 1;
      fetchReport('yearly', null, null, currentPage); 
    };
    
    customBtn.onclick = () => {
      if (!startDate.value || !endDate.value) {
        alert('Please select both start and end dates');
        return;
      }
      
      if (new Date(startDate.value) > new Date(endDate.value)) {
        alert('Start date cannot be after end date');
        return;
      }
      
      setActive(customBtn);
      currentRange = 'custom';
      currentPage = 1;
      fetchReport('custom', startDate.value, endDate.value, currentPage);
    };

    // Fetch daily report on load
    window.onload = () => {
      setActive(dailyBtn);
      fetchReport('daily', null, null, currentPage);
    };
  </script>
</body>
</html> 