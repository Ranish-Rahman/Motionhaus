<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Offer Management - Admin</title>
  <link rel="stylesheet" href="/css/sidebar.css?v=2">
  <link rel="stylesheet" href="/css/tables.css?v=2">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Add SweetAlert2 CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script type="application/json" id="offers-data">
    <%- JSON.stringify(offers) %>
  </script>
  <script>
    // Store offers data for editing
    const offersData = JSON.parse(document.getElementById('offers-data').textContent);

    // Wait for DOM to be fully loaded
    document.addEventListener('DOMContentLoaded', function() {
      // Add event listeners to edit buttons
      document.querySelectorAll('.btn-edit').forEach(button => {
        button.addEventListener('click', function() {
          const offerId = this.dataset.offerId;
          const offer = offersData.find(o => o._id === offerId);
          if (!offer) return;

          // Set form values
          document.getElementById('editOfferId').value = offer._id;
          document.getElementById('editOfferName').value = offer.name;
          document.getElementById('editOfferType').value = offer.type;
          document.getElementById('editOfferDiscount').value = offer.discount;
          
          // Format dates for input fields (YYYY-MM-DD)
          const startDate = new Date(offer.startDate).toISOString().split('T')[0];
          const endDate = new Date(offer.endDate).toISOString().split('T')[0];
          document.getElementById('editOfferStartDate').value = startDate;
          document.getElementById('editOfferEndDate').value = endDate;

          // Show/hide and set target based on type
          const productSelect = document.getElementById('editProductSelect');
          const categorySelect = document.getElementById('editCategorySelect');
          
          if (offer.type === 'Product') {
            if (productSelect) {
              productSelect.style.display = 'block';
              const productTarget = document.getElementById('editProductTarget');
              if (productTarget) {
                productTarget.value = offer.target;
                productTarget.required = true;
              }
            }
            if (categorySelect) {
              categorySelect.style.display = 'none';
              const categoryTarget = document.getElementById('editCategoryTarget');
              if (categoryTarget) {
                categoryTarget.required = false;
              }
            }
          } else {
            if (productSelect) {
              productSelect.style.display = 'none';
              const productTarget = document.getElementById('editProductTarget');
              if (productTarget) {
                productTarget.required = false;
              }
            }
            if (categorySelect) {
              categorySelect.style.display = 'block';
              const categoryTarget = document.getElementById('editCategoryTarget');
              if (categoryTarget) {
                categoryTarget.value = offer.target;
                categoryTarget.required = true;
              }
            }
          }

          // Show modal
          const editModal = new bootstrap.Modal(document.getElementById('editOfferModal'));
          editModal.show();
        });
      });

      // Add form validation
      const offerForm = document.getElementById('addOfferForm');
      if (offerForm) {
        const nameInput = offerForm.querySelector('input[name="name"]');
        if (nameInput) {
          nameInput.addEventListener('input', function() {
            validateName(this);
          });
        }
      }

      // Handle offer type change in add form
      const offerTypeSelect = document.getElementById('offerType');
      if (offerTypeSelect) {
        offerTypeSelect.addEventListener('change', function() {
          const productSelect = document.getElementById('productSelect');
          const categorySelect = document.getElementById('categorySelect');
          
          if (this.value === 'Product') {
            if (productSelect) {
              productSelect.style.display = 'block';
              const productTarget = document.querySelector('select[name="productTarget"]');
              if (productTarget) {
                productTarget.required = true;
              }
            }
            if (categorySelect) {
              categorySelect.style.display = 'none';
              const categoryTarget = document.querySelector('select[name="categoryTarget"]');
              if (categoryTarget) {
                categoryTarget.required = false;
              }
            }
          } else if (this.value === 'Category') {
            if (productSelect) {
              productSelect.style.display = 'none';
              const productTarget = document.querySelector('select[name="productTarget"]');
              if (productTarget) {
                productTarget.required = false;
              }
            }
            if (categorySelect) {
              categorySelect.style.display = 'block';
              const categoryTarget = document.querySelector('select[name="categoryTarget"]');
              if (categoryTarget) {
                categoryTarget.required = true;
              }
            }
          } else {
            if (productSelect) {
              productSelect.style.display = 'none';
              const productTarget = document.querySelector('select[name="productTarget"]');
              if (productTarget) {
                productTarget.required = false;
              }
            }
            if (categorySelect) {
              categorySelect.style.display = 'none';
              const categoryTarget = document.querySelector('select[name="categoryTarget"]');
              if (categoryTarget) {
                categoryTarget.required = false;
              }
            }
          }
        });
      }

      // Handle offer type change in edit form
      const editOfferType = document.getElementById('editOfferType');
      if (editOfferType) {
        editOfferType.addEventListener('change', function() {
          const productSelect = document.getElementById('editProductSelect');
          const categorySelect = document.getElementById('editCategorySelect');
          
          if (this.value === 'Product') {
            if (productSelect) {
              productSelect.style.display = 'block';
              const productTarget = document.getElementById('editProductTarget');
              if (productTarget) {
                productTarget.required = true;
              }
            }
            if (categorySelect) {
              categorySelect.style.display = 'none';
              const categoryTarget = document.getElementById('editCategoryTarget');
              if (categoryTarget) {
                categoryTarget.required = false;
              }
            }
          } else if (this.value === 'Category') {
            if (productSelect) {
              productSelect.style.display = 'none';
              const productTarget = document.getElementById('editProductTarget');
              if (productTarget) {
                productTarget.required = false;
              }
            }
            if (categorySelect) {
              categorySelect.style.display = 'block';
              const categoryTarget = document.getElementById('editCategoryTarget');
              if (categoryTarget) {
                categoryTarget.required = true;
              }
            }
          } else {
            if (productSelect) {
              productSelect.style.display = 'none';
              const productTarget = document.getElementById('editProductTarget');
              if (productTarget) {
                productTarget.required = false;
              }
            }
            if (categorySelect) {
              categorySelect.style.display = 'none';
              const categoryTarget = document.getElementById('editCategoryTarget');
              if (categoryTarget) {
                categoryTarget.required = false;
              }
            }
          }
        });
      }

      // Toggle offer status
      document.querySelectorAll('.toggle-status').forEach(button => {
        button.addEventListener('click', async function() {
          const offerId = this.dataset.offerId;
          const currentStatus = this.dataset.currentStatus === 'true';
          const action = currentStatus ? 'deactivate' : 'activate';

          try {
            const result = await Swal.fire({
              title: `${action.charAt(0).toUpperCase() + action.slice(1)} Offer?`,
              text: `Are you sure you want to ${action} this offer?`,
              icon: 'warning',
              showCancelButton: true,
              confirmButtonColor: currentStatus ? '#dc3545' : '#28a745',
              cancelButtonColor: '#6c757d',
              confirmButtonText: `Yes, ${action} it!`
            });

            if (result.isConfirmed) {
              // Show loading state
              Swal.fire({
                title: `${action.charAt(0).toUpperCase() + action.slice(1)}ing Offer...`,
                text: 'Please wait...',
                allowOutsideClick: false,
                didOpen: () => {
                  Swal.showLoading();
                }
              });

              const response = await fetch(`/admin/offers/${offerId}/status`, {
                method: 'PATCH',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({ 
                  status: currentStatus ? 'Inactive' : 'Active' 
                })
              });

              const data = await response.json();

              if (data.success) {
                await Swal.fire({
                  title: 'Success!',
                  text: data.message,
                  icon: 'success',
                  timer: 2000,
                  showConfirmButton: false
                });
                location.reload();
              } else {
                throw new Error(data.message || `Failed to ${action} offer`);
              }
            }
          } catch (error) {
            console.error('Error:', error);
            Swal.fire({
              title: 'Error!',
              text: error.message || `Failed to ${action} offer`,
              icon: 'error'
            });
          }
        });
      });

      document.getElementById('statusFilter').addEventListener('change', searchOffers);
    });

    function validateName(input) {
      const name = input.value.trim();
      const pattern = /^[A-Za-z0-9- ]{2,50}$/;
      const isValid = pattern.test(name);
      
      if (isValid) {
        input.classList.remove('is-invalid');
        input.classList.add('is-valid');
      } else {
        input.classList.remove('is-valid');
        input.classList.add('is-invalid');
      }
      return isValid;
    }

    // Functions that don't depend on DOM elements
    function searchOffers() {
      const searchTerm = document.getElementById('searchOffers').value.toLowerCase();
      const statusFilter = document.getElementById('statusFilter').value;
      const rows = document.querySelectorAll('tbody tr');

      rows.forEach(row => {
        const name = row.cells[1].textContent.toLowerCase();
        const status = row.cells[5].textContent.trim().toLowerCase();
        const matchesSearch = name.includes(searchTerm);
        const matchesStatus = statusFilter === 'all' || status === statusFilter.toLowerCase();
        
        row.style.display = matchesSearch && matchesStatus ? '' : 'none';
      });
    }

    async function submitOffer() {
      const form = document.getElementById('addOfferForm');
      if (!form) return;
      
      const nameInput = form.querySelector('input[name="name"]');
      if (!nameInput) return;

      // Validate all fields
      if (!form.checkValidity() || !validateName(nameInput)) {
        form.classList.add('was-validated');
        return;
      }

      const formData = new FormData(form);
      const type = formData.get('type');
      
      const data = {
        name: formData.get('name').trim(),
        type: type,
        discount: parseFloat(formData.get('discount')),
        startDate: formData.get('startDate'),
        endDate: formData.get('endDate'),
        target: type === 'Product' ? formData.get('productTarget') : formData.get('categoryTarget'),
        targetModel: type === 'Product' ? 'Product' : 'Category'
      };

      try {
        const response = await fetch('/admin/offers', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)
        });

        if (response.ok) {
          location.reload();
        } else {
          const error = await response.json();
          alert(error.error || 'Error creating offer');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error creating offer');
      }
    }

    async function updateOffer() {
      const form = document.getElementById('editOfferForm');
      if (!form) return;
      
      // Validate form
      if (!form.checkValidity()) {
        form.classList.add('was-validated');
        return;
      }

      const formData = new FormData(form);
      const type = formData.get('type');
      const offerId = formData.get('offerId');
      
      const data = {
        name: formData.get('name').trim(),
        type: type,
        discount: parseFloat(formData.get('discount')),
        startDate: formData.get('startDate'),
        endDate: formData.get('endDate'),
        target: type === 'Product' ? formData.get('productTarget') : formData.get('categoryTarget'),
        targetModel: type === 'Product' ? 'Product' : 'Category'
      };

      try {
        const response = await fetch(`/admin/offers/${offerId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)
        });

        if (response.ok) {
          location.reload();
        } else {
          const error = await response.json();
          alert(error.error || 'Error updating offer');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error updating offer');
      }
    }
  </script>
  <style>
    body {
      background-color: #f8f9fa;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
    }

    .main-content {
      padding: 2rem;
      margin-left: 250px;
    }

    .page-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
    }

    .page-header h1 {
      font-size: 1.5rem;
      font-weight: 600;
      margin: 0;
      color: #111827;
    }

    .search-section {
      background: #fff;
      border-radius: 8px;
      padding: 1rem;
      margin-bottom: 1.5rem;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .search-box {
      display: flex;
      gap: 0.5rem;
      align-items: center;
    }

    .search-input {
      padding: 0.5rem 1rem;
      border: 1px solid #e5e7eb;
      border-radius: 6px;
      width: 300px;
      font-size: 0.875rem;
    }

    .search-input:focus {
      outline: none;
      border-color: #6366f1;
      box-shadow: 0 0 0 1px rgba(99, 102, 241, 0.2);
    }

    .btn-search {
      background-color: #111827;
      color: white;
      border: none;
      padding: 0.5rem 1rem;
      border-radius: 6px;
      font-size: 0.875rem;
      cursor: pointer;
      transition: background-color 0.2s;
    }

    .btn-search:hover {
      background-color: #1f2937;
    }

    .status-filter {
      padding: 0.5rem;
      border: 1px solid #e5e7eb;
      border-radius: 6px;
      font-size: 0.875rem;
      color: #374151;
    }

    .table-container {
      background: #fff;
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      overflow: hidden;
    }

    .table {
      margin-bottom: 0;
    }

    .table thead {
      background-color: #f9fafb;
    }

    .table th {
      padding: 0.75rem 1.5rem;
      font-weight: 500;
      color: #6b7280;
      font-size: 0.875rem;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      border-bottom: 1px solid #e5e7eb;
    }

    .table td {
      padding: 1rem 1.5rem;
      color: #111827;
      font-size: 0.875rem;
      border-bottom: 1px solid #e5e7eb;
      vertical-align: middle;
    }

    .table tr:last-child td {
      border-bottom: none;
    }

    .status-badge {
      padding: 0.25rem 0.75rem;
      border-radius: 9999px;
      font-size: 0.75rem;
      font-weight: 500;
      display: inline-flex;
      align-items: center;
    }

    .status-active {
      background-color: #dcfce7;
      color: #15803d;
    }

    .status-inactive {
      background-color: #fee2e2;
      color: #b91c1c;
    }

    .btn-action {
      padding: 0.375rem 0.75rem;
      font-size: 0.75rem;
      border-radius: 4px;
      font-weight: 500;
      text-decoration: none;
    }

    .btn-edit {
      color: #4f46e5;
      background: none;
      border: none;
      padding: 0;
      margin-right: 1rem;
    }

    .btn-edit:hover {
      color: #4338ca;
    }

    .btn-activate {
      color: #15803d;
      background: none;
      border: none;
      padding: 0;
    }

    .btn-activate:hover {
      color: #166534;
    }

    .btn-deactivate {
      color: #b91c1c;
      background: none;
      border: none;
      padding: 0;
    }

    .btn-deactivate:hover {
      color: #991b1b;
    }

    .btn-add {
      background-color: #111827;
      color: white;
      border: none;
      padding: 0.625rem 1.25rem;
      border-radius: 6px;
      font-size: 0.875rem;
      font-weight: 500;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .btn-add:hover {
      background-color: #1f2937;
      color: white;
    }

    .modal-content {
      border-radius: 12px;
      border: none;
    }

    .modal-header {
      padding: 1.5rem;
      border-bottom: 1px solid #e5e7eb;
    }

    .modal-title {
      font-size: 1.25rem;
      font-weight: 600;
      color: #111827;
    }

    .modal-body {
      padding: 1.5rem;
    }

    .form-label {
      font-size: 0.875rem;
      font-weight: 500;
      color: #374151;
      margin-bottom: 0.5rem;
    }

    .form-control, .form-select {
      padding: 0.625rem 0.75rem;
      font-size: 0.875rem;
      border: 1px solid #e5e7eb;
      border-radius: 6px;
      color: #111827;
    }

    .form-control:focus, .form-select:focus {
      border-color: #6366f1;
      box-shadow: 0 0 0 1px rgba(99, 102, 241, 0.2);
    }

    .modal-footer {
      padding: 1.5rem;
      border-top: 1px solid #e5e7eb;
    }

    .btn-secondary {
      background-color: #f3f4f6;
      border: 1px solid #e5e7eb;
      color: #374151;
    }

    .btn-secondary:hover {
      background-color: #e5e7eb;
      border-color: #d1d5db;
    }

    .btn-primary {
      background-color: #111827;
      border: none;
    }

    .btn-primary:hover {
      background-color: #1f2937;
    }
  </style>
</head>
<body>
  <div class="app-layout">
    <%- include('../partials/sidebar') %>

    <main class="main-content">
      <div class="page-header">
        <h1>Offer Management</h1>
        <button class="btn btn-add" data-bs-toggle="modal" data-bs-target="#addOfferModal">
          <i class="bi bi-plus"></i> Add New Offer
        </button>
      </div>

      <div class="search-section">
        <div class="search-box">
          <input type="text" class="search-input" id="searchOffers" placeholder="Search offers...">
          <button class="btn-search" onclick="searchOffers()">Search</button>
        </div>
        <select class="status-filter" id="statusFilter">
          <option value="all">All Status</option>
          <option value="active">Active</option>
          <option value="inactive">Inactive</option>
        </select>
      </div>

      <div class="table-container">
        <table class="table">
          <thead>
            <tr>
              <th>TYPE</th>
              <th>NAME</th>
              <th>DISCOUNT</th>
              <th>START DATE</th>
              <th>END DATE</th>
              <th>STATUS</th>
              <th>ACTIONS</th>
            </tr>
          </thead>
          <tbody>
            <% offers.forEach(offer => { %>
              <tr>
                <td><%= offer.type %></td>
                <td><%= offer.name %></td>
                <td><%= offer.discount %>%</td>
                <td><%= new Date(offer.startDate).toLocaleDateString() %></td>
                <td><%= new Date(offer.endDate).toLocaleDateString() %></td>
                <td>
                  <span class="status-badge <%= offer.status === 'Active' ? 'status-active' : 'status-inactive' %>">
                    <%= offer.status %>
                  </span>
                </td>
                <td>
                  <button class="btn-action btn-edit" data-offer-id="<%= offer._id %>">
                    <i class="fas fa-edit"></i>
                  </button>
                  <button class="btn-action toggle-status <%= offer.status === 'Active' ? 'btn-deactivate' : 'btn-activate' %>"
                          data-offer-id="<%= offer._id %>"
                          data-current-status="<%= offer.status === 'Active' %>">
                    <i class="fas <%= offer.status === 'Active' ? 'fa-ban' : 'fa-check' %>"></i>
                  </button>
                </td>
              </tr>
            <% }) %>
          </tbody>
        </table>
      </div>
    </main>
  </div>

  <!-- Add Offer Modal -->
  <div class="modal fade" id="addOfferModal" tabindex="-1">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Add New Offer</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <form id="addOfferForm">
            <div class="mb-3">
              <label class="form-label">Offer Name</label>
              <input type="text" 
                     class="form-control" 
                     name="name" 
                     pattern="^[A-Za-z0-9- ]{2,50}$"
                     title="Offer name can contain letters, numbers, spaces, and hyphens (2-50 characters)"
                     required>
              <div class="invalid-feedback">Please enter a valid offer name (2-50 characters)</div>
            </div>
            <div class="mb-3">
              <label class="form-label">Offer Type</label>
              <select class="form-select" name="type" id="offerType" required>
                <option value="">Select Type</option>
                <option value="Product">Product</option>
                <option value="Category">Category</option>
              </select>
            </div>
            <div class="mb-3">
              <label class="form-label">Discount Percentage</label>
              <input type="number" class="form-control" name="discount" min="0" max="100" required>
            </div>
            <div class="mb-3">
              <label class="form-label">Start Date</label>
              <input type="date" class="form-control" name="startDate" required>
            </div>
            <div class="mb-3">
              <label class="form-label">End Date</label>
              <input type="date" class="form-control" name="endDate" required>
            </div>
            <div class="mb-3" id="productSelect" style="display: none;">
              <label class="form-label">Select Product</label>
              <% if (products && products.length > 0) { %>
                <select class="form-select" name="productTarget" required>
                  <option value="">Select a product</option>
                  <% products.forEach(product => { %>
                    <option value="<%= product._id %>"><%= product.name %></option>
                  <% }) %>
                </select>
                <div class="form-text text-muted">Only active products are shown</div>
              <% } else { %>
                <div class="alert alert-warning">
                  <i class="bi bi-exclamation-triangle"></i>
                  No active products available. Please add a product first.
                </div>
              <% } %>
            </div>
            <div class="mb-3" id="categorySelect" style="display: none;">
              <label class="form-label">Select Category</label>
              <% if (categories && categories.length > 0) { %>
                <select class="form-select" name="categoryTarget" required>
                  <option value="">Select a category</option>
                  <% categories.forEach(category => { %>
                    <option value="<%= category._id %>"><%= category.name %></option>
                  <% }) %>
                </select>
                <div class="form-text text-muted">Only active categories are shown</div>
              <% } else { %>
                <div class="alert alert-warning">
                  <i class="bi bi-exclamation-triangle"></i>
                  No active categories available. Please create a category first.
                </div>
              <% } %>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-primary" onclick="submitOffer()">Create Offer</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Edit Offer Modal -->
  <div class="modal fade" id="editOfferModal" tabindex="-1">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Edit Offer</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <form id="editOfferForm">
            <input type="hidden" name="offerId" id="editOfferId">
            <div class="mb-3">
              <label class="form-label">Offer Name</label>
              <input type="text" 
                     class="form-control" 
                     name="name" 
                     id="editOfferName"
                     pattern="^[A-Za-z0-9- ]{2,50}$"
                     title="Offer name can contain letters, numbers, spaces, and hyphens (2-50 characters)"
                     required>
              <div class="invalid-feedback">Please enter a valid offer name (2-50 characters)</div>
            </div>
            <div class="mb-3">
              <label class="form-label">Offer Type</label>
              <select class="form-select" name="type" id="editOfferType" required>
                <option value="">Select Type</option>
                <option value="Product">Product</option>
                <option value="Category">Category</option>
              </select>
            </div>
            <div class="mb-3">
              <label class="form-label">Discount Percentage</label>
              <input type="number" class="form-control" name="discount" id="editOfferDiscount" min="0" max="100" required>
            </div>
            <div class="mb-3">
              <label class="form-label">Start Date</label>
              <input type="date" class="form-control" name="startDate" id="editOfferStartDate" required>
            </div>
            <div class="mb-3">
              <label class="form-label">End Date</label>
              <input type="date" class="form-control" name="endDate" id="editOfferEndDate" required>
            </div>
            <div class="mb-3" id="editProductSelect" style="display: none;">
              <label class="form-label">Select Product</label>
              <% if (products && products.length > 0) { %>
                <select class="form-select" name="productTarget" id="editProductTarget">
                  <option value="">Select a product</option>
                  <% products.forEach(product => { %>
                    <option value="<%= product._id %>"><%= product.name %></option>
                  <% }) %>
                </select>
                <div class="form-text text-muted">Only active products are shown</div>
              <% } %>
            </div>
            <div class="mb-3" id="editCategorySelect" style="display: none;">
              <label class="form-label">Select Category</label>
              <% if (categories && categories.length > 0) { %>
                <select class="form-select" name="categoryTarget" id="editCategoryTarget">
                  <option value="">Select a category</option>
                  <% categories.forEach(category => { %>
                    <option value="<%= category._id %>"><%= category.name %></option>
                  <% }) %>
                </select>
                <div class="form-text text-muted">Only active categories are shown</div>
              <% } %>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-primary" onclick="updateOffer()">Update Offer</button>
        </div>
      </div>
    </div>
  </div>
</body>
</html>
